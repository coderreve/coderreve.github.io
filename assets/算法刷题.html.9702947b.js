import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";import{c as p,o as t,F as e,a as s,b as n,d as o}from"./app.ebc51866.js";const c={},l=s(`<h1 id="\u7B97\u6CD5\u5237\u9898" tabindex="-1"><a class="header-anchor" href="#\u7B97\u6CD5\u5237\u9898" aria-hidden="true">#</a> \u7B97\u6CD5\u5237\u9898</h1><h2 id="\u4E24\u6570\u4E4B\u548C" tabindex="-1"><a class="header-anchor" href="#\u4E24\u6570\u4E4B\u548C" aria-hidden="true">#</a> \u4E24\u6570\u4E4B\u548C</h2><blockquote><p>\u7ED9\u5B9A\u4E00\u4E2A\u6574\u6570\u6570\u7EC4 <code>nums</code> \u548C\u4E00\u4E2A\u6574\u6570\u76EE\u6807\u503C <code>target</code>\uFF0C\u8BF7\u4F60\u5728\u8BE5\u6570\u7EC4\u4E2D\u627E\u51FA **\u548C\u4E3A\u76EE\u6807\u503C **<em>target</em> \u7684\u90A3 <strong>\u4E24\u4E2A</strong> \u6574\u6570\uFF0C\u5E76\u8FD4\u56DE\u5B83\u4EEC\u7684\u6570\u7EC4\u4E0B\u6807\u3002</p><p>\u4F60\u53EF\u4EE5\u5047\u8BBE\u6BCF\u79CD\u8F93\u5165\u53EA\u4F1A\u5BF9\u5E94\u4E00\u4E2A\u7B54\u6848\u3002\u4F46\u662F\uFF0C\u6570\u7EC4\u4E2D\u540C\u4E00\u4E2A\u5143\u7D20\u5728\u7B54\u6848\u91CC\u4E0D\u80FD\u91CD\u590D\u51FA\u73B0\u3002</p><p>\u4F60\u53EF\u4EE5\u6309\u4EFB\u610F\u987A\u5E8F\u8FD4\u56DE\u7B54\u6848\u3002</p></blockquote><blockquote><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Anums = [2,7,11,15], target = 9
\u8F93\u51FA\uFF1A[0,1]
\u89E3\u91CA\uFF1A\u56E0\u4E3A nums[0] + nums[1] == 9 \uFF0C\u8FD4\u56DE [0, 1] \u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u601D\u8DEF: </span>
<span class="token comment">// \u8BB0\u5F55\u5F53\u524D\u6570\u5B57\u7684\u53E6\u4E00\u534A\u662F\u8C01</span>
<span class="token comment">// \u68C0\u6D4B\u5F53\u524D\u6570\u5B57\u662F\u5426\u662F\u522B\u4EBA\u7684\u53E6\u4E00\u534A</span>

<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u8BB0\u5F55\u5F53\u524D\u6570\u5B57\u7684\u4E0B\u6807, \u548C\u53E6\u4E00\u534A\u7684\u503C</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> 

    <span class="token comment">// \u68C0\u67E5\u5F53\u524D\u6570\u5B57\u662F\u5426\u5B58\u5728\u4E8Emap\u4E2D</span>
    <span class="token keyword">const</span> <span class="token function-variable function">check</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> numIdx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> target <span class="token operator">=</span> nums<span class="token punctuation">[</span>numIdx<span class="token punctuation">]</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> map<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">===</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>numIdx<span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>

    
    map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// \u68C0\u67E5\u5F53\u524D\u6570\u5B57\u7684\u53E6\u4E00\u534A\u662F\u5426\u5B58\u5728</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        map<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> result
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6709\u6548\u7684\u62EC\u53F7" tabindex="-1"><a class="header-anchor" href="#\u6709\u6548\u7684\u62EC\u53F7" aria-hidden="true">#</a> \u6709\u6548\u7684\u62EC\u53F7</h2><blockquote><p>\u7ED9\u5B9A\u4E00\u4E2A\u53EA\u5305\u62EC <code>&#39;(&#39;</code>\uFF0C<code>&#39;)&#39;</code>\uFF0C<code>&#39;{&#39;</code>\uFF0C<code>&#39;}&#39;</code>\uFF0C<code>&#39;[&#39;</code>\uFF0C<code>&#39;]&#39;</code> \u7684\u5B57\u7B26\u4E32 <code>s</code> \uFF0C\u5224\u65AD\u5B57\u7B26\u4E32\u662F\u5426\u6709\u6548\u3002</p><p>\u6709\u6548\u5B57\u7B26\u4E32\u9700\u6EE1\u8DB3\uFF1A</p><ol><li>\u5DE6\u62EC\u53F7\u5FC5\u987B\u7528\u76F8\u540C\u7C7B\u578B\u7684\u53F3\u62EC\u53F7\u95ED\u5408\u3002</li><li>\u5DE6\u62EC\u53F7\u5FC5\u987B\u4EE5\u6B63\u786E\u7684\u987A\u5E8F\u95ED\u5408\u3002</li><li>\u6BCF\u4E2A\u53F3\u62EC\u53F7\u90FD\u6709\u4E00\u4E2A\u5BF9\u5E94\u7684\u76F8\u540C\u7C7B\u578B\u7684\u5DE6\u62EC\u53F7\u3002</li></ol></blockquote><blockquote><p><strong>\u793A\u4F8B \uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1As = &quot;()[]{}&quot;
\u8F93\u51FA\uFF1Atrue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>\u601D\u8003\u8FC7\u7A0B\uFF1A</strong></p><ol><li>\u9996\u5148\u5BF9 \u201C\u5DE6\u62EC\u53F7\u5FC5\u987B\u4EE5\u6B63\u786E\u7684\u987A\u5E8F\u95ED\u5408\u201D \u8FD9\u53E5\u8BDD\u4EA7\u751F\u4E86\u7591\u95EE\u3002 \u8FD9\u53E5\u8BDD\u7684\u610F\u601D\u662F \u201C\u5DE6\u62EC\u53F7\u53F3\u8FB9\u5FC5\u987B\u662F\u53F3\u62EC\u53F7\u201D\u7684\u610F\u601D\u5417\uFF1F ( { [ } ] ) \u8FD9\u6837\u7684\u62EC\u53F7\u7B97\u662F\u6709\u6548\u7684\u62EC\u53F7\u5417\uFF1F</li><li>\u901A\u8FC7\u767E\u5EA6\uFF0C ( { [ } ] ) \u8FD9\u79CD\u5F62\u5F0F\u4E0D\u7B97\u662F\u6709\u6548\u7684\u62EC\u53F7\u3002 \u4ED6\u7684\u610F\u601D\u662F \u53EF\u4EE5\u662F &#39;( { [ ] } )&#39; \u6216\u8005 &#39;[ { ( ) } ]&#39;\u8FD9\u79CD\u5BF9\u79F0\u7ED3\u6784, \u4F46\u4E0D\u80FD\u662F &#39;( { [ } ] )&#39; \u8FD9\u79CD\u4EA4\u53C9\u7ED3\u6784</li><li>\u63A5\u4E0B\u6765\u5C31\u5F88\u7B80\u5355\u4E86\uFF0C\u5229\u7528\u6808\u4FDD\u5B58\u5DE6\u62EC\u53F7\uFF0C\u9047\u5230\u53F3\u62EC\u53F7\u5C31\u5F39\u51FA\u6808\u770B\u662F\u5426\u5339\u914D\u3002 \u5F53\u904D\u5386\u5B8C\u6BD5\u540E\u5982\u679C\u6808\u957F\u5EA6\u4E3A0\u5219\u4E3A\u6709\u6548\u7684\u62EC\u53F7</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
   <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token comment">//\u8BB0\u5F55\u5F53\u524D\u6808\u5F39\u51FA\u7684\u53F3\u62EC\u53F7</span>
   <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token string-property property">&#39;(&#39;</span><span class="token operator">:</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">,</span>
     <span class="token string-property property">&#39;[&#39;</span><span class="token operator">:</span><span class="token string">&#39;]&#39;</span><span class="token punctuation">,</span>
     <span class="token string-property property">&#39;{&#39;</span><span class="token operator">:</span><span class="token string">&#39;}&#39;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">const</span> lefts <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment">// \u53D6\u51FA\u6240\u6709\u7684\u5DE6\u62EC\u53F7</span>
   
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token comment">// \u5982\u679C\u662F\u5DE6\u62EC\u53F7\u52A0\u5230\u6808\u4E2D</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span>lefts<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
     <span class="token punctuation">}</span>
     <span class="token comment">// \u5982\u679C\u662F\u53F3\u62EC\u53F7, \u5F39\u51FA\u5143\u7D20\u770B\u662F\u5426\u5339\u914D</span>
     <span class="token keyword">else</span> <span class="token punctuation">{</span>
       right <span class="token operator">=</span> map<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">!==</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token boolean">false</span>
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**\u603B\u7ED3: **</p><p>\u6808\u53EF\u4EE5\u9A8C\u8BC1\u5BF9\u79F0\u7ED3\u6784</p><h2 id="\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868" aria-hidden="true">#</a> \u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868</h2><blockquote><p>\u601D\u8003: \u4E24\u4E2A\u6307\u9488\u7528\u4E8E\u904D\u5386\u4E24\u4E2A\u94FE\u8868. \u521B\u5EFA\u4E00\u4E2A\u65B0\u94FE\u8868. \u518D\u6765\u4E00\u4E2A\u8282\u70B9\u7528\u4E8E\u8BB0\u5F55\u65B0\u94FE\u8868\u7684\u5C3E\u5DF4\u4F4D\u7F6E, \u7528\u4E8E\u6DFB\u52A0\u5143\u7D20</p></blockquote><blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\u8F93\u5165\uFF1Al1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
\u8F93\u51FA\uFF1A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>

\u8F93\u5165\uFF1Al1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
\u8F93\u51FA\uFF1A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Definition for singly-linked list.
 * function ListNode(val, next) <span class="token punctuation">{</span>
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * <span class="token punctuation">}</span>
 */</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">list1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">list2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">mergeTwoLists</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">list1<span class="token punctuation">,</span> list2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>list1 <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> list2
    <span class="token punctuation">}</span> 
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>list2 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> list1
    <span class="token punctuation">}</span>
    <span class="token comment">// \u65B0\u94FE\u8868\u7684\u5934\u90E8</span>
    <span class="token comment">// \u65B0\u94FE\u8868\u7684\u5C3E\u90E8</span>
    <span class="token keyword">let</span> head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 

   
    <span class="token keyword">while</span><span class="token punctuation">(</span>list1 <span class="token operator">&amp;&amp;</span> list2<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> list2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
            tail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>val<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span>
            list1 <span class="token operator">=</span> list1<span class="token punctuation">.</span>next

        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            tail<span class="token punctuation">.</span>next  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span>val<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span> 
            list2 <span class="token operator">=</span> list2<span class="token punctuation">.</span>next
        <span class="token punctuation">}</span>
        
        tail <span class="token operator">=</span> tail<span class="token punctuation">.</span>next 
    <span class="token punctuation">}</span> 

    tail<span class="token punctuation">.</span>next <span class="token operator">=</span> list1 <span class="token operator">||</span> list2

    <span class="token keyword">return</span> head<span class="token punctuation">.</span>next
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u603B\u7ED3</strong></p><p>\u4EE3\u7801\u601D\u8DEF\u5E76\u4E0D\u96BE, \u4F46\u662F\u6709\u4E2A\u7EC6\u8282\u5361\u4E86\u6211\u534A\u4E2A\u5C0F\u65F6</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">while</span><span class="token punctuation">(</span>list1 <span class="token operator">&amp;&amp;</span> list2<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> \u8FD9\u6BB5 \u4EE3\u7801\u6211\u4E00\u5F00\u59CB\u5199\u6210\u4E86
  <span class="token keyword">while</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> list2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> \u5BFC\u81F4\u62FF\u4E0D\u5230\u6700\u540E\u4E00\u4E2A\u5143\u7D20   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E8E\u662F\u8981\u660E\u786E\u904D\u5386\u94FE\u8868\u65F6\u5019, \u4EC0\u4E48\u65F6\u5019 + .next:</p><p>\u5FAA\u73AF\u4F53\u5185\u7528\u5230\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u4E86, \u5219\u4E0D\u80FD\u52A0.next</p><h2 id="\u722C\u697C\u68AF" tabindex="-1"><a class="header-anchor" href="#\u722C\u697C\u68AF" aria-hidden="true">#</a> \u722C\u697C\u68AF</h2><blockquote><p>\u5047\u8BBE\u4F60\u6B63\u5728\u722C\u697C\u68AF\u3002\u9700\u8981 <code>n</code> \u9636\u4F60\u624D\u80FD\u5230\u8FBE\u697C\u9876\u3002</p><p>\u6BCF\u6B21\u4F60\u53EF\u4EE5\u722C <code>1</code> \u6216 <code>2</code> \u4E2A\u53F0\u9636\u3002\u4F60\u6709\u591A\u5C11\u79CD\u4E0D\u540C\u7684\u65B9\u6CD5\u53EF\u4EE5\u722C\u5230\u697C\u9876\u5462\uFF1F</p></blockquote><blockquote><p>\u601D\u8003 :</p><ol><li>\u76F4\u89C9\u544A\u8BC9\u6211\u662F\u9012\u5F52, \u7136\u540E\u6211\u5217\u51FA\u4E86\u9012\u9F9F\u5F0F</li></ol><p>$ f(n) = { ^{ f(n-1) + 1 , {n &gt; 1} } _{1, {n = 1}} $</p><p>\u5047\u8BBEf(n)\u662F\u6C42n\u4E2A\u53F0\u9636\u7684\u65B9\u6CD5, \u90A3\u4E48\u5C31\u5E94\u8BE5\u7B49\u4E8E f(n -1) + 1\u79CD. \u81F3\u4E8E1\u4E2A\u53F0\u9636, \u5C31\u4E00\u79CD\u8D70\u6CD5</p><p>\u200B</p><p>\u7136\u540E\u5199\u51FA\u4E86\u51FD\u6570.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u4E2A\u51FD\u6570\u5F97\u51FA\u4E86\u671F\u671B\u5916\u7684\u7ED3\u679C, \u6211\u60F3\u4E0D\u51FA\u6765\u4E3A\u4EC0\u4E48\u9519\u4E86</p><p>\u7ECF\u8FC7\u67E5\u8BE2\u6211\u641E\u660E\u767D\u4E86\u6211\u7684\u95EE\u9898:</p><p>f(n) \u4E0D\u7B49\u4E8E f(n - 1) + 1, f(n)\u4EE3\u8868\u7684\u662Fn\u4E2A\u9636\u68AF\u4F1A\u51FA\u73B0\u7684\u65B9\u6CD5\u6570, \u5C11\u4E00\u4E2A\u9636\u68AF\u65B9\u6CD5\u6570\u5E76\u4E0D\u4E00\u5B9A\u51CF1, \u53EF\u80FD\u4E0D\u53D8</p><p>\u200B</p><ol start="2"><li><p>\u5982\u679C\u5C06\u8D70\u697C\u68AF\u7528\u53EF\u89C6\u5316\u7684\u65B9\u5F0F\u62BD\u8C61\u601D\u8003\u4E00\u60F3, \u611F\u89C9\u50CF\u4E00\u68F5\u5E26\u6743\u7684\u4E8C\u53C9\u6811. \u4ECE\u6839\u8282\u70B9\u5F00\u59CB, \u6BCF\u6B21\u90FD\u6709\u4E24\u4E2A\u5B50\u8282\u70B9.</p><p>\u90A3\u4E48\u95EE\u9898\u53EF\u4EE5\u88AB\u62BD\u8C61\u4E3A: &quot;\u5DF2\u77E5\u6709\u4E00\u68F5\u5E26\u6743\u7684\u4E8C\u53C9\u6811, \u5DE6\u8282\u70B9\u7684\u8DEF\u5F84\u6743\u91CD\u4E3A1, \u53F3\u8282\u70B9\u7684\u6743\u91CD\u4E3A2, \u6BCF\u4E2A\u8DEF\u5F84\u7684\u6743\u91CD\u548C\u4E3An, \u6C42\u6709\u591A\u5C11\u6761\u8DEF\u5F84?&quot;</p><p>\u4F46\u662F\u6211\u4E0D\u4F1A\u89E3\u8FD9\u9053\u9898.....</p></li></ol></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// I will use dynamic programming to answer this question.  </span>
<span class="token keyword">var</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span>

  <span class="token comment">//  An array of dynamic programming, its default value is count of way that move to first step and second step.</span>
  <span class="token keyword">const</span> opt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    opt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> opt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> opt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
 
  <span class="token keyword">return</span> opt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u603B\u7ED3:</strong></p><ol><li>\u9012\u63A8\u5F0F\u4E3A\u4EC0\u4E48\u662Ff(n) = f(n-1)+f(n-2)</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\u7531\u4E8E\u9898\u76EE\u8981\u6C42\u53EA\u80FD\u8FC8\u4E00\u9636\u6216\u8005\u4E24\u9636
\u6240\u4EE5\u8981\u60F3\u8FBE\u5230\u53EA\u6709\u4E24\u79CD\u53EF\u80FD\u6027\u4ECEn<span class="token operator">-</span><span class="token number">1</span>\u70B9\u8FC8\u4E00\u6B65\u5230\u7EC8\u70B9<span class="token punctuation">,</span> \u6216\u8005\u4ECEn<span class="token operator">-</span><span class="token number">2</span>\u70B9\u8FC8\u4E24\u6B65\u5230\u8FBE\u7EC8\u70B9

\u5047\u8BBE\u4ECE\u8D77\u70B9\u5230 n<span class="token operator">-</span><span class="token number">1</span>\u70B9\u6709 <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\u79CD\u65B9\u6848<span class="token punctuation">,</span> <span class="token function">\u90A3\u4E48\u4ECE\u8D77\u70B9\u70B9\u5230\u7EC8\u70B9\u5C31\u4F1A\u6709f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span>\u79CD\u65B9\u6848<span class="token punctuation">.</span>
\u56E0\u4E3An<span class="token operator">-</span><span class="token number">1</span>\u70B9\u5230\u7EC8\u70B9\u53EA\u6709\u4E00\u79CD\u65B9\u6848<span class="token punctuation">,</span> \u4ECE\u8D77\u70B9\u5230n<span class="token operator">-</span><span class="token number">1</span><span class="token function">\u70B9\u7684\u6BCF\u79CD\u65B9\u6848\u548C\u6700\u540E\u4E00\u79CD\u65B9\u6848\u7ED3\u5408\u4F1A\u5F62\u6210\u65B0\u7684f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token number">1</span>\u79CD\u65B9\u6848

<span class="token literal-property property">\u540C\u7406</span><span class="token operator">:</span> \u4ECEn<span class="token operator">-</span><span class="token number">2</span>\u8D70\u4E00\u6B65\u5230\u7EC8\u70B9\u53EA\u6709\u4E00\u79CD\u65B9\u6848<span class="token punctuation">.</span> \u6CE8\u610F\u8FD9\u91CC\u8BF4\u7684\u662F\u4ECEn<span class="token operator">-</span><span class="token number">2</span>\u76F4\u8FBE\u5230\u7EC8\u70B9\u53EA\u6709\u4E00\u79CD\u65B9\u6848<span class="token punctuation">,</span> \u6211\u4EEC\u53EA\u8003\u8651\u76F4\u8FBE\u7684
\u65B9\u6848<span class="token punctuation">.</span> \u90A3\u4E48\u4ECE\u8D77\u70B9\u5230n<span class="token operator">-</span><span class="token number">2</span>\u70B9\u7684\u6BCF\u79CD\u65B9\u6848\u4F1A\u548Cn<span class="token operator">-</span><span class="token number">2</span><span class="token function">\u76F4\u8FBE\u7EC8\u70B9\u5F62\u6210\u65B0\u7684f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span>\u79CD\u65B9\u6848

<span class="token literal-property property">\u8FD8\u6709\u4E00\u70B9\u8981\u6CE8\u610F\u7684\u662F</span><span class="token operator">:</span> <span class="token function">\u4E0A\u8FF0\u548C\u65B0\u5F62\u6210\u7684f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">\u79CD\u65B9\u6848\u548C\u65B0\u5F62\u6210\u7684f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>\u79CD\u65B9\u6848\u662F\u5B8C\u5168\u4E0D\u540C\u7684
<span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\u662F\u548Cn<span class="token operator">-</span><span class="token number">1</span>\u70B9 <span class="token operator">--</span><span class="token operator">&gt;</span>\u7EC8\u70B9\u96C6\u5408\u5F62\u6210\u7684<span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>\u662F\u548Cn<span class="token operator">-</span><span class="token number">2</span> <span class="token operator">--</span><span class="token operator">&gt;</span> \u7EC8\u70B9\u7ED3\u5408\u5F62\u6210\u7684<span class="token punctuation">,</span> \u4ED6\u4EEC\u6BCF\u4E00\u79CD\u65B9\u6848\u90FD\u4E0D\u540C

\u8BF4\u5B8C\u4E86\u8FD9\u4E9B<span class="token punctuation">,</span> <span class="token literal-property property">\u518D\u6765\u770B\u770B\u95EE\u9898\u548B\u89E3\u628A</span><span class="token operator">:</span>
<span class="token literal-property property">\u6839\u636E\u9898\u610F</span><span class="token operator">:</span>
<span class="token number">1.</span> \u56E0\u4E3A\u4E00\u6B21\u53EA\u80FD\u8D70\u4E00\u6B65\u6216\u8005\u4E24\u6B65<span class="token punctuation">,</span> \u6240\u4EE5\u4E00\u5B9A\u4F1A\u7ECF\u8FC7n<span class="token operator">-</span><span class="token number">1</span>\u548Cn<span class="token operator">-</span><span class="token number">2</span>\u70B9\u5176\u4E2D\u7684\u4E00\u4E2A<span class="token punctuation">.</span>
<span class="token number">2.</span> \u4ECE\u8D77\u70B9\u5230\u7EC8\u70B9\u7684\u8DEF\u5F84\u6570\u7B49\u4E8E<span class="token string">&quot;\u4ECE\u8D77\u70B9\u7ECF\u8FC7n-1\u70B9\u76F4\u8FBE\u7EC8\u70B9\u7684\u8DEF\u5F84\u6570&quot;</span>\u548C<span class="token string">&quot;\u4ECE\u8D77\u70B9\u7ECF\u8FC7n-2\u70B9\u76F4\u8FBE\u7EC8\u70B9\u7684\u8DEF\u5F84\u6570&quot;</span>
<span class="token number">3.</span> \u53C8\u56E0\u4E3A\u7ECF\u8FC7n<span class="token operator">-</span><span class="token number">1</span><span class="token function">\u76F4\u8FBE\u7EC8\u70B9\u7684\u8DEF\u5F84\u6570\u4E3Af</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \u76F4\u8FBEn<span class="token operator">-</span><span class="token number">2</span><span class="token function">\u70B9\u76F4\u8FBE\u7EC8\u70B9\u4E3Af</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>\u4E2A<span class="token punctuation">,</span> \u5176\u4E2D\u5E76\u6CA1\u6709\u91CD\u53E0\u7684\u8DEF\u7EBF<span class="token punctuation">.</span>
\u6240\u4EE5
<span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4E8C\u53C9\u6811\u7684\u4E2D\u5E8F\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811\u7684\u4E2D\u5E8F\u904D\u5386" aria-hidden="true">#</a> \u4E8C\u53C9\u6811\u7684\u4E2D\u5E8F\u904D\u5386</h2><blockquote><p>\u7ED9\u5B9A\u4E00\u4E2A\u4E8C\u53C9\u6811\u7684\u6839\u8282\u70B9 <code>root</code> \uFF0C\u8FD4\u56DE \u5B83\u7684 \u4E2D\u5E8F\u904D\u5386 \u3002</p></blockquote><blockquote><p>\u601D\u8DEF:</p><ol><li><p>\u9012\u5F52\u7248</p><blockquote><p>\u4ECE\u6839\u8282\u70B9\u5148\u5904\u7406\u505A\u6DF1\u5EA6\u4F18\u5148\u904D\u5386, \u5148\u5411\u5DE6\u6DF1\u5165\u9012\u5F52, \u518D\u5904\u7406\u5DE6\u8282\u70B9, \u518D\u5411\u53F3\u6DF1\u5EA6\u904D\u5386</p></blockquote></li><li><p>\u975E\u9012\u5F52\u7248</p><blockquote><p>\u53EF\u4EE5\u7528\u6808\u8BB0\u5F55\u4ECE\u6839\u8282\u70B9\u5230\u6700\u5DE6\u8282\u70B9\u7684\u904D\u5386\u987A\u5E8F</p><p>\u5F39\u51FA\u8282\u70B9\u540E\u5904\u7406\u8BE5\u8282\u70B9</p><p>\u5904\u7406\u5B8C\u8BE5\u8282\u70B9\u540E\u5904\u7406\u8BE5\u8282\u70B9\u7684\u53F3\u8282\u70B9</p><p>\u5904\u7406\u53F3\u8282\u70B9\u7684\u6D41\u7A0B\u662F:</p><p>\u6DF1\u5165\u6240\u6709\u5DE6\u8282\u70B9\u5E76\u52A0\u5230\u6808\u4E2D</p></blockquote></li></ol></blockquote><p><strong>\u9012\u5F52\u7248</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>result<span class="token punctuation">)</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
        <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>result<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u975E\u9012\u5F52, \u6808\u7248</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment">// \u867D\u7136\u662F\u4ECEroot\u5FAA\u73AF, \u4F46\u662F\u8FD9\u662F\u5FAA\u73AF, \u5C31\u8981\u8003\u8651\u4EC0\u4E48\u662F\u8981\u5FAA\u73AF\u7684\u5185\u5BB9</span>
    <span class="token comment">// 1.\u7ED9\u5B9A\u4E00\u4E2AX\u8282\u70B9, \u5C06X\u8282\u70B9\u6240\u6709\u5DE6\u8282\u70B9\u52A0\u5165\u6808\u4E2D</span>
    <span class="token comment">// 2. \u5F39\u51FA\u9876\u6808\u5E27, \u5C06\u5176\u6307\u9488\u6307\u5411\u53F3\u8282\u70B9\u505A\u5FAA\u73AF\u5904\u7406</span>
    <span class="token comment">// 3. \u5728\u904D\u5386\u8FC7\u7A0B\u4E2D\u6307\u9488\u7684\u6307\u5411: </span>
    <span class="token comment">//    1. \u5DE6\u5B50\u8282\u70B9\u6DFB\u52A0\u8FC7\u7A0B\u4E2D\u7684\u5DE6\u5B50\u8282\u70B9 2. \u5728\u5904\u7406\u5B8C\u8282\u70B9\u540E\u5FAA\u73AF\u4F53\u7684\u6700\u540E\u6307\u9488\u6307\u5411\u5F85\u5904\u7406\u7684\u53F3\u8282\u70B9. \u53F3\u8282\u70B9\u7684\u60C5\u51B5\u53EF\u80FD\u4E3Anull,\u4E5F\u53EF\u80FD\u5B9E\u9645\u5B58\u5728.</span>
    

    <span class="token comment">// \u6309\u7167\u6D41\u7A0B\u63A7\u5236, \u6700\u540E\u4E00\u4E2A\u904D\u5386\u7684\u8282\u70B9\u4E3A\u6811\u7684\u6700\u53F3\u8282\u70B9, \u51FA\u5FAA\u73AF\u7684\u65F6\u5019\u6307\u9488\u6307\u5411null</span>
    <span class="token comment">// \u4E24\u4E2A\u6761\u4EF6\u90FD\u6EE1\u8DB3\u65F6\u5019, \u5C31\u53EF\u4EE5\u76F4\u63A5\u5FAA\u73AF</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">||</span> root <span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
        root <span class="token operator">=</span> root<span class="token punctuation">.</span>left
      <span class="token punctuation">}</span>
      
      root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// \u5982\u679C\u8FDB\u5FAA\u73AF\u7684\u65F6\u5019\u662F\u5B50\u6811\u7684\u6839\u8282\u70B9, \u5219\u5F39\u51FA\u7684\u662F\u5B50\u6811\u7684\u6700\u5DE6\u8282\u70B9</span>
                         <span class="token comment">// \u5982\u679C\u8FDB\u5FAA\u73AF\u7684\u65F6\u5019\u662F\u53F3\u8282\u70B9\u5E76\u4E14\u4E3Anull, \u5F39\u51FA\u7684\u662F\u7236\u8282\u70B9</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> 
      root <span class="token operator">=</span> root<span class="token punctuation">.</span>right <span class="token comment">// \u5982\u679C\u8FDB\u5FAA\u73AF\u7684\u662F\u662F\u5B50\u6811\u7684\u6839\u8282\u70B9, \u4FDD\u5B58\u7684\u662F\u53F3\u8282\u70B9</span>
                        <span class="token comment">// \u5982\u679C\u8FDB\u5FAA\u73AF\u7684\u65F6\u5019\u662F\u53F3\u8282\u70B9\u5E76\u4E14\u4E3Anull, \u4FDD\u5B58\u7684\u662F\u53F3\u8282\u70B9\u7684\u53F3\u5B50\u6811</span>
    <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5BF9\u79F0\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#\u5BF9\u79F0\u4E8C\u53C9\u6811" aria-hidden="true">#</a> \u5BF9\u79F0\u4E8C\u53C9\u6811</h2><blockquote><p>\u601D\u8DEF: \u5BF9\u5DE6\u53F3\u5B50\u6811\u5206\u522B\u9012\u5F52, \u9012\u5F52\u540E\u6BD4\u8F83\u5DE6\u5B50\u6811\u7684\u6700\u5DE6\u7CFB\u8282\u70B9\u548C\u53F3\u5B50\u6811\u7684\u6700\u5DE6\u8282\u70B9, \u4EE5\u53CA\u5DE6\u5B50\u6811\u7684\u6700\u53F3\u8282\u70B9\u548C\u53F3\u5B50\u6811\u7684\u7684\u6700\u5DE6\u8282\u70B9\u662F\u5426\u76F8\u7B49, \u7136\u540E\u5411\u4E0A\u8FD4\u56DE</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) <span class="token punctuation">{</span>
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * <span class="token punctuation">}</span>
 */</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span>right</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">!==</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>left<span class="token punctuation">,</span>right<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>right<span class="token punctuation">,</span>right<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token function-variable function">isSymmetric</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6" aria-hidden="true">#</a> \u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6</h2><blockquote><p>\u7ED9\u5B9A\u4E00\u4E2A\u4E8C\u53C9\u6811\uFF0C\u627E\u51FA\u5176\u6700\u5927\u6DF1\u5EA6\u3002</p><p>\u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6\u4E3A\u6839\u8282\u70B9\u5230\u6700\u8FDC\u53F6\u5B50\u8282\u70B9\u7684\u6700\u957F\u8DEF\u5F84\u4E0A\u7684\u8282\u70B9\u6570\u3002</p><p><strong>\u8BF4\u660E:</strong> \u53F6\u5B50\u8282\u70B9\u662F\u6307\u6CA1\u6709\u5B50\u8282\u70B9\u7684\u8282\u70B9\u3002</p></blockquote><p><strong>\u793A\u4F8B:</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token number">3</span>
   <span class="token operator">/</span> \\
  <span class="token number">9</span>  <span class="token number">20</span>
    <span class="token operator">/</span>  \\
   <span class="token number">15</span>   <span class="token number">7</span>
\u8FD4\u56DE\u5B83\u7684\u6700\u5927\u6DF1\u5EA6 <span class="token number">3</span> \u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),i=n("blockquote",null,[n("p",null,"\u601D\u8003:"),n("ol",null,[n("li",null,[o("\u4E3A\u4E86\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898, \u9700\u8981\u7ED9\u5DE6\u53F3\u5B50\u6811\u8981\u4FE1\u606F, \u8FD9\u4E2A\u4FE1\u606F\u662F\u5DE6\u53F3\u5B50\u6811\u7684\u6DF1\u5EA6. \u6709\u4E86\u5DE6\u53F3\u5B50\u6811\u7684\u6DF1\u5EA6\u4E4B\u540E\u5C31\u53EF\u4EE5\u6C42max + 1\u5219\u4E3Aroot\u7684\u6700\u5927\u6DF1\u5EA6, \u6839\u636E\u8FD9\u4E2A\u5206\u6790\u5C31\u53EF\u4EE5\u5217\u51FA\u9012\u63A8\u5F0F: "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"T"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mi",null,"m"),n("mi",null,"a"),n("mi",null,"x"),n("mo",{stretchy:"false"},"("),n("mi",null,"T"),n("mo",{stretchy:"false"},"("),n("mi",null,"l"),n("mi",null,"e"),n("mi",null,"f"),n("mi",null,"t"),n("mo",{stretchy:"false"},")"),n("mo",{separator:"true"},","),n("mi",null,"T"),n("mo",{stretchy:"false"},"("),n("mi",null,"r"),n("mi",null,"i"),n("mi",null,"g"),n("mi",null,"h"),n("mi",null,"t"),n("mo",{stretchy:"false"},")"),n("mo",{stretchy:"false"},")"),n("mo",null,"+"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"T(n) = max(T(left) , T(right)) + 1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"ma"),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mclose"},")"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal"},"h"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mclose"},"))"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])])]),n("li",null,"\u4E5F\u53EF\u4EE5\u4ECE\u9012\u5F52\u7684\u6D41\u7A0B\u6765\u601D\u8003, \u4E8C\u53C9\u6811dfs\u7684\u672C\u8D28\u662F, \u9012\u5F52\u6700\u540E\u4E24\u4E2A\u8282\u70B9\u5355\u72EC\u8FD4\u56DE\u4FE1\u606F\u7ED9\u7236\u8282\u70B9\u52A0\u5DE5, \u7236\u8282\u70B9\u548C\u5BF9\u5E94\u7684\u5144\u5F1F\u8282\u70B9\u518D\u6267\u884C\u8FD9\u4E2A\u6D41\u7A0B, \u4E00\u76F4\u5230root. \u6545\u800C\u8FB9\u7F18case\u662F\u4E3Aroot\u4E0D\u5B58\u5728\u65F6\u5019\u8FD4\u56DE0")])],-1),u=s(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>

  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4E70\u5356\u80A1\u7968\u7684\u6700\u4F73\u65F6\u673A" tabindex="-1"><a class="header-anchor" href="#\u4E70\u5356\u80A1\u7968\u7684\u6700\u4F73\u65F6\u673A" aria-hidden="true">#</a> \u4E70\u5356\u80A1\u7968\u7684\u6700\u4F73\u65F6\u673A</h2><blockquote><p>\u7ED9\u5B9A\u4E00\u4E2A\u6570\u7EC4 <code>prices</code> \uFF0C\u5B83\u7684\u7B2C <code>i</code> \u4E2A\u5143\u7D20 <code>prices[i]</code> \u8868\u793A\u4E00\u652F\u7ED9\u5B9A\u80A1\u7968\u7B2C <code>i</code> \u5929\u7684\u4EF7\u683C\u3002</p><p>\u4F60\u53EA\u80FD\u9009\u62E9 <strong>\u67D0\u4E00\u5929</strong> \u4E70\u5165\u8FD9\u53EA\u80A1\u7968\uFF0C\u5E76\u9009\u62E9\u5728 <strong>\u672A\u6765\u7684\u67D0\u4E00\u4E2A\u4E0D\u540C\u7684\u65E5\u5B50</strong> \u5356\u51FA\u8BE5\u80A1\u7968\u3002\u8BBE\u8BA1\u4E00\u4E2A\u7B97\u6CD5\u6765\u8BA1\u7B97\u4F60\u6240\u80FD\u83B7\u53D6\u7684\u6700\u5927\u5229\u6DA6\u3002</p><p>\u8FD4\u56DE\u4F60\u53EF\u4EE5\u4ECE\u8FD9\u7B14\u4EA4\u6613\u4E2D\u83B7\u53D6\u7684\u6700\u5927\u5229\u6DA6\u3002\u5982\u679C\u4F60\u4E0D\u80FD\u83B7\u53D6\u4EFB\u4F55\u5229\u6DA6\uFF0C\u8FD4\u56DE <code>0</code> \u3002</p></blockquote><blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1A[7,1,5,3,6,4]
\u8F93\u51FA\uFF1A5
\u89E3\u91CA\uFF1A\u5728\u7B2C 2 \u5929\uFF08\u80A1\u7968\u4EF7\u683C = 1\uFF09\u7684\u65F6\u5019\u4E70\u5165\uFF0C\u5728\u7B2C 5 \u5929\uFF08\u80A1\u7968\u4EF7\u683C = 6\uFF09\u7684\u65F6\u5019\u5356\u51FA\uFF0C\u6700\u5927\u5229\u6DA6 = 6-1 = 5 \u3002
     \u6CE8\u610F\u5229\u6DA6\u4E0D\u80FD\u662F 7-1 = 6, \u56E0\u4E3A\u5356\u51FA\u4EF7\u683C\u9700\u8981\u5927\u4E8E\u4E70\u5165\u4EF7\u683C\uFF1B\u540C\u65F6\uFF0C\u4F60\u4E0D\u80FD\u5728\u4E70\u5165\u524D\u5356\u51FA\u80A1\u7968\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Aprices = [7,6,4,3,1]
\u8F93\u51FA\uFF1A0
\u89E3\u91CA\uFF1A\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B, \u6CA1\u6709\u4EA4\u6613\u5B8C\u6210, \u6240\u4EE5\u6700\u5927\u5229\u6DA6\u4E3A 0\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>`,5),r=n("blockquote",null,[n("p",null,"\u601D\u8DEF:"),n("p",null,"\u52A8\u6001\u89C4\u5212\u9898: \u5BF9\u4E8E\u7B2CN\u5929\u6765\u8BF4\u6700\u5927\u5229\u6DA6\u4E3A N-1\u5929\u7684\u6700\u5927\u5229\u6DA6\u4EE5\u53CA\u7B97\u4E0A\u5F53\u5929\u4EE5\u540E\u8BA1\u7B97\u7684\u5229\u6DA6\u503C\u6C42max"),n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"T"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("msubsup",null,[n("mo",{stretchy:"false"},"{"),n("mrow",null,[n("mi",null,"m"),n("mi",null,"a"),n("mi",null,"x"),n("mo",{stretchy:"false"},"("),n("mi",null,"T"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",null,"\u2212"),n("mn",null,"1"),n("mo",{stretchy:"false"},")"),n("mo",{separator:"true"},","),n("mtext",null,"\u672C\u5929\u7684\u5229\u6DA6"),n("mo",{stretchy:"false"},")"),n("mo",{separator:"true"},","),n("mi",null,"n"),n("mo",null,">"),n("mn",null,"1")]),n("mrow",null,[n("mn",null,"0"),n("mo",{separator:"true"},","),n("mi",null,"n"),n("mo",null,"="),n("mn",null,"1")])]),n("mo",{stretchy:"false"},"}")]),n("annotation",{encoding:"application/x-tex"},"T(n) = \\{ ^{ 0, n = 1 } _{ max( T(n-1) , \u672C\u5929\u7684\u5229\u6DA6 ) ,n > 1 } \\}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.4472em","vertical-align":"-0.5152em"}}),n("span",{class:"mopen"},[n("span",{class:"mopen"},"{"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.932em"}},[n("span",{style:{top:"-2.3598em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"ma"),n("span",{class:"mord mathnormal mtight"},"x"),n("span",{class:"mopen mtight"},"("),n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"mopen mtight"},"("),n("span",{class:"mord mathnormal mtight"},"n"),n("span",{class:"mbin mtight"},"\u2212"),n("span",{class:"mord mtight"},"1"),n("span",{class:"mclose mtight"},")"),n("span",{class:"mpunct mtight"},","),n("span",{class:"mord cjk_fallback mtight"},"\u672C\u5929\u7684\u5229\u6DA6"),n("span",{class:"mclose mtight"},")"),n("span",{class:"mpunct mtight"},","),n("span",{class:"mord mathnormal mtight"},"n"),n("span",{class:"mrel mtight"},">"),n("span",{class:"mord mtight"},"1")])])]),n("span",{style:{top:"-3.1809em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"0"),n("span",{class:"mpunct mtight"},","),n("span",{class:"mord mathnormal mtight"},"n"),n("span",{class:"mrel mtight"},"="),n("span",{class:"mord mtight"},"1")])])])]),n("span",{class:"vlist-s"},"\u200B")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.5152em"}},[n("span")])])])])]),n("span",{class:"mclose"},"}")])])])])],-1),k=s(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">maxProfit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">prices</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token keyword">let</span> minPrice <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token comment">// To record current day profits.</span>
   <span class="token keyword">let</span> curProfit
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      curProfit <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minPrice
      <span class="token comment">// No money can be earned when present-day profit is 0.</span>
      curProfit <span class="token operator">=</span> curProfit <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> curProfit <span class="token operator">:</span> <span class="token number">0</span>

      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>curProfit<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      
      <span class="token comment">// Attempt to update the min price.</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          minPrice <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">return</span> dp<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57" aria-hidden="true">#</a> \u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57</h2><blockquote><p>\u7ED9\u4F60\u4E00\u4E2A <strong>\u975E\u7A7A</strong> \u6574\u6570\u6570\u7EC4 <code>nums</code> \uFF0C\u9664\u4E86\u67D0\u4E2A\u5143\u7D20\u53EA\u51FA\u73B0\u4E00\u6B21\u4EE5\u5916\uFF0C\u5176\u4F59\u6BCF\u4E2A\u5143\u7D20\u5747\u51FA\u73B0\u4E24\u6B21\u3002\u627E\u51FA\u90A3\u4E2A\u53EA\u51FA\u73B0\u4E86\u4E00\u6B21\u7684\u5143\u7D20\u3002</p><p>\u4F60\u5FC5\u987B\u8BBE\u8BA1\u5E76\u5B9E\u73B0\u7EBF\u6027\u65F6\u95F4\u590D\u6742\u5EA6\u7684\u7B97\u6CD5\u6765\u89E3\u51B3\u6B64\u95EE\u9898\uFF0C\u4E14\u8BE5\u7B97\u6CD5\u53EA\u4F7F\u7528\u5E38\u91CF\u989D\u5916\u7A7A\u95F4\u3002</p></blockquote><blockquote><p><strong>\u793A\u4F8B 1 \uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Anums = [2,2,1]
\u8F93\u51FA\uFF1A1

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2 \uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Anums = [4,1,2,1,2]
\u8F93\u51FA\uFF1A4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>\u601D\u8DEF: \u672C\u9898\u8003\u5BDF\u5F02\u6216\u7684\u77E5\u8BC6, \u5FD8\u8BB0\u4E86\u81EA\u5DF1\u767E\u5EA6\u4E0B</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">singleNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num <span class="token operator">^=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> num
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u73AF\u5F62\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u73AF\u5F62\u94FE\u8868" aria-hidden="true">#</a> \u73AF\u5F62\u94FE\u8868</h2><blockquote><p>\u7ED9\u4F60\u4E00\u4E2A\u94FE\u8868\u7684\u5934\u8282\u70B9 <code>head</code> \uFF0C\u5224\u65AD\u94FE\u8868\u4E2D\u662F\u5426\u6709\u73AF\u3002</p><p>\u5982\u679C\u94FE\u8868\u4E2D\u6709\u67D0\u4E2A\u8282\u70B9\uFF0C\u53EF\u4EE5\u901A\u8FC7\u8FDE\u7EED\u8DDF\u8E2A <code>next</code> \u6307\u9488\u518D\u6B21\u5230\u8FBE\uFF0C\u5219\u94FE\u8868\u4E2D\u5B58\u5728\u73AF\u3002 \u4E3A\u4E86\u8868\u793A\u7ED9\u5B9A\u94FE\u8868\u4E2D\u7684\u73AF\uFF0C\u8BC4\u6D4B\u7CFB\u7EDF\u5185\u90E8\u4F7F\u7528\u6574\u6570 <code>pos</code> \u6765\u8868\u793A\u94FE\u8868\u5C3E\u8FDE\u63A5\u5230\u94FE\u8868\u4E2D\u7684\u4F4D\u7F6E\uFF08\u7D22\u5F15\u4ECE 0 \u5F00\u59CB\uFF09\u3002**\u6CE8\u610F\uFF1Apos \u4E0D\u4F5C\u4E3A\u53C2\u6570\u8FDB\u884C\u4F20\u9012 **\u3002\u4EC5\u4EC5\u662F\u4E3A\u4E86\u6807\u8BC6\u94FE\u8868\u7684\u5B9E\u9645\u60C5\u51B5\u3002</p><p><em>\u5982\u679C\u94FE\u8868\u4E2D\u5B58\u5728\u73AF</em> \uFF0C\u5219\u8FD4\u56DE <code>true</code> \u3002 \u5426\u5219\uFF0C\u8FD4\u56DE <code>false</code> \u3002</p></blockquote><p>**\u8BB0\u5F55\u6CD5 **</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">head</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> record <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
        record<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u5FEB\u6162\u6307\u9488\u6CD5(\u9F9F\u5154\u8D5B\u8DD1\u6CD5). \u8BBE\u7F6E\u4E24\u6839\u6307\u9488, \u6162\u6307\u9488\u4E00\u6B21\u79FB\u52A8\u4E00\u6B65, \u5FEB\u6307\u9488\u4E00\u6B21\u79FB\u52A8\u4E24\u90E8. \u5047\u8BBE\u6709\u73AF, \u5FEB\u6307\u9488\u4F1A\u8FFD\u4E0A\u6162\u6307\u9488, \u5047\u8BBE\u65E0\u73AF, \u5FEB\u6307\u9488\u4F1A\u5148\u5230null</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">head</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">let</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u76F8\u4EA4\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u76F8\u4EA4\u94FE\u8868" aria-hidden="true">#</a> \u76F8\u4EA4\u94FE\u8868</h2><blockquote><p>\u7ED9\u4F60\u4E24\u4E2A\u5355\u94FE\u8868\u7684\u5934\u8282\u70B9 <code>headA</code> \u548C <code>headB</code> \uFF0C\u8BF7\u4F60\u627E\u51FA\u5E76\u8FD4\u56DE\u4E24\u4E2A\u5355\u94FE\u8868\u76F8\u4EA4\u7684\u8D77\u59CB\u8282\u70B9\u3002\u5982\u679C\u4E24\u4E2A\u94FE\u8868\u4E0D\u5B58\u5728\u76F8\u4EA4\u8282\u70B9\uFF0C\u8FD4\u56DE <code>null</code> \u3002</p></blockquote><blockquote><p>\u601D\u8DEF: \u5148\u8DD1\u4E00\u904D\u4EFB\u4E00\u94FE\u8868, \u53EA\u505A\u5B58\u50A8, \u518D\u8DD1\u53E6\u4E00\u4E2A\u94FE\u8868, \u53EA\u505A\u67E5\u8BE2. \u67E5\u8BE2\u7684\u5230\u8FD4\u56DE\u8282\u70B9, \u67E5\u8BE2\u4E0D\u5230\u8FD4\u56DEnull</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">getIntersectionNode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">headA<span class="token punctuation">,</span> headB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>headA <span class="token operator">||</span> <span class="token operator">!</span>headB<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span> <span class="token comment">// \u5982\u679C\u6709\u94FE\u8868\u4E0D\u5B58\u5728, \u6CA1\u6709\u76F8\u4EA4\u70B9</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>headA <span class="token operator">===</span> headB<span class="token punctuation">)</span> <span class="token keyword">return</span> headA <span class="token comment">// \u5982\u679C\u4E3A\u540C\u4E00\u6761\u94FE\u8868, \u5219\u7B2C\u4E00\u4E2A\u70B9\u662F\u76F8\u4EA4\u70B9</span>

    <span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> temp 
    temp <span class="token operator">=</span> headA
    <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">{</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
        temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    temp <span class="token operator">=</span> headB
    <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> temp
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">null</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53CD\u8F6C\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u53CD\u8F6C\u94FE\u8868" aria-hidden="true">#</a> \u53CD\u8F6C\u94FE\u8868</h2><blockquote><p>\u7ED9\u4F60\u5355\u94FE\u8868\u7684\u5934\u8282\u70B9 <code>head</code> \uFF0C\u8BF7\u4F60\u53CD\u8F6C\u94FE\u8868\uFF0C\u5E76\u8FD4\u56DE\u53CD\u8F6C\u540E\u7684\u94FE\u8868\u3002</p></blockquote><blockquote><p>\u8981\u6C42: \u4F7F\u7528 \u8FED\u4EE3\u6CD5\u548C \u9012\u5F52\u4E24\u79CD\u65B9\u6CD5\u5B9E\u73B0</p></blockquote><blockquote><p>\u601D\u8DEF: \u8FED\u4EE3\u6CD5\u5F88\u7B80\u5355, \u6808\u53EF\u4EE5\u7528\u4F5C\u9006\u5E8F\u7684\u8F93\u51FA. \u9012\u5F52\u7A0D\u5FAE\u590D\u6742\u70B9, \u4E3B\u8981\u5206\u6790\u597D\u9012\u5F52\u6700\u540E\u7684\u72B6\u6001, \u548C\u56DE\u5F52\u65F6\u5019\u9700\u8981\u7ED9\u4E0B\u4E00\u4E2A\u6808\u5E27\u4F20\u9012\u4EC0\u4E48\u6837\u7684\u6570\u636E\u5C31\u53EF\u4E86</p></blockquote><p><strong>\u8FED\u4EE3\u6CD5</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> newHead <span class="token operator">=</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span>
        temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> newHead<span class="token punctuation">.</span>next
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u9012\u5F52</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> <span class="token function-variable function">compositeLinkedList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>  
        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">const</span> preNode <span class="token operator">=</span> <span class="token function">compositeLinkedList</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
           preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode
           
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
          h <span class="token operator">=</span> newNode
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> newNode 
    <span class="token punctuation">}</span>
    <span class="token function">compositeLinkedList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>
    <span class="token keyword">return</span> h
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u56DE\u6587\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u56DE\u6587\u94FE\u8868" aria-hidden="true">#</a> \u56DE\u6587\u94FE\u8868</h2><blockquote><p>\u7ED9\u4F60\u4E00\u4E2A\u5355\u94FE\u8868\u7684\u5934\u8282\u70B9 <code>head</code> \uFF0C\u8BF7\u4F60\u5224\u65AD\u8BE5\u94FE\u8868\u662F\u5426\u4E3A\u56DE\u6587\u94FE\u8868\u3002\u5982\u679C\u662F\uFF0C\u8FD4\u56DE <code>true</code> \uFF1B\u5426\u5219\uFF0C\u8FD4\u56DE <code>false</code> \u3002</p></blockquote><blockquote><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Ahead = [1,2,2,1]
\u8F93\u51FA\uFF1Atrue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>\u601D\u8DEF:</p><p>\u6700\u7B80\u5355\u7684\u662F\u53CC\u6307\u9488: \u94FE\u8868 --&gt; \u6570\u7EC4 --&gt; \u5934\u5C3E\u540C\u65F6\u5411\u4E2D\u79FB\u52A8, \u8FB9\u79FB\u52A8\u8FB9\u6BD4\u8F83. \u53CC\u6307\u9488\u4E0D\u518D\u5199\u4E86, \u5199\u4E00\u4E0B\u9012\u5F52\u548C\u5FEB\u6162\u6307\u9488\u6CD5</p></blockquote><p><strong>\u9012\u5F52\u6CD5</strong></p><blockquote><p>\u9012\u5F52\u53EF\u4EE5\u62FF\u5230\u94FE\u8868\u6700\u540E\u4E00\u4E2A\u8282\u70B9\u5230\u7B2C\u4E00\u4E2A\u8282\u70B9\u7684\u6BCF\u4E2A\u987A\u5E8F, \u7136\u540E\u5916\u90E8\u53D8\u91CFhead\u53EF\u4EE5\u62FF\u5230\u4ECEhead\u5230\u6700\u540E\u7684\u6BCF\u4E2A\u8282\u70B9, \u5229\u7528\u8FD9\u4E2A\u7279\u6027\u8BBE\u8BA1\u51FA\u9012\u5F52\u51FD\u6570</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">head</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">{</span>

    <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span>ListNode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     <span class="token comment">// Save the result of the previous comparison. </span>
        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// Return true if both the previous comparison and the current comparison were successful. </span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">===</span> head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">false</span> 
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> head <span class="token operator">?</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u5FEB\u6162\u6307\u9488</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
  
  <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> node
  
  <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
  <span class="token punctuation">}</span>
  
  <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span>
  
  <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">!==</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
    node <span class="token operator">=</span> node<span class="token punctuation">.</span>next
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u603B\u7ED3:</p><p>\u4E3B\u8981\u603B\u7ED3\u5FEB\u6162\u6307\u9488\u7684\u4F5C\u7528</p><ol><li>\u53EF\u4EE5\u5BFB\u627E\u94FE\u8868\u4E2D\u7684\u7279\u5B9A\u8282\u70B9. \u6BD4\u5982\u4E2D\u70B9, 1/3\u7684\u70B9, 1/4\u7684\u70B9. \u5177\u4F53\u64CD\u4F5C\u5C31\u662F\u8BA9\u5FEB\u6307\u9488\u79FB\u52A8\u7684\u901F\u5EA6\u662F\u6162\u6307\u9488\u7684n\u500D, \u5FEB\u6307\u9488\u904D\u5386\u5B8C\u540E, \u6162\u6307\u9488\u5C31\u662F\u8981\u5BFB\u627E\u7684\u70B9</li><li>\u53EF\u4EE5\u5224\u65AD\u94FE\u8868\u7684\u5947\u5076. \u6307\u9488\u6B65\u957F\u4E3A2. \u82E5\u94FE\u8868\u8282\u70B9\u6570\u4E3A\u5076, \u5219\u6307\u9488\u904D\u5386\u5B8C\u540E\u4E3Anull. \u82E5\u94FE\u8868\u4E3A\u5947\u6570, \u5219\u6307\u9488\u904D\u5386\u5B8C\u540E\u4E3A\u8282\u70B9</li><li>\u5FEB\u6162\u6307\u9488\u7684\u5FAA\u73AF\u6761\u4EF6\u4E00\u822C\u4E3A while(fast &amp;&amp; fast.next) .\u6CA1\u6709\u8282\u70B9\u4E0D\u8D70, \u53EA\u6709\u4E00\u4E2A\u8282\u70B9\u4E5F\u4E0D\u8D70.</li></ol></blockquote><h2 id="\u79FB\u52A8\u96F6" tabindex="-1"><a class="header-anchor" href="#\u79FB\u52A8\u96F6" aria-hidden="true">#</a> \u79FB\u52A8\u96F6</h2><blockquote><p>\u7ED9\u5B9A\u4E00\u4E2A\u6570\u7EC4 <code>nums</code>\uFF0C\u7F16\u5199\u4E00\u4E2A\u51FD\u6570\u5C06\u6240\u6709 <code>0</code> \u79FB\u52A8\u5230\u6570\u7EC4\u7684\u672B\u5C3E\uFF0C\u540C\u65F6\u4FDD\u6301\u975E\u96F6\u5143\u7D20\u7684\u76F8\u5BF9\u987A\u5E8F\u3002</p><p><strong>\u8BF7\u6CE8\u610F</strong> \uFF0C\u5FC5\u987B\u5728\u4E0D\u590D\u5236\u6570\u7EC4\u7684\u60C5\u51B5\u4E0B\u539F\u5730\u5BF9\u6570\u7EC4\u8FDB\u884C\u64CD\u4F5C\u3002</p></blockquote><blockquote><p>\u601D\u8003:\u53EF\u4EE5\u501F\u7528\u5FEB\u6392\u7684\u5C0F\u4E8E\u7B49\u4E8E\u533A\u6CD5, \u8FD8\u53EF\u4EE5\u4F7F\u7528\u5192\u6CE1\u6392\u5E8F\u7684\u601D\u60F3</p></blockquote><p><strong>\u5C0F\u4E8E\u7B49\u4E8E\u533A\u53CC\u6307\u9488\u6CD5</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">moveZeroes</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// \u501F\u7528\u5FEB\u901F\u6392\u5E8F\u7684\u601D\u60F3</span>
   <span class="token comment">// \u5C06\u6570\u7EC4\u770B\u6210\u975E\u96F6\u533A\u548C\u96F6\u533A</span>
   <span class="token comment">// \u8BBE\u7F6E\u4E00\u4E2A\u6307\u9488, \u9ED8\u8BA4\u8D1F\u4E00, \u7528\u4E8E\u5212\u5B9A\u975E\u96F6\u533A, \u5982\u679C\u662F\u96F6, \u8DF3\u8FC7\u904D\u5386, \u5982\u679C\u975E\u96F6, \u653E\u5230\u975E\u96F6\u533A\u6700\u524D\u4E00\u4F4D, \u975E\u96F6\u533A+1</span>

   <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
   <span class="token keyword">let</span> temp
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>
        temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
        nums<span class="token punctuation">[</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp
        p<span class="token operator">++</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u5192\u6CE1\u6392\u5E8F\u6CD5</strong></p><blockquote><p>\u5C060\u89C6\u4E3A\u76EE\u6807\u5143\u7D20, \u5B9E\u73B0\u5192\u6CE1\u7684\u8FC7\u7A0B. \u6B64\u7B97\u6CD5\u4E0D\u6539\u53D8\u76F8\u5BF9\u4F4D\u7F6E</p><p>\u4E0D\u80FD\u4F7F\u7528\u9009\u62E9\u6392\u5E8F, \u56E0\u4E3A\u9009\u62E9\u6392\u5E8F\u662F\u4E0D\u7A33\u5B9A\u6392\u5E8F, \u5192\u6CE1\u6392\u5E8F\u662F\u7A33\u5B9A\u6392\u5E8F</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">\u5B9E\u73B0</span><span class="token operator">:</span> \u7565
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u6BD4\u7279\u4F4D\u8BA1\u6570" tabindex="-1"><a class="header-anchor" href="#\u6BD4\u7279\u4F4D\u8BA1\u6570" aria-hidden="true">#</a> \u6BD4\u7279\u4F4D\u8BA1\u6570</h2><blockquote><p>\u7ED9\u4F60\u4E00\u4E2A\u6574\u6570 <code>n</code> \uFF0C\u5BF9\u4E8E <code>0 &lt;= i &lt;= n</code> \u4E2D\u7684\u6BCF\u4E2A <code>i</code> \uFF0C\u8BA1\u7B97\u5176\u4E8C\u8FDB\u5236\u8868\u793A\u4E2D <strong>1 \u7684\u4E2A\u6570</strong> \uFF0C\u8FD4\u56DE\u4E00\u4E2A\u957F\u5EA6\u4E3A <code>n + 1</code> \u7684\u6570\u7EC4 <code>ans</code> \u4F5C\u4E3A\u7B54\u6848\u3002</p></blockquote><blockquote><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1An = 2
\u8F93\u51FA\uFF1A[0,1,1]
\u89E3\u91CA\uFF1A
0 --&gt; 0
1 --&gt; 1
2 --&gt; 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>\u601D\u8003: \u6211\u4F7F\u7528\u4E86\u5185\u7F6EApi: number.toString(2), \u8FD9\u4E00\u9898\u5B9E\u9645\u5728\u8003\u5BDF\u4F4D\u8FD0\u7B97, \u6240\u4EE5\u8FD9\u4E2A\u89E3\u4E0D\u7B97\u4F18\u89E3, \u5148\u653E\u4E00\u653E, \u4F4D\u8FD0\u7B97\u7684\u9898\u653E\u5230\u5237\u9898\u540E\u671F\u505A.</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">countBits</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> bChar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bChar<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>bChar<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                count<span class="token operator">++</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> ans
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u627E\u5230\u6240\u6709\u6570\u7EC4\u4E2D\u6D88\u5931\u7684\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#\u627E\u5230\u6240\u6709\u6570\u7EC4\u4E2D\u6D88\u5931\u7684\u6570\u5B57" aria-hidden="true">#</a> \u627E\u5230\u6240\u6709\u6570\u7EC4\u4E2D\u6D88\u5931\u7684\u6570\u5B57</h2><blockquote><p>\u7ED9\u4F60\u4E00\u4E2A\u542B <code>n</code> \u4E2A\u6574\u6570\u7684\u6570\u7EC4 <code>nums</code> \uFF0C\u5176\u4E2D <code>nums[i]</code> \u5728\u533A\u95F4 <code>[1, n]</code> \u5185\u3002\u8BF7\u4F60\u627E\u51FA\u6240\u6709\u5728 <code>[1, n]</code> \u8303\u56F4\u5185\u4F46\u6CA1\u6709\u51FA\u73B0\u5728 <code>nums</code> \u4E2D\u7684\u6570\u5B57\uFF0C\u5E76\u4EE5\u6570\u7EC4\u7684\u5F62\u5F0F\u8FD4\u56DE\u7ED3\u679C\u3002</p></blockquote><blockquote><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Anums = [4,3,2,7,8,2,3,1]
\u8F93\u51FA\uFF1A[5,6]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>\u65B9\u6CD5\u4E00: \u8BB0\u5F55\u6CD5</strong></p><blockquote><p>\u601D\u8DEF:</p><ol><li>\u7528\u4E00\u4E2A\u6570\u7EC4\u8BB0\u5F55[1,n]\u8303\u56F4\u5185, \u6BCF\u4E2A\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570. \u5176\u4E2D\u4E0B\u6807\u4EE3\u8868\u6570\u5B57, \u503C\u4EE3\u8868\u6B21\u6570</li><li>\u904D\u5386nums, \u7EDF\u8BA1\u51FA\u4E2A\u6570\u5B57\u51FA\u73B0\u6B21\u6570</li><li>\u904D\u5386\u8BB0\u5F55\u6570\u7EC4, \u5C06\u51FA\u73B0\u6B21\u6570\u4E3A0\u7684\u6570\u5B57\u6311\u51FA\u6765\u5230result\u7ED3\u679C\u6570\u7EC4</li></ol></blockquote><blockquote><p>\u7A7A\u95F4\u590D\u6742\u5EA6O(n) \u65F6\u95F4\u590D\u6742\u5EA6O(n)</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">findDisappearedNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">const</span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
           record<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> record<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u65B9\u6CD5\u4E8C: \u76F4\u63A5\u4FEE\u6539\u6CD5(leetcode\u5B98\u65B9\u9898\u89E3)</strong></p><blockquote><p>\u601D\u8DEF:</p><ol><li>\u64CD\u4F5C\u5EFA\u7ACB\u5728\u76F4\u63A5\u4FEE\u6539\u539F\u6570\u7EC4\u7684\u57FA\u7840\u4E0A</li><li>\u539F\u6570\u7EC4\u7684\u4E0B\u6807\u4EE3\u8868[1-n]\u7684\u6570\u5B57, \u503C\u5982\u679C\u662F &gt; n\u7684\u4EE3\u8868\u51FA\u73B0\u8FC7, &lt;n\u7684\u4EE3\u8868\u672A\u51FA\u73B0\u8FC7</li><li>\u904D\u5386\u539F\u6570\u7EC4, \u53D6\u51FA\u6570\u5B57, \u627E\u51FA\u5BF9\u5E94\u7684\u4E0B\u6807, \u5C06\u5BF9\u5E94\u4E0B\u6807\u7684\u6570\u5B57 + n .</li><li>\u904D\u5386\u539F\u6570\u7EC4, \u5982\u679C &gt; n\u5219\u51FA\u73B0\u8FC7, \u53CD\u4E4B\u672A\u51FA\u73B0\u8FC7, \u52A0\u5165result</li><li>\u6CE8\u610F: \u6BD4\u5982 [2,1] \u957F\u5EA6\u4E3A2\u7684\u6570\u7EC4, \u5F53\u904D\u5386\u5230 2 \u65F6\u5019, \u4F1A\u5C06\u4E0B\u6807\u4E3A1\u7684\u6570\u5B57 + 2, \u6570\u7EC4\u53D8\u4E3A[2,3], \u8FD9\u6837\u7EE7\u7EED\u904D\u5386\u5230 3\u65F6\u5019, \u6211\u4EEC\u672C\u6765\u60F3\u7684\u662F\u5C06\u4E0B\u6807\u4E3A0\u7684\u6570\u5B57+n, \u4F46\u662F\u73B0\u5728\u6570\u5B57\u662F3, \u62FF\u4E0D\u5230\u539F\u59CB\u4E0B\u6807, \u9700\u8981 % length \u624D\u884C</li></ol></blockquote><blockquote><p>\u65F6\u95F4\u590D\u6742\u5EA6(On), \u5728\u4E0D\u8003\u8651\u7ED3\u679C\u6570\u7EC4\u6240\u5360\u7684\u7A7A\u95F4result\u65F6, \u7A7A\u95F4\u590D\u6742\u5EA6\u4E3AO(1)</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">findDisappearedNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length
  <span class="token keyword">for</span><span class="token punctuation">(</span>num <span class="token keyword">of</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> idx <span class="token operator">=</span> num <span class="token operator">%</span> n <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment">// \u6570\u5B57-1, \u5373\u6570\u5B57\u5BF9\u5E94\u7684\u7D22\u5F15\u4F4D\u7F6E. \u53D6\u4F59\u662F\u56E0\u4E3A\u53EF\u80FD\u88AB+n\u8FC7, \u8FD8\u539F\u6811\u5B50</span>
    nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">+=</span> n
  <span class="token punctuation">}</span>
  
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span>num<span class="token punctuation">]</span> <span class="token keyword">of</span> nums<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u603B\u7ED3:</p><p>\u65B9\u6CD5\u4E00\u662F\u6211\u81EA\u5DF1\u5199\u7684, \u65B9\u6CD5\u4E8C\u662F\u5B98\u65B9\u9898\u89E3</p><p>\u6211\u81EA\u5DF1\u548C\u5B98\u65B9\u5DEE\u5728\u5728\u54EA\u5462? \u6709\u54EA\u4E9B\u662F\u597D\u7684, \u54EA\u4E9B\u662F\u9700\u8981\u7CBE\u8FDB\u7684?</p><p>\u597D\u7684\u5730\u65B9\u662F: \u548C\u5B98\u65B9\u90FD\u7528\u4E86\u6570\u7EC4\u8868\u793A\u8BB0\u5F55, \u6570\u7EC4\u4E0B\u6807\u8868\u793A\u6570\u5B57, \u503C\u8868\u793A\u51FA\u73B0\u7684\u72B6\u6001</p><p>\u7CBE\u8FDB\u7684\u5730\u65B9\u6BD4\u8F83\u591A:</p><ol><li>\u6CA1\u6709\u610F\u8BC6\u5230\u539F\u5730\u4FEE\u6539\u6570\u7EC4. \u5F53\u7136\u8FD9\u5728\u5F00\u53D1\u4E2D\u5E76\u4E0D\u4E00\u5B9A\u662F\u574F\u4E8B, \u53EA\u662F\u5BF9\u4E8E\u8FD9\u79CD\u8FFD\u6C42\u7A7A\u95F4\u7684\u7B97\u6CD5, \u8981\u6709\u8FD9\u4E2A\u610F\u8BC6</li><li>\u8868\u793A\u6570\u5B57\u51FA\u73B0\u7684\u72B6\u6001\u6211\u7528\u7684\u662F &quot;\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570&quot; \u5B98\u65B9\u7528\u7684\u662F &quot;\u5927\u4E8En\u7684\u8868\u793A\u672A\u51FA\u73B0\u8FC7, \u5C0F\u4E8En\u7684\u4EE3\u8868\u51FA\u73B0\u8FC7&quot;. \u6211\u7684\u60F3\u6CD5\u660E\u663E\u975E\u5E38\u7B26\u5408\u5E38\u8BC6, \u4F46\u5DE7\u5999\u6027\u4E0A\u8FDC\u4E0D\u5982\u5B98\u65B9</li><li>\u5BF9\u53D6\u4F59\u7684\u4F5C\u7528\u9700\u8981\u518D\u5DE9\u56FA\u4E00\u4E0B <ol><li>\u57FA\u6570\u6392\u5E8F\u4E2D\u7684\u53D6\u4F59\u64CD\u4F5C, \u53D6\u51FA\u4E00\u4E2A\u6570\u7684\u4E2A\u4F4D\u6570 number % 10</li><li>(A + B) % B = A</li><li>\u5F53A &lt;= B\u65F6, A % B = A</li></ol></li></ol></blockquote><h2 id="\u4E8C\u53C9\u6811\u7684\u76F4\u5F84" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811\u7684\u76F4\u5F84" aria-hidden="true">#</a> \u4E8C\u53C9\u6811\u7684\u76F4\u5F84</h2><blockquote><p>\u7ED9\u5B9A\u4E00\u68F5\u4E8C\u53C9\u6811\uFF0C\u4F60\u9700\u8981\u8BA1\u7B97\u5B83\u7684\u76F4\u5F84\u957F\u5EA6\u3002\u4E00\u68F5\u4E8C\u53C9\u6811\u7684\u76F4\u5F84\u957F\u5EA6\u662F\u4EFB\u610F\u4E24\u4E2A\u7ED3\u70B9\u8DEF\u5F84\u957F\u5EA6\u4E2D\u7684\u6700\u5927\u503C\u3002\u8FD9\u6761\u8DEF\u5F84\u53EF\u80FD\u7A7F\u8FC7\u4E5F\u53EF\u80FD\u4E0D\u7A7F\u8FC7\u6839\u7ED3\u70B9\u3002</p></blockquote><blockquote><p><strong>\u793A\u4F8B :</strong> \u7ED9\u5B9A\u4E8C\u53C9\u6811</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>          1
         / \\
        2   3
       / \\     
      4   5    

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD4\u56DE <strong>3</strong>, \u5B83\u7684\u957F\u5EA6\u662F\u8DEF\u5F84 [4,2,1,3] \u6216\u8005 [5,2,1,3]\u3002</p><p>**\u6CE8\u610F\uFF1A**\u4E24\u7ED3\u70B9\u4E4B\u95F4\u7684\u8DEF\u5F84\u957F\u5EA6\u662F\u4EE5\u5B83\u4EEC\u4E4B\u95F4\u8FB9\u7684\u6570\u76EE\u8868\u793A\u3002</p></blockquote><blockquote><p>\u601D\u8DEF:</p><p>/**</p><p>\u200B \u5047\u8BBE\u4EE5X\u8282\u70B9\u51FA\u53D1, \u53EF\u4EE5\u5411\u5DE6\u53F3\u5B50\u6811\u8981\u4FE1\u606F</p><p>\u200B \u5219\u9700\u8981:</p><p>\u200B 1. \u5982\u679C\u8DEF\u5F84\u7A7F\u8FC7X\u8282\u70B9</p><p>\u200B - \u5DE6\u5B50\u6811\u7684\u6DF1\u5EA6(</p><p>\u200B - \u53F3\u5B50\u6811\u7684\u6DF1\u5EA6</p><p>\u200B - \u76F4\u5F84 = \u5DE6\u5B50\u6811\u6DF1\u5EA6 + \u53F3\u5B50\u6811\u7684\u6DF1\u5EA6</p><p>\u200B 2. \u5982\u679C\u8DEF\u5F84\u4E0D\u7A7F\u8FC7X\u8282\u70B9</p><p>\u200B - \u5DE6\u5B50\u6811\u6700\u5927\u8FB9\u6570</p><p>\u200B - \u53F3\u5B50\u6811\u6700\u5927\u8FB9\u6570</p><p>\u200B - \u76F4\u5F84 = Max(\u5DE6\u8FB9\u6570,\u53F3\u8FB9\u6570)</p><p>\u200B \u76F4\u5F84 = max(\u7A7F\u8FC7\u53EF\u80FD\u6027\u7684\u76F4\u5F84, \u4E0D\u7A7F\u8FC7\u53EF\u80FD\u6027\u7684\u76F4\u5F84)</p><p>\u200B */</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">diameterOfBinaryTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">height</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token literal-property property">maxBridges</span><span class="token operator">:</span><span class="token number">0</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">const</span> leftInfo <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
        <span class="token keyword">const</span> rightInfo <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>

        <span class="token keyword">const</span> height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>height<span class="token punctuation">,</span> rightInfo<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">const</span> maxBridges <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>
            leftInfo<span class="token punctuation">.</span>height <span class="token operator">+</span> rightInfo<span class="token punctuation">.</span>height <span class="token punctuation">,</span> <span class="token comment">// \u7ECF\u8FC7X\u8282\u70B9\u7684\u6700\u5927\u8DEF\u5F84</span>
            Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>maxBridges<span class="token punctuation">,</span> rightInfo<span class="token punctuation">.</span>maxBridges<span class="token punctuation">)</span> <span class="token comment">// \u4E0D\u7ECF\u8FC7X\u8282\u70B9\u7684\u6700\u5927\u8DEF\u5F84</span>
        <span class="token punctuation">)</span>

        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            height<span class="token punctuation">,</span>
            maxBridges
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>maxBridges

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5408\u5E76\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#\u5408\u5E76\u4E8C\u53C9\u6811" aria-hidden="true">#</a> \u5408\u5E76\u4E8C\u53C9\u6811</h2><blockquote><p>\u7ED9\u4F60\u4E24\u68F5\u4E8C\u53C9\u6811\uFF1A <code>root1</code> \u548C <code>root2</code> \u3002</p><p>\u60F3\u8C61\u4E00\u4E0B\uFF0C\u5F53\u4F60\u5C06\u5176\u4E2D\u4E00\u68F5\u8986\u76D6\u5230\u53E6\u4E00\u68F5\u4E4B\u4E0A\u65F6\uFF0C\u4E24\u68F5\u6811\u4E0A\u7684\u4E00\u4E9B\u8282\u70B9\u5C06\u4F1A\u91CD\u53E0\uFF08\u800C\u53E6\u4E00\u4E9B\u4E0D\u4F1A\uFF09\u3002\u4F60\u9700\u8981\u5C06\u8FD9\u4E24\u68F5\u6811\u5408\u5E76\u6210\u4E00\u68F5\u65B0\u4E8C\u53C9\u6811\u3002\u5408\u5E76\u7684\u89C4\u5219\u662F\uFF1A\u5982\u679C\u4E24\u4E2A\u8282\u70B9\u91CD\u53E0\uFF0C\u90A3\u4E48\u5C06\u8FD9\u4E24\u4E2A\u8282\u70B9\u7684\u503C\u76F8\u52A0\u4F5C\u4E3A\u5408\u5E76\u540E\u8282\u70B9\u7684\u65B0\u503C\uFF1B\u5426\u5219\uFF0C<strong>\u4E0D\u4E3A</strong> null \u7684\u8282\u70B9\u5C06\u76F4\u63A5\u4F5C\u4E3A\u65B0\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u3002</p><p>\u8FD4\u56DE\u5408\u5E76\u540E\u7684\u4E8C\u53C9\u6811\u3002</p><p><strong>\u6CE8\u610F:</strong> \u5408\u5E76\u8FC7\u7A0B\u5FC5\u987B\u4ECE\u4E24\u4E2A\u6811\u7684\u6839\u8282\u70B9\u5F00\u59CB\u3002</p></blockquote><blockquote><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Aroot1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]
\u8F93\u51FA\uFF1A[3,4,5,5,4,null,7]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>\u793A\u4F8B 2\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Aroot1 = [1], root2 = [1,2]
\u8F93\u51FA\uFF1A[2,2]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>\u4FEE\u6539\u539F\u6811\u7684\u65B9\u6CD5</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">mergeTrees</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root1<span class="token punctuation">,</span> root2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root1<span class="token punctuation">,</span>root2<span class="token punctuation">,</span>parent<span class="token punctuation">,</span>isLeft</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root1<span class="token punctuation">)</span> <span class="token keyword">return</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root2 <span class="token punctuation">)</span><span class="token punctuation">{</span>
            isLeft <span class="token operator">?</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left <span class="token operator">=</span> root1<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>right <span class="token operator">=</span> root1<span class="token punctuation">)</span>
            <span class="token keyword">return</span> 
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root1 <span class="token operator">&amp;&amp;</span> root2<span class="token punctuation">)</span><span class="token punctuation">{</span>
            root2<span class="token punctuation">.</span>val <span class="token operator">+=</span> root1<span class="token punctuation">.</span>val
        <span class="token punctuation">}</span>

        <span class="token function">dfs</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root2<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root2<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root2<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root2<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root2<span class="token punctuation">)</span> <span class="token keyword">return</span> root1
     <span class="token function">dfs</span><span class="token punctuation">(</span>root1<span class="token punctuation">,</span>root2<span class="token punctuation">,</span>root2<span class="token punctuation">)</span>
    <span class="token keyword">return</span> root2
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u4E0D\u4FEE\u6539\u539F\u6811\u7684\u65B9\u6CD5</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">mergeTrees</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t1<span class="token punctuation">,</span> t2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> t2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> t1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> merged <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>val <span class="token operator">+</span> t2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    merged<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    merged<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> merged<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u56DE\u6EAF-\u5B50\u96C6" tabindex="-1"><a class="header-anchor" href="#\u56DE\u6EAF-\u5B50\u96C6" aria-hidden="true">#</a> \u56DE\u6EAF -- \u5B50\u96C6</h2><blockquote><p>\u7ED9\u4F60\u4E00\u4E2A\u6574\u6570\u6570\u7EC4 <code>nums</code> \uFF0C\u6570\u7EC4\u4E2D\u7684\u5143\u7D20 <strong>\u4E92\u4E0D\u76F8\u540C</strong> \u3002\u8FD4\u56DE\u8BE5\u6570\u7EC4\u6240\u6709\u53EF\u80FD\u7684\u5B50\u96C6\uFF08\u5E42\u96C6\uFF09\u3002</p><p>\u89E3\u96C6 <strong>\u4E0D\u80FD</strong> \u5305\u542B\u91CD\u590D\u7684\u5B50\u96C6\u3002\u4F60\u53EF\u4EE5\u6309 <strong>\u4EFB\u610F\u987A\u5E8F</strong> \u8FD4\u56DE\u89E3\u96C6\u3002</p></blockquote><blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Anums = [1,2,3]
\u8F93\u51FA\uFF1A[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>\u601D\u8003:</p><p>\u601D\u8DEF\u4E00: \u52A8\u6001\u89C4\u5212, \u9ED8\u8BA4\u7A7A\u96C6\u662F\u5B50\u96C6, \u4EFB\u4F55\u5143\u7D20\u548C\u7A7A\u96C6\u76F8\u4EA4, \u90FD\u662F\u672C\u8EAB</p><p>\u90A3\u4E48\u4ECE\u5934\u904D\u5386\u5230\u5C3E, \u6BCF\u62FF\u5230\u4E00\u4E2A\u6570\u5B57, \u548C\u4E4B\u524D\u6240\u6709\u7684\u96C6\u5408\u76F8\u4EA4\u5F97\u5230\u65B0\u7684\u5B50\u96C6</p></blockquote><blockquote><p>\u601D\u8DEF\u4E8C: \u56DE\u6EAF\u6CD5.</p><p>\u7B56\u7565\u662F : \u6BCF\u4E00\u4E2A\u6570\u5B57\u90FD\u53EF\u4EE5\u548C\u672A\u8BBF\u95EE\u8FC7\u7684\u6570\u5B57\u7EC4\u6210\u5B50\u96C6</p><p>\u90A3\u4E48\u4F7F\u7528\u56DE\u6EAF, \u4ECE\u7B2C\u4E00\u4E2A\u6570\u5B57\u89E6\u53D1, \u904D\u5386\u5269\u4F59\u6570\u5B57, \u8BB0\u5F55\u56DE\u6EAF\u7684\u8DEF\u7EBF, \u8DEF\u7EBF\u4E0A\u6CA1\u6BCF\u66F4\u65B0\u4E00\u4E2A\u8DEF\u5F84\u5C31\u66F4\u65B0\u4E0B\u7ED3\u679C\u96C6. \u5230\u6700\u540E\u4E00\u4E2A\u8282\u70B9\u5219\u53D6\u6D88\u8DEF\u5F84\u56DE\u6EAF</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">subsets</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
   <span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> track <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>track<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           track<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
           <span class="token function">backtrack</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> track<span class="token punctuation">)</span>
           track<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> res
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u56DE\u6EAF-\u5168\u6392\u5217" tabindex="-1"><a class="header-anchor" href="#\u56DE\u6EAF-\u5168\u6392\u5217" aria-hidden="true">#</a> \u56DE\u6EAF -- \u5168\u6392\u5217</h2><blockquote><p>\u7ED9\u5B9A\u4E00\u4E2A\u4E0D\u542B\u91CD\u590D\u6570\u5B57\u7684\u6570\u7EC4 <code>nums</code> \uFF0C\u8FD4\u56DE\u5176 <em>\u6240\u6709\u53EF\u80FD\u7684\u5168\u6392\u5217</em> \u3002\u4F60\u53EF\u4EE5 <strong>\u6309\u4EFB\u610F\u987A\u5E8F</strong> \u8FD4\u56DE\u7B54\u6848\u3002</p></blockquote><blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Anums = [1,2,3]
\u8F93\u51FA\uFF1A[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Anums = [0,1]
\u8F93\u51FA\uFF1A[[0,1],[1,0]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>\u601D\u8DEF:</p><p>\u4E00\u5F00\u59CB\u6211\u7684\u601D\u8DEF\u662F\u9519\u7684. \u4F46\u662F\u4E5F\u6BD4\u8F83\u6709\u610F\u601D, \u6240\u4EE5\u8BB0\u5F55\u4E00\u4E0B</p><p>\u6211\u5C06\u6570\u7EC4[1,2,3]\u60F3\u8C61\u6210\u73AF, 1\u7684\u5168\u6392\u5217\u4E3A\u4ECE1\u5F00\u59CB, \u5411\u53F3\u8DD1\u52301\u7684\u6240\u6709\u6570\u7EC4\u7684\u96C6\u5408\u4EE5\u53CA\u5411\u5DE6\u8DD1\u52301\u6240\u6709\u6570\u7EC4\u7684\u96C6\u5408</p><p>\u4F46\u662F\u8FD9\u79CD\u601D\u8DEF\u503C\u901A\u8FC7\u4E86[1,2,3]\u4E00\u4E2A\u6D4B\u8BD5\u7528\u4F8B.</p><p>\u6839\u672C\u539F\u56E0\u662F, \u5BF9\u9898\u610F\u7684\u7406\u89E3\u4E0D\u5230\u4F4D. \u5047\u5982[1,2,3,4]\u4E3A\u6D4B\u8BD5\u7528\u4F8B. \u90A3\u4E48\u6839\u636E\u6211\u7684\u601D\u8DEF\u5F97\u51FA\u7684\u7ED3\u679C\u4E3A</p><p>\u4ECE 1 --&gt; \u5411\u53F3\u8DD1\u56DE1\u7684\u7EC4\u5408\u548C\u4ECE 1\u5411\u5DE6\u8DD1\u56DE1\u7684\u7EC4\u5408 \u5373 [1,2,3,4] \u548C [1,4,3,2]\u5F88\u660E\u663E\u7F3A\u5C11\u4E86\u5F88\u591A\u6BD4\u5982[1,3,2,4], [1,4,2,3], \u6240\u4EE5\u8FD9\u79CD\u65B9\u6CD5\u662F\u4E0D\u5BF9\u7684..</p></blockquote><blockquote><p>\u4E0B\u9762\u662F\u9519\u8BEF\u7684\u4EE3\u7801</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">permute</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span>nums<span class="token punctuation">]</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> num<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>temp
    
    <span class="token keyword">const</span> <span class="token function-variable function">getLeft</span> <span class="token operator">=</span> <span class="token parameter">l</span> <span class="token operator">=&gt;</span> l <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> l <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">const</span> <span class="token function-variable function">getRight</span> <span class="token operator">=</span> <span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> nums<span class="token punctuation">.</span>length

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        left <span class="token operator">=</span> <span class="token function">getLeft</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">// \u5982\u679C\u8D8A\u5DE6\u8FB9\u754C, \u4ECE\u6700\u53F3\u8FB9\u5F00\u59CB</span>
        right <span class="token operator">=</span> <span class="token function">getRight</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// \u5982\u679C\u8D8A\u53F3\u8FB9\u754C, \u4ECE0\u5F00\u59CB</span>
        
        temp <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!==</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
            temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
            right <span class="token operator">=</span> <span class="token function">getRight</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>

        temp <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!==</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
            temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
            left <span class="token operator">=</span> <span class="token function">getLeft</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>

       
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u6B63\u786E\u7684\u601D\u8DEF:</p><p>\u6392\u5217\u7EC4\u5408\u7684\u95EE\u9898\u5F80\u5F80\u662F\u66B4\u529B\u679A\u4E3E, \u53EF\u4EE5\u4F7F\u7528\u56DE\u6EAF\u6CD5</p><ol><li>\u9996\u5148\u5212\u51FA\u591A\u53C9\u6811, \u4EE5[1,2,3]\u4E3A\u4F8B, \u53EF\u4EE5\u753B\u51FA\u4E00\u4E2A\u65E0\u9650\u6DF1\u5EA6\u7684\u4E09\u53C9\u6811</li><li>\u601D\u8003\u4E09\u53C9\u6811\u7684\u6DF1\u5EA6. \u6BCF\u4E00\u5C42\u4EE3\u8868\u4E00\u6B21\u63A2\u7D22, \u5373\u5168\u6392\u5217\u4E00\u4E2A\u89E3\u7684\u4E00\u4E2A\u6570\u5B57. \u6700\u6DF1\u5E94\u8BE5\u4E3Anums.length</li><li>\u601D\u8003\u526A\u679D\u7684\u7B56\u7565: \u6BCF\u4E00\u5C42\u4E0D\u80FD\u51FA\u73B0\u63A2\u7D22\u8FC7\u7684\u8E2A\u8FF9</li><li>\u601D\u8003\u9012\u5F52\u51FA\u53E3, \u8FB9\u7F18case. \u6BCF\u6B21\u6DFB\u52A0\u4E00\u4E2A\u6570\u5B57, \u63A2\u7D22\u5230\u8DDF\u6570\u7EC4\u957F\u5EA6\u76F8\u540C\u7684\u65F6\u5019, \u6B64\u65F6track\u6570\u7EC4\u4E2D\u521A\u597Dnums.length\u4E2A\u5143\u7D20, \u6B64\u65F6\u505A\u6DFB\u52A0\u64CD\u4F5C</li><li>\u5957\u7528\u56DE\u6EAF\u6A21\u677F</li></ol></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">permute</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">track <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> track<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">return</span> ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>track<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>track<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>

            track<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token function">backtrack</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span>
            track<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> ret 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u56DE\u6EAF-\u62EC\u53F7\u751F\u6210" tabindex="-1"><a class="header-anchor" href="#\u56DE\u6EAF-\u62EC\u53F7\u751F\u6210" aria-hidden="true">#</a> \u56DE\u6EAF -- \u62EC\u53F7\u751F\u6210</h2><blockquote><p>\u6570\u5B57 <code>n</code> \u4EE3\u8868\u751F\u6210\u62EC\u53F7\u7684\u5BF9\u6570\uFF0C\u8BF7\u4F60\u8BBE\u8BA1\u4E00\u4E2A\u51FD\u6570\uFF0C\u7528\u4E8E\u80FD\u591F\u751F\u6210\u6240\u6709\u53EF\u80FD\u7684\u5E76\u4E14 **\u6709\u6548\u7684 **\u62EC\u53F7\u7EC4\u5408\u3002</p></blockquote><blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1An = 3
\u8F93\u51FA\uFF1A[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1An = 1
\u8F93\u51FA\uFF1A[&quot;()&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>\u601D\u8DEF:</p><ol><li>\u5148\u753B\u56FE. \u6BCF\u6B21\u6709( )\u4E24\u79CD\u9009\u62E9, \u8BBE\u6BCF\u5C42\u9009\u62E9\u4E00\u4E2A\u62EC\u53F7, \u5219\u53EF\u4EE5\u753B\u51FA\u4E00\u4E2A\u65E0\u9650\u6DF1\u5EA6\u7684\u6EE1\u4E8C\u53C9\u6811</li><li>\u5B9A\u6DF1\u5EA6. n\u662F\u62EC\u53F7\u7684\u5BF9\u6570, \u5047\u5982\u4E00\u5C42\u9009\u62E9\u4E00\u4E2A\u62EC\u53F7, \u5219\u53EF\u4EE5\u753B\u51FA\u4E00\u68F5\u6DF1\u5EA6\u4E3A2n\u7684\u6EE1\u4E8C\u53C9\u6811</li><li>\u526A\u679D. <ul><li>\u7B2C\u4E00\u6B21\u526A\u679D : \u53EF\u4EE5\u53D1\u73B0 \u5F53\u4EE5 &quot;)&quot;\u5F00\u59CB\u65F6\u5019, \u6240\u6709\u7684\u62EC\u53F7\u90FD\u4E0D\u7B26\u5408\u89C4\u5219. \u6240\u4EE5\u5F53\u7B2C\u4E00\u5C42\u65F6\u5019, \u4E0D\u7528\u9012\u5F52 )\u7684\u60C5\u51B5</li><li>\u7B2C\u4E8C\u6B21\u526A\u679D: \u53EF\u4EE5\u8BB0\u5F55\u5DE6\u53F3\u62EC\u53F7\u7684\u6570\u91CF. \u5982\u679C\u6570\u91CF\u8D85\u8FC7n, \u5219\u8BC1\u660E\u4E00\u5B9A\u4E0D\u662F\u6709\u6548\u7684\u62EC\u53F7, \u5219\u4E0D\u7528\u9012\u5F52</li><li>\u7B2C\u4E09\u6B21\u526A\u679D: \u5F53\u9012\u5F52\u7684\u8FC7\u7A0B\u4E2D, \u53F3\u62EC\u53F7\u7684\u4E2A\u6570\u5927\u4E8E\u5DE6\u62EC\u53F7\u7684\u4E2A\u6570\u65F6\u5019, \u5219\u8BC1\u660E\u4E00\u5B9A\u4E0D\u662F\u6709\u6548\u7684\u62EC\u53F7.,\u4E0D\u7528\u7EE7\u7EED\u9012\u5F52</li><li>\u6211\u7684\u4EE3\u7801, \u53EA\u526A\u679D\u5230\u7B2C\u4E8C\u6B21. \u526A\u679D\u4F9D\u9760\u7ECF\u9A8C\u548C\u673A\u7075,\u505A\u9898\u7684\u65F6\u5019, \u4E0D\u4E00\u5B9A\u4E00\u4E0B\u5B50\u526A\u679D\u5230\u6700\u4F18\u89E3, \u60F3\u5230\u54EA\u51CF\u5230\u54EA, \u591A\u79EF\u7D2F\u7ECF\u9A8C</li></ul></li><li>\u601D\u8003\u8FB9\u7F18case, \u9012\u5F52\u51FA\u53E3</li></ol></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">generateParenthesis</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">const</span> backtrack <span class="token operator">=</span> <span class="token punctuation">(</span>leftCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>rightCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>track <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>leftCount <span class="token operator">===</span> rightCount <span class="token operator">&amp;&amp;</span> rightCount <span class="token operator">===</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
              ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span><span class="token punctuation">(</span>leftCount <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">backtrack</span><span class="token punctuation">(</span>leftCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rightCount<span class="token punctuation">,</span> track <span class="token operator">+=</span> <span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span>
          track <span class="token operator">=</span> track<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> track<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>rightCount <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> leftCount <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token function">backtrack</span><span class="token punctuation">(</span>leftCount<span class="token punctuation">,</span> rightCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> track <span class="token operator">+=</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span>
           track <span class="token operator">=</span> track<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> track<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">parentheses</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>parenthesis<span class="token punctuation">;</span> parenthesis <span class="token operator">=</span> parentheses<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>parenthesis <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>parenthesis<span class="token punctuation">)</span>
                <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u5982\u679C\u904D\u5386\u7684\u4E3A\u53F3\u62EC\u53F7, \u6808\u91CC\u7684\u4E0D\u662F\u5DE6\u62EC\u53F7, \u5219\u4E0D\u662F\u6709\u6548\u7684\u62EC\u53F7</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> ret
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5206\u6CBB-\u4ECE\u524D\u5E8F\u4E0E\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#\u5206\u6CBB-\u4ECE\u524D\u5E8F\u4E0E\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811" aria-hidden="true">#</a> \u5206\u6CBB -- \u4ECE\u524D\u5E8F\u4E0E\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811</h2><blockquote><p>\u7ED9\u5B9A\u4E24\u4E2A\u6574\u6570\u6570\u7EC4 <code>preorder</code> \u548C <code>inorder</code> \uFF0C\u5176\u4E2D <code>preorder</code> \u662F\u4E8C\u53C9\u6811\u7684<strong>\u5148\u5E8F\u904D\u5386</strong>\uFF0C <code>inorder</code> \u662F\u540C\u4E00\u68F5\u6811\u7684<strong>\u4E2D\u5E8F\u904D\u5386</strong>\uFF0C\u8BF7\u6784\u9020\u4E8C\u53C9\u6811\u5E76\u8FD4\u56DE\u5176\u6839\u8282\u70B9\u3002</p></blockquote><blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
\u8F93\u51FA: [3,9,20,null,null,15,7]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>\u7248\u672C\u4E00</strong></p><blockquote><p>\u601D\u8DEF:</p><p>\u6784\u5EFA\u4E8C\u53C9\u6811\u7684\u8FC7\u7A0B\u5206\u4E3A\u4E09\u6B65:</p><ol><li>\u6784\u5EFA\u6839\u8282\u70B9</li><li>\u6784\u5EFA\u5DE6\u5B50\u6811</li><li>\u6784\u5EFA\u53F3\u5B50\u6811</li></ol><p>\u800C\u6784\u5EFA\u5DE6/\u53F3\u5B50\u6811\u7684\u8FC7\u7A0B\u4E5F\u662F\u5982\u4E0A\u4E09\u6B65, \u5373\u660E\u663E\u4E3A\u9012\u5F52.</p><p>\u5173\u952E\u601D\u8DEF: \u4ECEpreorder\u4E2D\u62FF\u5230\u6811\u7684\u6839\u8282\u70B9, \u518D\u53BBinorder\u4E2D\u62FF\u5230\u6811\u7684\u5DE6\u5B50\u6811\u7684\u4FE1\u606F. \u6839\u636E\u5DE6\u5B50\u6811\u7684\u4FE1\u606F\u53EF\u4EE5\u63A8\u65AD\u51FA\u53F3\u5B50\u6811\u7684\u4FE1\u606F</p><p>\u4E5F\u53EF\u4EE5\u4ECEpreorder\u4E2D\u62FF\u5230\u6811\u7684\u7684\u6839\u8282\u70B9, \u518D\u53BBinorder\u4E2D\u62FF\u5230\u6811\u7684\u53F3\u5B50\u6811\u7684\u4FE1\u606F, \u6839\u636E\u53F3\u5B50\u6811\u53EF\u4EE5\u63A8\u65AD\u51FA\u5DE6\u5B50\u6811\u7684\u4FE1\u606F</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> inorder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>preorder<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> inorder<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
     <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
     <span class="token keyword">const</span> inRootIdx <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
     parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> inRootIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> inRootIdx<span class="token punctuation">)</span><span class="token punctuation">)</span>
     parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>inRootIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span>inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>inRootIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token keyword">return</span> parent
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u7248\u672C\u4E8C: \u4F18\u5316\u6570\u7EC4</strong></p><blockquote><p>\u4E0A\u9762\u4EE3\u7801\u4E2D</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> inRootIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> inRootIdx<span class="token punctuation">)</span><span class="token punctuation">)</span>
 parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>inRootIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span>inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>inRootIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u751F\u6210\u4E86\u5DE6\u5B50\u6811\u7684\u524D\u4E2D\u5E8F\u6570\u7EC4, \u548C\u53F3\u5B50\u6811\u7684\u524D\u4E2D\u5E8F\u6570\u7EC4. \u6BCF\u6B21\u9012\u5F52\u90FD\u4F1A\u521B\u5EFA\u56DB\u4E2A\u6570\u7EC4. \u5176\u5B9E\u5E76\u4E0D\u5FC5\u8981</p><p>\u5BF9\u4E8E\u5DE6\u53F3\u5B50\u6811\u7684\u524D\u4E2D\u5E8F\u6570\u7EC4, \u90FD\u662F\u539F\u6811\u524D\u4E2D\u5E8F\u6570\u7EC4\u7684\u5B50\u96C6. \u53EA\u9700\u8981\u5206\u522B\u7528\u4E24\u5BF9\u6307\u9488\u5212\u5B9A\u5DE6\u53F3\u5B50\u6811\u7684\u8303\u56F4\u5373\u53EF, \u4E0D\u7528\u521B\u5EFA\u65B0\u6570\u7EC4</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> inorder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
        <span class="token parameter">preLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> preRight <span class="token operator">=</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        inLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> inRight <span class="token operator">=</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span>
    <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u7528\u4E24\u5BF9\u6307\u9488\u8868\u793A\u524D\u5E8F, \u4E2D\u5E8F\u6570\u7EC4\u7684\u8303\u56F4</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>preLeft <span class="token operator">&gt;</span> preRight <span class="token operator">||</span> inLeft <span class="token operator">&gt;</span> inRight<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> parentVal <span class="token operator">=</span> preorder<span class="token punctuation">[</span>preLeft<span class="token punctuation">]</span>
        <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>parentVal<span class="token punctuation">)</span>
        <span class="token keyword">const</span> inRootIdx <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>parentVal<span class="token punctuation">)</span> <span class="token comment">// \u4E2D\u5E8F\u904D\u5386\u65F6\u5019, \u6839\u8282\u70B9\u7684\u7D22\u5F15\u503C</span>
        <span class="token keyword">const</span> preLeftTreePivot <span class="token operator">=</span> inRootIdx <span class="token operator">-</span> inLeft <span class="token operator">+</span> preLeft   <span class="token comment">// \u524D\u5E8F\u904D\u5386\u65F6\u5019, \u5DE6\u5B50\u6811\u7684\u53F3\u8FB9\u754C\u7684\u7D22\u5F15\u503C</span>
        parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>preLeft <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preLeftTreePivot <span class="token punctuation">,</span> inLeft<span class="token punctuation">,</span> inRootIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>preLeftTreePivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preRight<span class="token punctuation">,</span> inRootIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inRight<span class="token punctuation">)</span>

        <span class="token keyword">return</span> parent
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u7248\u672C\u4E09: \u4F18\u5316\u67E5\u8BE2</strong></p><blockquote><p>const inRootIdx = inorder.indexOf(parentVal)</p><p>\u6BCF\u4E00\u6B21\u9012\u5F52\u7684\u65F6\u5019\u90FD\u8981\u7EBF\u6027\u7684\u627E\u7236\u8282\u70B9, O(n)\u7684\u67E5\u8BE2\u6548\u7387.</p><p>\u90A3\u4E48\u53EF\u4EE5\u5728\u4E00\u5F00\u59CB\u7684\u65F6\u5019, \u5C06\u6240\u6709\u7684\u503C--&gt; \u7D22\u5F15\u7684\u5173\u7CFB\u5B58\u5728Hash\u8868\u4E2D, \u67E5\u8BE2\u6548\u7387\u53D8\u6210O(1)</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>ar <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> inorder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    inorder<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// \u8FD9\u90E8\u80FD\u5B9E\u884C\u4F9D\u9760\u4E8E\u9898\u89E3\u58F0\u660E, value\u4E0D\u91CD\u590D</span>

    <span class="token keyword">const</span> <span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
        <span class="token parameter">preLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> preRight <span class="token operator">=</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        inLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> inRight <span class="token operator">=</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span>
    <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>preLeft <span class="token operator">&gt;</span> preRight <span class="token operator">||</span> inLeft <span class="token operator">&gt;</span> inRight<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> parentVal <span class="token operator">=</span> preorder<span class="token punctuation">[</span>preLeft<span class="token punctuation">]</span>
        <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>parentVal<span class="token punctuation">)</span>
        <span class="token keyword">const</span> inRootIdx <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parentVal<span class="token punctuation">)</span> <span class="token comment">// \u5C0F\u6539\u52A8\u5927\u8FDB\u6B65...</span>
        <span class="token keyword">const</span> preLeftTreePivot <span class="token operator">=</span> inRootIdx <span class="token operator">-</span> inLeft <span class="token operator">+</span> preLeft  
        parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>preLeft <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preLeftTreePivot <span class="token punctuation">,</span> inLeft<span class="token punctuation">,</span> inRootIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>preLeftTreePivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preRight<span class="token punctuation">,</span> inRootIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inRight<span class="token punctuation">)</span>

        <span class="token keyword">return</span> parent
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5206\u6CBB-\u4ECE\u540E\u5E8F\u4E0E\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#\u5206\u6CBB-\u4ECE\u540E\u5E8F\u4E0E\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811" aria-hidden="true">#</a> \u5206\u6CBB -- \u4ECE\u540E\u5E8F\u4E0E\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811</h2><blockquote><p>\u4E0E\u4E0A\u9053\u9898\u4E0D\u80FD\u8BF4\u5B8C\u5168\u4E00\u81F4, \u53EA\u80FD\u8BF4\u4E00\u6A21\u4E00\u6837.</p><p>\u4F5C\u4E3A\u7EC3\u4E60\u8D34\u4E00\u4E0B\u89E3\u7B54</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">inorder<span class="token punctuation">,</span> postorder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    inorder<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> <span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
        <span class="token parameter">pLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pRight <span class="token operator">=</span> postorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        iLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>iRight <span class="token operator">=</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span>
    <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pLeft <span class="token operator">&gt;</span> pRight <span class="token operator">||</span> iLeft <span class="token operator">&gt;</span> iRight<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">const</span> rootVal <span class="token operator">=</span> postorder<span class="token punctuation">[</span>pRight<span class="token punctuation">]</span>
        <span class="token keyword">const</span> inRootPivot <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span>

        <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span>
        parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>pLeft<span class="token punctuation">,</span> pRight <span class="token operator">-</span> iRight <span class="token operator">+</span> inRootPivot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> iLeft<span class="token punctuation">,</span> inRootPivot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>pRight <span class="token operator">-</span> iRight <span class="token operator">+</span> inRootPivot<span class="token punctuation">,</span> pRight <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> inRootPivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>iRight<span class="token punctuation">)</span>
        <span class="token keyword">return</span> parent
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5206\u6CBB-\u6570\u7EC4\u4E2D\u7684\u7B2Ck\u4E2A\u6700\u5927\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#\u5206\u6CBB-\u6570\u7EC4\u4E2D\u7684\u7B2Ck\u4E2A\u6700\u5927\u5143\u7D20" aria-hidden="true">#</a> \u5206\u6CBB -- \u6570\u7EC4\u4E2D\u7684\u7B2CK\u4E2A\u6700\u5927\u5143\u7D20</h2><blockquote><p>\u7ED9\u5B9A\u6574\u6570\u6570\u7EC4 <code>nums</code> \u548C\u6574\u6570 <code>k</code>\uFF0C\u8BF7\u8FD4\u56DE\u6570\u7EC4\u4E2D\u7B2C <code>**k**</code> \u4E2A\u6700\u5927\u7684\u5143\u7D20\u3002</p><p>\u8BF7\u6CE8\u610F\uFF0C\u4F60\u9700\u8981\u627E\u7684\u662F\u6570\u7EC4\u6392\u5E8F\u540E\u7684\u7B2C <code>k</code> \u4E2A\u6700\u5927\u7684\u5143\u7D20\uFF0C\u800C\u4E0D\u662F\u7B2C <code>k</code> \u4E2A\u4E0D\u540C\u7684\u5143\u7D20\u3002</p><p>\u4F60\u5FC5\u987B\u8BBE\u8BA1\u5E76\u5B9E\u73B0\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A <code>O(n)</code> \u7684\u7B97\u6CD5\u89E3\u51B3\u6B64\u95EE\u9898\u3002</p></blockquote><blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165: [3,2,1,5,6,4], k = 2
\u8F93\u51FA: 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165: [3,2,3,1,2,4,5,5,6], k = 4
\u8F93\u51FA: 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>\u601D\u8DEF: \u9898\u76EE\u5C31\u662F\u60F3\u8BA9\u5B9E\u73B0\u4E0B\u5FEB\u6392</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">findKthLargest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">patition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&gt;</span> left<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&gt;</span> left <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span><span class="token punctuation">{</span>
                right<span class="token operator">--</span>
            <span class="token punctuation">}</span>
            nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
            
            <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&gt;</span> left <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;</span> pivot<span class="token punctuation">)</span><span class="token punctuation">{</span>
                left<span class="token operator">++</span>
            <span class="token punctuation">}</span>
            nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> pivot
        <span class="token keyword">return</span> left 
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token function-variable function">quickSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> 
        <span class="token keyword">const</span> mid <span class="token operator">=</span> <span class="token function">patition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">findKthLargest</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u8D2A\u5FC3-\u76DB\u6700\u591A\u6C34\u7684\u5BB9\u5668" tabindex="-1"><a class="header-anchor" href="#\u8D2A\u5FC3-\u76DB\u6700\u591A\u6C34\u7684\u5BB9\u5668" aria-hidden="true">#</a> \u8D2A\u5FC3 -- \u76DB\u6700\u591A\u6C34\u7684\u5BB9\u5668</h2><blockquote><p>\u7ED9\u5B9A\u4E00\u4E2A\u957F\u5EA6\u4E3A <code>n</code> \u7684\u6574\u6570\u6570\u7EC4 <code>height</code> \u3002\u6709 <code>n</code> \u6761\u5782\u7EBF\uFF0C\u7B2C <code>i</code> \u6761\u7EBF\u7684\u4E24\u4E2A\u7AEF\u70B9\u662F <code>(i, 0)</code> \u548C <code>(i, height[i])</code> \u3002</p><p>\u627E\u51FA\u5176\u4E2D\u7684\u4E24\u6761\u7EBF\uFF0C\u4F7F\u5F97\u5B83\u4EEC\u4E0E <code>x</code> \u8F74\u5171\u540C\u6784\u6210\u7684\u5BB9\u5668\u53EF\u4EE5\u5BB9\u7EB3\u6700\u591A\u7684\u6C34\u3002</p><p>\u8FD4\u56DE\u5BB9\u5668\u53EF\u4EE5\u50A8\u5B58\u7684\u6700\u5927\u6C34\u91CF\u3002</p><p>**\u8BF4\u660E\uFF1A**\u4F60\u4E0D\u80FD\u503E\u659C\u5BB9\u5668\u3002</p></blockquote><p><strong>\u66B4\u529B\u89E3\u6CD5</strong></p><blockquote><p>\u7B2C\u4E00\u91CD\u5FAA\u73AF\u679A\u4E3E\u5DE6\u8FB9\u7684\u7EBF, \u7B2C\u4E8C\u91CD\u5FAA\u73AF\u679A\u4E3E\u53F3\u8FB9\u7684\u7EBF. \u8FD9\u6837\u5C31\u80FD\u62FF\u5230\u6BCF\u79CD\u7EC4\u5408\u7684\u9762\u79EF, \u6BCF\u6B21\u5C1D\u8BD5\u66F4\u65B0max\u9762\u79EF</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">maxArea</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">getWater</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x1<span class="token punctuation">,</span>x2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x2 <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> x <span class="token operator">=</span> height<span class="token punctuation">.</span>length
    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span> 
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> x<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span><span class="token function">getWater</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u8D2A\u5FC3\u7B97\u6CD5 + \u53CC\u6307\u9488</strong></p><blockquote><p>\u7531\u9898\u610F\u53EF\u5F97 $ S(left,right) = (right - left) * Min(h[right], h[left]) $</p><p>\u5047\u8BBE, left\u521D\u59CB\u503C\u8BBE\u7F6E\u4E3A0, right\u521D\u59CB\u503C\u8BBE\u4E3A n - 1</p><p>\u5219\u65E0\u8BBA\u600E\u4E48\u79FB\u52A8 right - left\u90FD\u5728\u53D8\u5C0F, \u5373 S(left, right)\u5728\u53D8\u5C0F</p><p>\u5047\u8BBE 1. \u79FB\u52A8\u77ED\u7684\u8FB9, \u5219\u539F\u672C\u7684\u77ED\u8FB9\u53EF\u80FD\u53D8\u6210\u957F\u8FB9, Min(h[right], h[left]), \u662F\u6709\u53EF\u80FD\u53D8\u5927\u7684\u4E5F\u5C31\u662F\u8BF4S(left,right)\u53EF\u80FD\u53D8\u5927</p><p>\u5047\u8BBE 2. \u79FB\u52A8\u957F\u7684\u8FB9, \u5219 Min(h[right], h[left]) \u4E00\u5B9A\u53D8\u5C0F\u6216\u8005\u4E0D\u53D8, \u4E5F\u5C31\u662F\u6240S(left,right)\u53EF\u80FD\u4E0D\u53D8\u6216\u8005\u53D8\u5C0F</p><p>\u7EFC\u4E0A</p><p>\u7B56\u7565\u5373\u4E3A, \u4F7F\u7528\u53CC\u6307\u9488\u5206\u522B\u6307\u9488\u6307\u5411\u5934\u5C3E, \u6B64\u65F6\u5BBD\u5EA6\u6700\u5927. \u7136\u540E\u5206\u522B\u79FB\u52A8\u5DE6\u53F3\u6307\u9488\u4E2D\u77ED\u7684\u90A3\u8DDF, \u671F\u8BB8\u6BCF\u4E00\u6B65\u7684\u79FB\u52A8\u4F7FS(left,right)\u53EF\u80FD\u53D8\u5927</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">maxArea</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">getWater</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span>right</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token punctuation">,</span> right <span class="token operator">=</span> height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
      <span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> <span class="token function">getWater</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            left<span class="token operator">++</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            right<span class="token operator">--</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> max
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u8D2A\u5FC3-\u8DF3\u8DC3\u6E38\u620F" tabindex="-1"><a class="header-anchor" href="#\u8D2A\u5FC3-\u8DF3\u8DC3\u6E38\u620F" aria-hidden="true">#</a> \u8D2A\u5FC3 -- \u8DF3\u8DC3\u6E38\u620F</h2><blockquote><p>\u7ED9\u5B9A\u4E00\u4E2A\u975E\u8D1F\u6574\u6570\u6570\u7EC4 <code>nums</code> \uFF0C\u4F60\u6700\u521D\u4F4D\u4E8E\u6570\u7EC4\u7684 <strong>\u7B2C\u4E00\u4E2A\u4E0B\u6807</strong> \u3002</p><p>\u6570\u7EC4\u4E2D\u7684\u6BCF\u4E2A\u5143\u7D20\u4EE3\u8868\u4F60\u5728\u8BE5\u4F4D\u7F6E\u53EF\u4EE5\u8DF3\u8DC3\u7684\u6700\u5927\u957F\u5EA6\u3002</p><p>\u5224\u65AD\u4F60\u662F\u5426\u80FD\u591F\u5230\u8FBE\u6700\u540E\u4E00\u4E2A\u4E0B\u6807\u3002</p></blockquote><blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Anums = [2,3,1,1,4]
\u8F93\u51FA\uFF1Atrue
\u89E3\u91CA\uFF1A\u53EF\u4EE5\u5148\u8DF3 1 \u6B65\uFF0C\u4ECE\u4E0B\u6807 0 \u5230\u8FBE\u4E0B\u6807 1, \u7136\u540E\u518D\u4ECE\u4E0B\u6807 1 \u8DF3 3 \u6B65\u5230\u8FBE\u6700\u540E\u4E00\u4E2A\u4E0B\u6807\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Anums = [3,2,1,0,4]
\u8F93\u51FA\uFF1Afalse
\u89E3\u91CA\uFF1A\u65E0\u8BBA\u600E\u6837\uFF0C\u603B\u4F1A\u5230\u8FBE\u4E0B\u6807\u4E3A 3 \u7684\u4F4D\u7F6E\u3002\u4F46\u8BE5\u4E0B\u6807\u7684\u6700\u5927\u8DF3\u8DC3\u957F\u5EA6\u662F 0 \uFF0C \u6240\u4EE5\u6C38\u8FDC\u4E0D\u53EF\u80FD\u5230\u8FBE\u6700\u540E\u4E00\u4E2A\u4E0B\u6807\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>\u66B4\u529B\u6C42\u89E3</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">canJump</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>

    <span class="token keyword">const</span> <span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">position <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">===</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
            flag <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token keyword">return</span> 
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">&gt;</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> 
        <span class="token punctuation">}</span>

        <span class="token keyword">const</span> steps <span class="token operator">=</span> nums<span class="token punctuation">[</span>position<span class="token punctuation">]</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> steps<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">helper</span><span class="token punctuation">(</span>position <span class="token operator">+</span> i<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    <span class="token function">helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> flag 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u8D2A\u5FC3\u7B97\u6CD5</strong></p><blockquote><p>\u7528\u53D8\u91CFk\u8BB0\u5F55, \u6700\u5927\u7684\u5230\u8FBE\u7684\u4F4D\u7F6E. \u5728\u904D\u5386\u4E2D\u66F4\u65B0\u6700\u5927\u80FD\u5230\u8FBE\u7684\u4F4D\u7F6E, \u5982\u679C\u5F53\u524D\u4F4D\u7F6E\u6BD4\u6700\u5927\u7684\u4F4D\u7F6E\u8FD8\u8981\u5927\u5219\u8BC1\u660E\u5F53\u524D\u4F4D\u7F6E\u4E0D\u80FD\u5230\u8FBE, \u5219return false. \u904D\u5386\u5B8C\u4E86\u5219\u8FD4\u56DEtrue</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">canJump</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
       k <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,131);function d(v,m){return t(),p(e,null,[l,i,u,r,k],64)}var h=a(c,[["render",d],["__file","\u7B97\u6CD5\u5237\u9898.html.vue"]]);export{h as default};
