import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";import{c as p,o as e,F as l,a,b as s,d as n}from"./app.ebc51866.js";const o={},c=a(`<h1 id="\u6570\u636E\u7ED3\u6784\u4E0E\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u6570\u636E\u7ED3\u6784\u4E0E\u7B97\u6CD5" aria-hidden="true">#</a> \u6570\u636E\u7ED3\u6784\u4E0E\u7B97\u6CD5</h1><h2 id="\u65F6\u95F4\u590D\u6742\u5EA6" tabindex="-1"><a class="header-anchor" href="#\u65F6\u95F4\u590D\u6742\u5EA6" aria-hidden="true">#</a> \u65F6\u95F4\u590D\u6742\u5EA6</h2><blockquote><p>\u4EE5\u7B80\u5316\u7684\u65B9\u5F0F\u63CF\u8FF0\u7A0B\u5E8F\u8BED\u53E5\u7684\u6267\u884C\u9891\u5EA6</p><p>\u89C4\u5219\uFF1A \u4FDD\u7559\u9AD8\u6B21\u9879. \u4F46\u9AD8\u6B64\u9879\u7684\u7CFB\u6570\u3001 \u4F4E\u6B21\u9879\u3001 \u5E38\u6570\u90FD\u7701\u7565</p></blockquote><h3 id="\u5E38\u6570\u9636" tabindex="-1"><a class="header-anchor" href="#\u5E38\u6570\u9636" aria-hidden="true">#</a> \u5E38\u6570\u9636</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// func1\u6267\u884C\u65F6\u5019\uFF0C \u8BED\u53E5\u9891\u5EA6 T\uFF08n\uFF09 = 3</span>
<span class="token comment">// \u610F\u5473\u7740\u65E0\u8BBA\u8F93\u5165\u591A\u5C11\u6570\u636E\u91CF\uFF0C \u8BE5\u51FD\u6570\u8BED\u53E5\u90FD\u6267\u884C\u4E09\u6B21</span>
<span class="token comment">// \u90A3\u4E48\u65F6\u95F4\u590D\u6742\u5EA6 O\uFF08n\uFF09 = 1</span>
<span class="token keyword">const</span> <span class="token function-variable function">func1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
func1\uFF08<span class="token number">100</span>\uFF09
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5BF9\u6570\u9636" tabindex="-1"><a class="header-anchor" href="#\u5BF9\u6570\u9636" aria-hidden="true">#</a> \u5BF9\u6570\u9636</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u9996\u5148\u5206\u6790 i *= 2\u7684\u6267\u884C\u6B21\u6570</span>
<span class="token comment">// \u4E3E\u4F8B\u5206\u6790: </span>
<span class="token comment">// n = 4 \u65F6\u5019 2\u6B21</span>
<span class="token comment">// n = 8 \u65F6\u5019 3\u6B21</span>
<span class="token comment">// n = 16 \u65F6\u5019 4\u6B21</span>
<span class="token comment">// \u6545\u800C\u53EF\u627E\u51FA\u89C4\u5F8B 2\u7684&quot;\u6B21\u6570&quot;\u6B21\u65B9 = n \u6839\u636E\u5BF9\u6570\u5B9A\u4E49 \u5373\u6B21\u6570 = log2n</span>

<span class="token comment">// i \u521D\u59CB\u53161\u6B21 , i &lt; n\u6267\u884C log2n + 1\u6B21, i *= 2\u6267\u884C\u4E86log2n\u6B21, console.log()\u6267\u884C\u4E86log2n\u6B21</span>
<span class="token comment">// \u6545\u800CT(n) = 1 + log2n+1 + log2n + log2n\u6B21= 3log2n + 2\u6B21</span>
<span class="token comment">// O(n) = log2n \u5BF9\u6570\u7EA7</span>
<span class="token keyword">const</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7EBF\u6027\u9636" tabindex="-1"><a class="header-anchor" href="#\u7EBF\u6027\u9636" aria-hidden="true">#</a> \u7EBF\u6027\u9636</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// fun\u6267\u884C\u65F6\u5019</span>
<span class="token comment">// let i = 0 \u6267\u884C\u4E00\u6B21</span>
<span class="token comment">// i &lt; n \u6267\u884C n + 1\u6B21(\u591A\u51FA\u6765\u7684\u4E00\u6B21\u662F\u521D\u59CB\u5316\u8BED\u53E5\u4E5F\u8981\u6267\u884C\u4E00\u6B21)</span>
<span class="token comment">// i++ \u6267\u884Cn\u6B21</span>
<span class="token comment">// console.log(1) \u6267\u884C n \u6B21</span>
<span class="token comment">// \u6240\u4EE5 fun\u7684\u8BED\u53E5\u6267\u884C\u9891\u5EA6 T\uFF08n\uFF09 = 3n + 2</span>
<span class="token comment">// \u6545 O\uFF08n\uFF09 = n</span>
<span class="token keyword">const</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5E73\u65B9\u9636" tabindex="-1"><a class="header-anchor" href="#\u5E73\u65B9\u9636" aria-hidden="true">#</a> \u5E73\u65B9\u9636</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// i\u521D\u59CB\u5316 1\u6B21</span>
<span class="token comment">// i&lt;n \u6267\u884Cn+1\u6B21(\u591A\u4E86\u4E00\u6B21\u521D\u59CB\u5316\u7684\u5224\u65AD)</span>
<span class="token comment">// i++ \u6267\u884Cn\u6B21</span>
<span class="token comment">// j \u521D\u59CB\u5316 n\u6B21</span>
<span class="token comment">// j &lt; n \u6267\u884C n(n + 1)\u6B21</span>
<span class="token comment">// j++ n\u7684\u5E73\u65B9\u6B21</span>
<span class="token comment">// console.log(1) \u6267\u884C n\u7684\u5E73\u65B9\u6B21</span>
<span class="token comment">// \u6240\u4EE5T(n) = 1 + n+1 + n + n + n\xB2+n + n\xB2 + n\xB2 = 3n\xB2 + 4n + 2</span>
<span class="token comment">// \u6240\u4EE5O(n) = n\xB2</span>
<span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u65F6\u95F4\u590D\u6742\u5EA6\u7684\u5FEB\u6162" tabindex="-1"><a class="header-anchor" href="#\u65F6\u95F4\u590D\u6742\u5EA6\u7684\u5FEB\u6162" aria-hidden="true">#</a> \u65F6\u95F4\u590D\u6742\u5EA6\u7684\u5FEB\u6162</h3><p>O(1) &gt; O(log) &gt; O(n) &gt; O(nlogn) &gt; O(n\xB2) &gt; O (a\u7684n\u6B21\u65B9)</p><p>\u5E38\u6570\u9636 &gt; \u5BF9\u6570\u9636 &gt; \u7EBF\u6027\u9636 &gt; \u7EBF\u6027\u5BF9\u6570\u9636 &gt; \u5E73\u65B9\u9636 &gt; \u6307\u6570\u9636</p><h3 id="\u2211-sigama-\u6C42\u548C\u516C\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u2211-sigama-\u6C42\u548C\u516C\u5F0F" aria-hidden="true">#</a> \u2211 (sigama)\u6C42\u548C\u516C\u5F0F</h3>`,15),i=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("msub",null,[s("mi",null,"x"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"},"\\sum ^{n} _{ i=1 } {x_ i}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.104em","vertical-align":"-0.2997em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8043em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])]),n(" \u7684\u542B\u4E49\u4E3A: \u5BF9"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"x"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"},"{x_i}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])]),n("\u8FDB\u884C \u4ECE i = 1 \u5230 i = n\u7684\u6C42\u548C. \u5373\u7B49\u4E8E"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"x"),s("mn",null,"1")]),s("mo",null,"+"),s("msub",null,[s("mi",null,"x"),s("mn",null,"2")]),s("mo",null,"+"),s("msub",null,[s("mi",null,"x"),s("mn",null,"3")]),s("mo",null,"+"),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mo",null,"+"),s("msub",null,[s("mi",null,"x"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"},"{x_1} + {x_2} + {x_3} + ... + {x_n}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"3")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"..."),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])])],-1),u=s("p",null,[n("\u4E3E\u4E2A\u4F8B\u5B50: \u6BD4\u5982\u6709\u4E2A\u6570\u5217"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mo",null,"+"),s("mn",null,"2"),s("mo",null,"+"),s("mn",null,"3"),s("mo",null,"+"),s("mn",null,"4"),s("mo",null,"+"),s("mn",null,"5"),s("mo",null,"+"),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mo",null,"+"),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"{1 + 2 + 3 + 4 + 5 + .... + n}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"4"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"...."),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"n")])])])]),n("\u8868\u793A\u4EC0\u4E48\u610F\u601D?")],-1),r=s("p",null,[n("\u6211\u4EEC\u7528\u53D8\u91CF"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"{i}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"i")])])])]),n('\u4EE3\u8868\u6BCF\u4E00\u9879\u7684\u503C, \u90A3\u4E48\u6570\u5217\u53EF\u4EE5\u63CF\u8FF0\u4E3A : "\u5BF9 i \u53D8\u91CF\u6C42\u548C, \u6C42\u548C\u7684\u8303\u56F4\u662F i = 1 \u5230 i = n"')],-1),m=s("p",null,[n("\u8BB0\u4F5C:"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"{\\sum ^{n} _{i = 1} {i}}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.104em","vertical-align":"-0.2997em"}}),s("span",{class:"mord"},[s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8043em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"i")])])])])])],-1),k=s("hr",null,null,-1),d=s("p",null,[n("\u7EC3\u4E60 : \u5206\u6790"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mn",null,"3")]),s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mn",null,"2"),s("mi",null,"i"),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])]),s("annotation",{encoding:"application/x-tex"},"{\\sum _{i = 1} ^{3}} {(2 i - 1)}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2537em","vertical-align":"-0.2997em"}}),s("span",{class:"mord"},[s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.954em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"3")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])])]),s("span",{class:"mord"},[s("span",{class:"mopen"},"("),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])])])],-1),v=s("p",null,[n("\u9996\u5148\u660E\u786E\u516C\u5F0F\u7684\u542B\u4E49: \u5BF9\u53D8\u91CF"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"i"),s("mo",null,"\u2212"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"{2 i - 1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1")])])])]),n("\u5728 i = 1 \u5230 i = 3\u7684\u8303\u56F4\u4E0A\u8FDB\u884C\u6C42\u548C")],-1),h=s("p",null,[n("\u6545"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mn",null,"3")]),s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mn",null,"2"),s("mi",null,"i"),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("mo",null,"="),s("mn",null,"2"),s("mo",null,"\u2217"),s("mn",null,"1"),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",null,"+"),s("mn",null,"2"),s("mo",null,"\u2217"),s("mn",null,"2"),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",null,"+"),s("mn",null,"2"),s("mo",null,"\u2217"),s("mn",null,"3"),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",null,"="),s("mn",null,"1"),s("mo",null,"+"),s("mn",null,"3"),s("mo",null,"+"),s("mn",null,"5"),s("mo",null,"="),s("mn",null,"9")]),s("annotation",{encoding:"application/x-tex"},"{\\sum _{i = 1} ^{3}} {(2 i - 1)} = 2*1 -1 + 2*2 -1 + 2*3 -1 = 1 + 3 + 5 = 9")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2537em","vertical-align":"-0.2997em"}}),s("span",{class:"mord"},[s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.954em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"3")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])])]),s("span",{class:"mord"},[s("span",{class:"mopen"},"("),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2217"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2217"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2217"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"9")])])])],-1),b=s("hr",null,null,-1),g=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{lspace:"0em",rspace:"0em"},"\u2211")]),s("annotation",{encoding:"application/x-tex"},"{\\sum}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211")])])])]),n("\u7684\u6027\u8D28:")],-1),y=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("mrow",null,[s("mi",null,"k"),s("mi",null,"b")])]),s("annotation",{encoding:"application/x-tex"},"{\\sum ^{n} _{i = 1} {k b}}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.104em","vertical-align":"-0.2997em"}}),s("span",{class:"mord"},[s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8043em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"kb")])])])])]),n("="),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"k"),s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("mi",null,"b")])]),s("annotation",{encoding:"application/x-tex"},"{k} {\\sum ^{n} _{i = 1} {b}}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.104em","vertical-align":"-0.2997em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k")]),s("span",{class:"mord"},[s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8043em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"b")])])])])]),n("\u5176\u4E2Dk\u4E3A\u5E38\u6570")],-1),w=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("mrow",null,[s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"a"),s("mi",null,"i")]),s("mo",null,"+"),s("msub",null,[s("mi",null,"b"),s("mi",null,"i")]),s("mo",{stretchy:"false"},")")])]),s("annotation",{encoding:"application/x-tex"},"{\\sum ^{n} _{i = 1} {(a_i + b_i)}}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.104em","vertical-align":"-0.2997em"}}),s("span",{class:"mord"},[s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8043em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"b"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},")")])])])])]),n("="),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("msub",null,[s("mi",null,"a"),s("mi",null,"i")])]),s("mo",null,"+"),s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("msub",null,[s("mi",null,"b"),s("mi",null,"i")])])]),s("annotation",{encoding:"application/x-tex"},"{\\sum ^{n} _{i = 1} {a_i }} + {\\sum ^{n} _{i = 1} {b_i }}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.104em","vertical-align":"-0.2997em"}}),s("span",{class:"mord"},[s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8043em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.104em","vertical-align":"-0.2997em"}}),s("span",{class:"mord"},[s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8043em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"b"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])])])],-1),f=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("msup",null,[s("mi",null,"i"),s("mn",null,"2")])]),s("mo",null,"="),s("mfrac",null,[s("mrow",null,[s("mi",null,"n"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},"("),s("mn",null,"2"),s("mi",null,"n"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("mn",null,"6")])]),s("annotation",{encoding:"application/x-tex"},"{\\sum ^{n} _{i = 1} {i ^ 2}} = \\frac{n(n+1)(2n+1)}{6}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1138em","vertical-align":"-0.2997em"}}),s("span",{class:"mord"},[s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8043em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"i"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.355em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.01em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"6")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.485em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mopen mtight"},"("),s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1"),s("span",{class:"mclose mtight"},")"),s("span",{class:"mopen mtight"},"("),s("span",{class:"mord mtight"},"2"),s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1"),s("span",{class:"mclose mtight"},")")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])]),n("\u7EA6\u7B49\u4E8E"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mi",null,"n"),s("mn",null,"3")])]),s("annotation",{encoding:"application/x-tex"},"{n^3}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"3")])])])])])])])])])])])],-1),x=a(`<hr><h3 id="\u516C\u5F0F\u6CD5\u8BA1\u7B97\u7D2F\u52A0\u7A0B\u5E8F\u7684\u65F6\u95F4\u590D\u6742\u5EA6" tabindex="-1"><a class="header-anchor" href="#\u516C\u5F0F\u6CD5\u8BA1\u7B97\u7D2F\u52A0\u7A0B\u5E8F\u7684\u65F6\u95F4\u590D\u6742\u5EA6" aria-hidden="true">#</a> \u516C\u5F0F\u6CD5\u8BA1\u7B97\u7D2F\u52A0\u7A0B\u5E8F\u7684\u65F6\u95F4\u590D\u6742\u5EA6</h3><p><strong>\u4F8B1</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7528\u516C\u5F0F\u6CD5\u8BA1\u7B97\u4E0A\u8FF0\u51FD\u6570\u65F6\u95F4\u590D\u6742\u5EA6</p><p>\u7531\u4E4B\u524D\u7684\u7ECF\u9A8C\u53EF\u77E5, for\u5FAA\u73AF\u4E2D\u5F71\u54CD\u65F6\u95F4\u590D\u6742\u5EA6\u6700\u5173\u952E\u7684\u56E0\u7D20\u662F\u5FAA\u73AF\u4F53\u7684\u8BED\u53E5, \u4E3An * \u5FAA\u73AF\u4F53\u7684\u5185\u8BED\u53E5\u7684\u6761\u6570</p><p>\u6240\u4EE5\u6211\u4EEC\u53EA\u8BA1\u7B97\u5B83, \u800C\u5FFD\u7565 <code>let i = 0</code>, <code>i&lt;n</code> , <code>i++</code> \u7684\u5F71\u54CD</p><p>\u5FAA\u73AF\u4F53\u5185\u8BED\u53E5\u7684\u6267\u884C\u6761\u6570\u4E3A:</p>`,8),z=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mn",null,"0"),s("mrow",null,[s("mi",null,"n"),s("mo",null,"\u2212"),s("mn",null,"1")])]),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"\\sum ^{n -1} _{0} {1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2537em","vertical-align":"-0.2997em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.954em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"\u2212"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])])])]),n(" \u5373 1 \u5728 [0, n-1]\u7684\u8303\u56F4\u4E0A\u6C42\u548C. \u7528\u4E0A\u8FB9\u754C\u51CF\u4E0B\u8FB9\u754C\u518D\u52A01\u5373\u53EF\u7B97\u51FA\u6709\u591A\u5C11\u4E2A1")],-1),j=a(`<p>\u5373: n - 1 - 0 + 1 = n \u6B21</p><p>\u6545\u4E0A\u8FF0\u7B97\u6CD5\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A O(n)</p><p><strong>\u4F8B2</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5206\u6790: \u6700\u91CC\u5C42\u5FAA\u73AF\u4F53\u8BED\u53E5\u7684\u6267\u884C\u6B21\u6570\u4E3A</p>`,5),q=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"0")]),s("mrow",null,[s("mi",null,"n"),s("mo",null,"\u2212"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"{\\sum ^{n - 1} _{i = 0}}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2537em","vertical-align":"-0.2997em"}}),s("span",{class:"mord"},[s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.954em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"0")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"\u2212"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])])])])])]),n(),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"j"),s("mo",null,"="),s("mn",null,"0")]),s("mrow",null,[s("mi",null,"n"),s("mo",null,"\u2212"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"{\\sum ^{n - 1} _{ j = 0}}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.3898em","vertical-align":"-0.4358em"}}),s("span",{class:"mord"},[s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.954em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"0")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"\u2212"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4358em"}},[s("span")])])])])])])])])]),n(" 1")],-1),_=s("p",null,"\u5148\u7B97\u53F3\u8FB9\u7684",-1),M=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"j"),s("mo",null,"="),s("mn",null,"0")]),s("mrow",null,[s("mi",null,"n"),s("mo",null,"\u2212"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"{\\sum ^{n - 1} _{ j = 0}}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.3898em","vertical-align":"-0.4358em"}}),s("span",{class:"mord"},[s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.954em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"0")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"\u2212"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4358em"}},[s("span")])])])])])])])])]),n(" 1 = n - 1 - 0 + 1 = n")],-1),S=s("p",null,"\u6240\u4EE5\u516C\u5F0F\u7B49\u4EF7\u4E8E",-1),L=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"0")]),s("mrow",null,[s("mi",null,"n"),s("mo",null,"\u2212"),s("mn",null,"1")])]),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"{\\sum ^{n - 1} _{i = 0}} { n }")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2537em","vertical-align":"-0.2997em"}}),s("span",{class:"mord"},[s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.954em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"0")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"\u2212"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])])]),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n")])])])])],-1),I=s("p",null,"\u5373\u7ED3\u679C\u4E3A: n\xB2",-1),T=s("h3",{id:"\u516C\u5F0F\u8BA1\u7B97\u5BF9\u6570\u7EA7\u65F6\u95F4\u590D\u6742\u5EA6",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#\u516C\u5F0F\u8BA1\u7B97\u5BF9\u6570\u7EA7\u65F6\u95F4\u590D\u6742\u5EA6","aria-hidden":"true"},"#"),n(" \u516C\u5F0F\u8BA1\u7B97\u5BF9\u6570\u7EA7\u65F6\u95F4\u590D\u6742\u5EA6")],-1),O=s("blockquote",null,[s("p",null,"\u5BF9\u6570\u7EA7\u522B\u7B97\u6CD5\u5E38\u5E38\u51FA\u73B0\u5728 i*= k \u8FD9\u79CD\u64CD\u4F5C\u4E2D."),s("p",null,[n("\u601D\u8DEF\u4E3A: \u627E\u51FA\u6B21\u6570"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"T(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),n("\u4E0E"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),n("\u7684\u5173\u7CFB")])],-1),A=a(`<p><strong>\u4F8B1</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),N=s("p",null,[n("\u9996\u5148\u5206\u6790, \u8FD9\u9053\u9898\u4E0D\u80FD\u7528\u4E4B\u524D"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("msub",null,[s("mi",null,"x"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"},"\\sum ^{n} _{ i=1 } {x_ i}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.104em","vertical-align":"-0.2997em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8043em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])]),n("\u516C\u5F0F\u8BA1\u7B97")],-1),V=s("p",null,[n("\u56E0\u4E3A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("msub",null,[s("mi",null,"x"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"},"\\sum ^{n} _{ i=1 } {x_ i}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.104em","vertical-align":"-0.2997em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8043em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])]),n("\u8868\u793A\u7684\u662F\u7D2F\u52A0, \u6211\u4EEC\u8FD9\u4E2A\u662F"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i"),s("mo",null,"\u2217"),s("mo",null,"="),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"i *= 2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord"},"\u2217"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),n(", \u662F\u8DF3\u7740\u52A0\u7684")],-1),F=s("p",null,"\u6211\u4EEC\u53EF\u4EE5\u5047\u8BBE \u5FAA\u73AF\u4F53\u8BED\u53E5\u7684\u6267\u884C\u6B21\u6570\u4E3A T(n), \u800C\u8FD9\u4E2AT(n) \u4E5F\u540C\u6837\u4EE3\u8868\u7740\u6700\u540E\u7684\u65F6\u95F4\u590D\u6742\u5EA6",-1),C=s("p",null,[n("\u7136\u540E\u6211\u4EEC\u5217\u51FA i \u7684\u53D8\u5316: "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mo",{separator:"true"},","),s("mn",null,"2"),s("mo",{separator:"true"},","),s("mn",null,"4"),s("mo",{separator:"true"},","),s("mn",null,"8"),s("mo",{separator:"true"},","),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mo",{separator:"true"},","),s("mi",null,"n"),s("mo",null,"\u2212"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1 , 2 , 4 , 8 , ... , n - 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"4"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"8"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"..."),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n("(\u53EF\u80FD\u4E0D\u5B8C\u5168\u547D\u4E2D n -1)")],-1),P=s("p",null,[n("\u5F53T(n) = 0, \u5373\u5FAA\u73AF\u6B21\u6570\u4E3A0\u6B21\u65F6\u5019,"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"i = 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])],-1),B=s("p",null,[n("\u5F53T(n) =1, \u5373\u5FAA\u73AF\u6B21\u6570\u4E3A1\u6B21\u65F6\u5019,"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"i = 2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])])],-1),E=s("p",null,[n("\u5F53T(n) =2, \u5373\u5FAA\u73AF\u6B21\u6570\u4E3A2\u6B21\u65F6\u5019,"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"4")]),s("annotation",{encoding:"application/x-tex"},"i = 4")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4")])])])],-1),R=s("p",null,"...",-1),Q=s("p",null,[n("\u5373\u53EF\u603B\u7ED3\u51FA\u5982\u4E0B\u516C\u5F0F"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])]),s("mo",null,"<"),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"i = 2^{T( n )} < {n}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9271em","vertical-align":"-0.0391em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.888em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen mtight"},"("),s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mclose mtight"},")")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n")])])])])],-1),D=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")"),s("mo",null,"<"),s("mi",null,"l"),s("mi",null,"o"),s("msubsup",null,[s("mi",null,"g"),s("mn",null,"2"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"},"T(n) < log_2^n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9425em","vertical-align":"-0.2481em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-2.4519em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])]),s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2481em"}},[s("span")])])])])])])])])],-1),$=s("p",null,[n("\u6545\u8BE5\u7B97\u6CD5\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"o"),s("msubsup",null,[s("mi",null,"g"),s("mn",null,"2"),s("mi",null,"n")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(log_2^n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-2.4519em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])]),s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2481em"}},[s("span")])])])])]),s("span",{class:"mclose"},")")])])])],-1),X=a(`<p><strong>\u4F8B2</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">1</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        n<span class="token operator">*=</span><span class="token number">5</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6B64\u9898\u662F\u7D2F\u52A0\u5F62\u548C\u5BF9\u6570\u5F62\u7684\u603B\u548C</p>`,3),U=s("p",null,[n("\u7B54\u6848\u4E3A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mi",null,"l"),s("mi",null,"o"),s("msubsup",null,[s("mi",null,"g"),s("mn",null,"5"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"},"n^2log_5 ^n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0622em","vertical-align":"-0.2481em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-2.4519em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"5")])]),s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2481em"}},[s("span")])])])])])])])])],-1),H=a(`<h3 id="\u9012\u5F52\u7A0B\u5E8F\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u8BA1\u7B97" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52\u7A0B\u5E8F\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u8BA1\u7B97" aria-hidden="true">#</a> \u9012\u5F52\u7A0B\u5E8F\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u8BA1\u7B97</h3><p><strong>\u4F8B1</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">fn</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u6837\u4E00\u4E2A\u9012\u5F52\u51FD\u6570, \u5982\u4F55\u8861\u91CF\u4E8B\u4EF6\u590D\u6742\u5EA6</p><p>\u4E00\u79CD\u5E38\u89C1\u7684\u529E\u6CD5\u662F \u8FED\u4EE3\u6CD5</p><p>\u9996\u5148\u5047\u8BBE\u6BCD\u95EE\u9898\u7684\u8017\u65F6\u4E3A T(n)</p><p>\u5219</p><p>T(n) = O(1) , \u5F53 n = 1\u65F6</p><p>T(n) = O(1) + T(n - 1) \u5F53n &gt; 1\u65F6. \u5176\u4E2D\u4E58\u6CD5\u8FD0\u7B97\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E3Ao(1)</p><p>\u5219 \u5F53n &gt; 1 \u65F6</p><p>T(n) = O(1) + T(n - 1)</p><p>T(n - 1) = 0(1) + T(n - 2)</p><p>T(n - 2) = 0(1) + T(n - 3)</p><p>...</p><p>\u5373 T(n) = n O(1) + T(1) = n O(1) + O(1)</p><p>\u5373\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A O(n)</p><h3 id="master\u516C\u5F0F\u8BA1\u7B97\u9012\u5F52" tabindex="-1"><a class="header-anchor" href="#master\u516C\u5F0F\u8BA1\u7B97\u9012\u5F52" aria-hidden="true">#</a> master\u516C\u5F0F\u8BA1\u7B97\u9012\u5F52</h3><blockquote><p>master\u516C\u5F0F\u53EA\u80FD\u9488\u5BF9 &quot;\u6BCD\u95EE\u9898\u53EF\u4EE5\u62C6\u6210\u82E5\u5E72\u7B49\u91CF\u7684\u5B50\u95EE\u9898&quot;\u7684\u7A0B\u5E8F</p></blockquote><p>master\u516C\u5F0F:</p>`,19),K=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"a"),s("mo",null,"\u2217"),s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mfrac",null,[s("mi",null,"n"),s("mi",null,"b")]),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mi",null,"d")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"T(n) = a * T(\\frac{n}{b}) + O(n^ d)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4653em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2217"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.095em","vertical-align":"-0.345em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6954em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])])])])]),s("span",{class:"mclose"},")")])])])],-1),J=s("p",null,"\u5373 \u6BCD\u95EE\u9898\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u7B49\u4E8Ea\u4E2A\u5B50\u95EE\u9898\u7684\u65F6\u95F4\u590D\u6742\u5EA6 \u52A0\u4E0A\u5E38\u6570\u7EA7\u64CD\u4F5C\u7684\u65F6\u95F4\u590D\u6742\u5EA6",-1),G=s("p",null,"\u5176\u4E2D:",-1),W=s("p",null,"n\u4EE3\u8868\u6570\u636E\u91CF",-1),Y=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"T(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),n("\u4EE3\u8868\u6BCD\u95EE\u9898\u7684\u65F6\u95F4\u590D\u6742\u5EA6")],-1),Z=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"a")]),s("annotation",{encoding:"application/x-tex"},"a")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"a")])])]),n("\u4EE3\u8868\u5B50\u95EE\u9898\u7684\u4E2A\u6570")],-1),ss=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mfrac",null,[s("mi",null,"n"),s("mi",null,"b")])]),s("annotation",{encoding:"application/x-tex"},"\\frac{n}{b}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0404em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6954em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])]),n("\u4EE3\u8868\u5B50\u95EE\u9898\u7684\u6570\u636E\u91CF")],-1),ns=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mi",null,"d")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^ d)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])])])])]),s("span",{class:"mclose"},")")])])]),n("\u4EE3\u8868\u989D\u5916\u7684\u5E38\u6570\u7EA7\u64CD\u4F5C\u7684\u65F6\u95F4\u590D\u6742\u5EA6")],-1),as=s("p",null,[n("\u2460\u5F53"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"d"),s("mo",null,"<"),s("mi",null,"l"),s("mi",null,"o"),s("msubsup",null,[s("mi",null,"g"),s("mi",null,"b"),s("mi",null,"a")])]),s("annotation",{encoding:"application/x-tex"},"d < log_b ^a")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7335em","vertical-align":"-0.0391em"}}),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9775em","vertical-align":"-0.2831em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-2.4169em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])]),s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"a")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2831em"}},[s("span")])])])])])])])]),n("\u65F6\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mrow",null,[s("mi",null,"l"),s("mi",null,"o"),s("msubsup",null,[s("mi",null,"g"),s("mi",null,"b"),s("mi",null,"a")])])]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n ^ {log_b ^a} )")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.13em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.88em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal mtight"},"o"),s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7385em"}},[s("span",{style:{top:"-2.214em","margin-left":"-0.0359em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])]),s("span",{style:{top:"-2.931em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mathnormal mtight"},"a")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.286em"}},[s("span")])])])])])])])])])])])])]),s("span",{class:"mclose"},")")])])]),n(" \u2461\u5F53"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"d"),s("mo",null,"="),s("mi",null,"l"),s("mi",null,"o"),s("msubsup",null,[s("mi",null,"g"),s("mi",null,"b"),s("mi",null,"a")])]),s("annotation",{encoding:"application/x-tex"},"d = log_b ^a")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9775em","vertical-align":"-0.2831em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-2.4169em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])]),s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"a")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2831em"}},[s("span")])])])])])])])]),n("\u65F6\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mi",null,"d")]),s("mo",null,"\u2217"),s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mi",null,"n")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n ^ d * log_n )")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2217"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},")")])])]),n(" \u2462\u5F53"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"d"),s("mo",null,">"),s("mi",null,"l"),s("mi",null,"o"),s("msubsup",null,[s("mi",null,"g"),s("mi",null,"b"),s("mi",null,"a")])]),s("annotation",{encoding:"application/x-tex"},"d > log_b ^a")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7335em","vertical-align":"-0.0391em"}}),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},">"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9775em","vertical-align":"-0.2831em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-2.4169em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])]),s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"a")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2831em"}},[s("span")])])])])])])])]),n("\u65F6\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mi",null,"d")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n ^ d )")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])])])])]),s("span",{class:"mclose"},")")])])])],-1),ts=a(`<p><strong>\u4F8B\u5B50</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> maxLeft <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> maxRight <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLeft<span class="token punctuation">,</span>maxRight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9996\u5148\u5224\u65AD\u8FD9\u4E2A\u51FD\u6570\u53EF\u4EE5\u662F\u5426\u53EF\u4EE5\u7528master\u516C\u5F0F?</p><p>\u6BCD\u95EE\u9898\u88AB\u62C6\u4E3A\u4E86\u4E24\u4E2A\u9012\u5F52\u7684\u5C0F\u95EE\u9898: \u5176\u4E2D\u4E24\u4E2A\u5C0F\u95EE\u9898\u7684\u6570\u636E\u91CF\u5404\u4E3A\u4E00\u534A, \u6545\u800C\u53EF\u4EE5\u7528master\u516C\u5F0F</p>`,4),ps=s("p",null,[n("\u5373"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mn",null,"2"),s("mo",null,"\u2217"),s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mfrac",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"0")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"T(n) = 2 * T(\\frac{n}{2}) + O(n^ 0)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2217"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.095em","vertical-align":"-0.345em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6954em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])])])])])]),s("span",{class:"mclose"},")")])])])],-1),es=s("p",null,"a = 2, b = 2, d = 0",-1),ls=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"l"),s("mi",null,"o"),s("msubsup",null,[s("mi",null,"g"),s("mn",null,"2"),s("mn",null,"2")]),s("mo",null,"="),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"log_2 ^2 = 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0622em","vertical-align":"-0.2481em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-2.4519em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])]),s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2481em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n("> d")],-1),os=s("p",null,[n("\u6545\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mrow",null,[s("mi",null,"l"),s("mi",null,"o"),s("msubsup",null,[s("mi",null,"g"),s("mi",null,"b"),s("mi",null,"a")])])]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n ^ {log_b ^a} )")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.13em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.88em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal mtight"},"o"),s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7385em"}},[s("span",{style:{top:"-2.214em","margin-left":"-0.0359em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])]),s("span",{style:{top:"-2.931em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mathnormal mtight"},"a")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.286em"}},[s("span")])])])])])])])])])])])])]),s("span",{class:"mclose"},")")])])]),n("="),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mrow",null,[s("mi",null,"l"),s("mi",null,"o"),s("msubsup",null,[s("mi",null,"g"),s("mn",null,"2"),s("mn",null,"2")])])]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n ^ {log_2 ^2} )")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2369em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9869em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal mtight"},"o"),s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8913em"}},[s("span",{style:{top:"-2.214em","margin-left":"-0.0359em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},"2")])]),s("span",{style:{top:"-2.931em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.286em"}},[s("span")])])])])])])])])])])])])]),s("span",{class:"mclose"},")")])])]),n("="),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])])],-1),cs=a(`<h2 id="\u5341\u79CD\u6392\u5E8F\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u5341\u79CD\u6392\u5E8F\u7B97\u6CD5" aria-hidden="true">#</a> \u5341\u79CD\u6392\u5E8F\u7B97\u6CD5</h2><h3 id="\u5192\u6CE1\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u5192\u6CE1\u6392\u5E8F" aria-hidden="true">#</a> \u5192\u6CE1\u6392\u5E8F</h3><blockquote><p>\u8BB0\u5FC6\u70B9: \u4E24\u4E24\u4EA4\u6362\uFF0C \u79FB\u5230\u53F3\u4FA7</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u4EE5\u5347\u5E8F\u6570\u5B57\u6392\u5E8F\u4E3A\u4F8B, \u5192\u6CE1\u6392\u5E8F\u5C31\u662F\u4E24\u4E24\u6BD4\u8F83, \u5C06\u8F83\u5927\u7684\u6570\u5B57\u79FB\u5230\u540E\u65B9</span>
<span class="token comment">// \u5176\u4E2Dn\u4E2A\u6570\u5B57, \u9700\u8981\u79FB\u52A8n-1\u6B21</span>

<span class="token keyword">const</span> nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> <span class="token function-variable function">swap</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> num1Idx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> num2Idx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num1Idx <span class="token operator">===</span> num2Idx<span class="token punctuation">)</span> <span class="token keyword">return</span> arr

  <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>num2Idx<span class="token punctuation">]</span>
  arr<span class="token punctuation">[</span>num2Idx<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>num1Idx<span class="token punctuation">]</span>
  arr<span class="token punctuation">[</span>num1Idx<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token punctuation">}</span>

<span class="token keyword">const</span> bubbleSort <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u6311\u51E0\u4E2A\u6570\u5B57\u653E\u5728\u6700\u540E\u4E00\u4E2A</span>
    <span class="token comment">// // j\u89C4\u5B9A\u54EA\u4E24\u4E2A\u5143\u7D20\u4EA4\u6362, j \u548C j+1\u505A\u6BD4\u8F83</span>
    <span class="token comment">// j\u7684\u8303\u56F4\u6700\u5927\u53EF\u4EE5\u5230nums.length - 1, \u4F46\u6CA1\u5FC5\u8981</span>
    <span class="token comment">// \u7B2C\u4E00\u6B21\u9700\u8981\u53D6\u5230nums.length - 1, \u6BCF\u6311\u51FA\u4E00\u4E2A\u6570\u5B57, \u6700\u540E\u4E00\u4F4D\u5C31\u5411\u524D\u79FB\u52A8</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u5229\u7528\u53D8\u91CF\u4F18\u5316\u5192\u6CE1\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u5229\u7528\u53D8\u91CF\u4F18\u5316\u5192\u6CE1\u6392\u5E8F" aria-hidden="true">#</a> \u5229\u7528\u53D8\u91CF\u4F18\u5316\u5192\u6CE1\u6392\u5E8F</h4><blockquote><p>\u5047\u5982\u8FD9\u6837\u4E00\u4E2A\u6570\u7EC4: [ 22,1,3,4,5 ]</p><p>\u7B2C\u4E00\u6B21\u4EA4\u6362\u5C31\u4F1A\u5C0622\u653E\u5728\u6700\u540E, \u5F62\u6210[1,3,4,5,22]. \u4F46\u662F\u63A5\u4E0B\u6765\u8FD8\u4F1A\u6709\u7B2C\u4E8C\u6B21, \u7B2C\u4E09\u6B21, \u7B2C\u56DB\u4EA4\u6362, \u663E\u7136\u662F\u6D6A\u8D39\u7684.</p><p>\u6211\u4EEC\u53EF\u4EE5\u5B9A\u4E49\u4E00\u4E2A\u53D8\u91CF\uFF0C \u8BB0\u5F55\u672C\u8F6E\u662F\u5426\u672A\u53D1\u751F\u4EA4\u6362\uFF0C \u5982\u679C\u672C\u8F6E\u672A\u53D1\u751F\u4EA4\u6362\uFF0C \u90A3\u4E48\u5C31\u4E0D\u518D\u8FDB\u884C\u4E4B\u540E\u7684\u6BD4\u8F83</p><p>\u4F18\u5316\u8FC7\u540E\u7684\u672C\u4F8B\uFF0C \u672C\u6765\u9700\u8981\u4EA4\u63624\u8F6E\uFF0C \u4F18\u5316\u540E\u9700\u8981\u8FDB\u884C2\u8F6E\u3002 \u7B2C\u4E00\u8F6E\u6B63\u5E38\u4EA4\u6362 \uFF0C\u7B2C\u4E8C\u8F6E\u5224\u65AD\u4E86\u4E00\u76F4\u672A\u53D1\u751F\u4EA4\u6362\uFF0C \u7B2C\u4E09\u8F6E\u548C\u7B2C\u56DB\u8F6E\u4E0D\u518D\u4EA4\u6362</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> <span class="token function-variable function">swap</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> num1Idx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> num2Idx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num1Idx <span class="token operator">===</span> num2Idx<span class="token punctuation">)</span> <span class="token keyword">return</span> arr

  <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>num2Idx<span class="token punctuation">]</span>
  arr<span class="token punctuation">[</span>num2Idx<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>num1Idx<span class="token punctuation">]</span>
  arr<span class="token punctuation">[</span>num1Idx<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token punctuation">}</span>

<span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">const</span> bubbleSort <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u6311\u51E0\u4E2A\u6570\u5B57\u653E\u5728\u6700\u540E\u4E00\u4E2A</span>
    flag <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// \u5047\u8BBE\u672C\u8F6E\u662F\u6709\u5E8F\u7684</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        flag <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// \u4EA4\u6362\u4E86\u672C\u8F6E\u5C31\u662F\u65E0\u5E8F\u7684</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5982\u679C\u672C\u8F6E\u771F\u7684\u6709\u5E8F\uFF0C \u5C31\u7ED3\u675F</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span> arr
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u9009\u62E9\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u9009\u62E9\u6392\u5E8F" aria-hidden="true">#</a> \u9009\u62E9\u6392\u5E8F</h3><blockquote><p>\u8BB0\u5FC6\u70B9\uFF1A \u9009\u62E9\u4E0E\u53D8\u91CF\u8BB0\u5F55</p></blockquote><blockquote><p>\u4EE5\u5347\u5E8F\u6570\u5B57\u6392\u5E8F\u4E3A\u4F8B\uFF0C \u9009\u62E9 n - 1 \u6B21\u6570\u5B57\u653E\u5728\u6700\u540E\u6216\u8005\u6700\u524D\u65B9</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">nums</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> <span class="token function-variable function">swap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arr</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">num1Idx</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">num2Idx</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num1Idx <span class="token operator">===</span> num2Idx<span class="token punctuation">)</span> <span class="token keyword">return</span> arr

  <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>num2Idx<span class="token punctuation">]</span>
  arr<span class="token punctuation">[</span>num2Idx<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>num1Idx<span class="token punctuation">]</span>
  arr<span class="token punctuation">[</span>num1Idx<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">selectSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arr</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> maxIdx
  <span class="token comment">// \u9009\u62E9n - 1\u6B21</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u89C4\u5B9A\u6BCF\u6B21\u9009\u62E9\u8303\u56F4[ 0, n - 1 - i ]</span>
    maxIdx <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>maxIdx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        maxIdx <span class="token operator">=</span> j
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> maxIdx<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span>

  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">selectSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u63D2\u5165\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u63D2\u5165\u6392\u5E8F" aria-hidden="true">#</a> \u63D2\u5165\u6392\u5E8F</h3><blockquote><p>\u8BB0\u5FC6\u70B9: \u6709\u5E8F\u6570\u7EC4\u4E0E\u65E0\u5E8F\u6570\u7EC4, \u4F4D\u79FB\u4E0E\u63D2\u5165</p></blockquote><blockquote><ol><li>\u5C06\u6570\u7EC4\u770B\u6210\u201C\u6709\u5E8F\u201D \u548C \u201C\u65E0\u5E8F\u201D\u4E24\u90E8\u5206\u3002 \u5176\u4E2D\u7B2C\u4E00\u4E2A\u5143\u7D20\u9ED8\u8BA4\u662F\u6709\u5E8F\u7684</li><li>\u5C06\u65E0\u5E8F\u7684\u5143\u7D20\u4F9D\u6B21\u63D2\u5165\u6709\u5E8F\u7684\u5143\u7D20\u4E2D\uFF0C \u6709\u5E8F\u7684\u4F9D\u7136\u6709\u5E8F</li><li>\u63D2\u5165\u7684\u7B56\u7565\u662F\u5148\u4FDD\u5B58\u9700\u8981\u63D2\u5165\u7684\u6570\u7EC4\uFF0C \u7136\u540E\u53F3\u79FB\u6709\u5E8F\u6570\u7EC4</li></ol></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> <span class="token function-variable function">swap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> num1Idx<span class="token punctuation">,</span> num2Idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num1Idx <span class="token operator">===</span> num2Idx<span class="token punctuation">)</span> <span class="token keyword">return</span> arr

  <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>num2Idx<span class="token punctuation">]</span>
  arr<span class="token punctuation">[</span>num2Idx<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>num1Idx<span class="token punctuation">]</span>
  arr<span class="token punctuation">[</span>num1Idx<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">insertSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> temp
  <span class="token keyword">let</span> j 
  <span class="token comment">// \u904D\u5386\u65E0\u5E8F\u6570\u7EC4</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token comment">// \u5012\u7740\u904D\u5386\u6709\u5E8F\u6570\u7EC4</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5982\u679C\u6709\u5E8F</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp
      
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> nums
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">insertSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63D2\u5165\u6392\u5E8F\u7684\u4E8B\u4EF6\u590D\u6742\u5EA6\u8BA1\u7B97:</p>`,16),is=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mrow",null,[s("mi",null,"n"),s("mo",null,"\u2212"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"\\sum ^ {n - 1} _ {i = 1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2537em","vertical-align":"-0.2997em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.954em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"\u2212"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])])])])]),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"j"),s("mo",null,"="),s("mo",null,"\u2212"),s("mn",null,"1")]),s("mrow",null,[s("mi",null,"i"),s("mo",null,"\u2212"),s("mn",null,"1")])]),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"\\sum ^ {i - 1} _ {j = -1} 2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.4004em","vertical-align":"-0.4358em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9646em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"\u2212"),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mbin mtight"},"\u2212"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4358em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"2")])])])],-1),us=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mrow",null,[s("mi",null,"n"),s("mo",null,"\u2212"),s("mn",null,"1")])]),s("mn",null,"2"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\sum ^ {n - 1} _ {i = 1} 2 ( i + 1 )")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2537em","vertical-align":"-0.2997em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.954em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"\u2212"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])])],-1),rs=s("p",null,[n("2"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mrow",null,[s("mi",null,"n"),s("mo",null,"\u2212"),s("mn",null,"1")])]),s("mn",null,"1"),s("mo",null,"+")]),s("annotation",{encoding:"application/x-tex"},"( \\sum ^ {n - 1} _ {i = 1} 1 +")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2537em","vertical-align":"-0.2997em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.954em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"\u2212"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mord"},"+")])])]),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"\u2211"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mrow",null,[s("mi",null,"n"),s("mo",null,"\u2212"),s("mn",null,"1")])]),s("mi",null,"i"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\sum ^ {n - 1} _ {i = 1} i )")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2537em","vertical-align":"-0.2997em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.954em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"\u2212"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"\u200B")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mclose"},")")])])])],-1),ms=a(`<p>\u6240\u4EE5 \u63D2\u5165\u6392\u5E8F\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A: O(n\xB2)</p><h3 id="\u5E0C\u5C14\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u5E0C\u5C14\u6392\u5E8F" aria-hidden="true">#</a> \u5E0C\u5C14\u6392\u5E8F</h3><blockquote><p>\u8BB0\u5FC6\u70B9: \u63D2\u5165\u6392\u5E8F\u7684\u4F18\u5316, \u4EE5\u6B65\u957F\u5206\u7EC4, \u51CF\u5C11\u6B65\u957F\u81F3\u4E00</p></blockquote><blockquote><p>\u5E0C\u5C14\u6392\u5E8F\u662F\u5BF9\u63D2\u5165\u6392\u5E8F\u7684\u4F18\u5316</p><p>\u63D2\u5165\u6392\u5E8F\u662F\u5C06&quot;<strong>\u65E0\u5E8F\u6570\u7EC4\u7684\u7B2C\u4E00\u9879\u4E0D\u65AD\u63D2\u5165\u6709\u5E8F\u6570\u7EC4\u4E2D\u7684\u8FC7\u7A0B</strong>&quot;</p><p>\u6700\u597D\u60C5\u51B5\u662FO(n), \u6700\u574F\u60C5\u51B5\u662FO(n\xB2)</p><p>\u5728\u4FDD\u6301&quot;<strong>\u5C40\u90E8\u57FA\u672C\u6709\u5E8F</strong>&quot;\u7684\u72B6\u6001\u65F6\u63D2\u5165\u6392\u5E8F\u6BD4\u8F83\u9AD8\u6548, \u5728<strong>\u9006\u5E8F</strong>\u65F6\u5019, \u63D2\u5165\u6392\u5E8F\u4F4E\u6548</p></blockquote><blockquote><p>\u4EE5\u5347\u5E8F\u4E3A\u4F8B</p><p>\u5982 [1,3,2, 4,6,5, 9] \u6B64\u65F6, [1,3,2], [4,6 5], [9]\u662F\u5C40\u90E8\u57FA\u672C\u6709\u5E8F\u7684, \u6B64\u65F6\u63D2\u5165\u6392\u5E8F\u6BD4\u8F83\u9AD8\u6548\u7684\u72B6\u6001, \u53EA\u9700\u89812, 5 \u79FB\u52A8\u4E24\u6B21\u5373\u53EF</p><p>\u4F46\u5982 [6, 4, 5,2,3,1] \u6574\u4F53\u6570\u636E\u57FA\u672C\u9006\u5E8F, \u6B64\u65F6\u6BD4\u8F83\u4F4E\u6548, \u65F6\u95F4\u590D\u6742\u5EA6\u65E0\u9650\u63A5\u8FD1\u4E8EO(n\xB2)</p></blockquote><blockquote><p>\u5E0C\u5C14\u6392\u5E8F\u662F\u5BF9\u63D2\u5165\u6392\u5E8F, \u4E5F\u79F0\u4E3A\u76F4\u63A5\u63D2\u5165\u6392\u5E8F\u7684\u4F18\u5316.</p><p>\u6838\u5FC3\u601D\u8DEF\u662F\u5C06\u6570\u636E\u5148\u53D8\u6210 &quot;\u5C40\u90E8\u57FA\u672C\u6709\u5E8F\u7684\u72B6\u6001&quot; , \u518D\u4ECE\u5934\u5230\u5C3E\u8FDB\u884C\u76F4\u63A5\u63D2\u5165\u6392\u5E8F</p></blockquote><blockquote><p>\u5177\u4F53\u601D\u8DEF\u662F:</p><ol><li>\u8BBE\u5B9A\u6B65\u957F, \u6309\u7167\u6B65\u957F\u5206\u7EC4, \u8FDB\u884C\u76F4\u63A5\u63D2\u5165\u6392\u5E8F</li><li>\u9012\u51CF\u6B65\u957F, \u76F4\u5230\u4E3A1, \u8FDB\u884C\u76F4\u63A5\u63D2\u5165\u6392\u5E8F</li></ol></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">insertSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> step <span class="token operator">=</span> nums<span class="token punctuation">.</span>length
    <span class="token keyword">let</span> temp
    <span class="token keyword">let</span> j 
 
    <span class="token keyword">do</span><span class="token punctuation">{</span>
         <span class="token comment">// \u5FC5\u987B\u5411\u4E0A\u53D6\u6574, \u5426\u5219\u53EF\u80FD\u51FA\u73B0\u6B65\u957F\u53D6\u4E0D\u52301\u7684\u60C5\u51B5</span>
         step <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>step <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> 
         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> step<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
             <span class="token comment">// \u6BCF\u4E00\u7EC4\u7684\u65E0\u5E8F\u7684\u7B2C\u4E00\u4E2A\u5143\u7D20</span>
             temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    
             <span class="token comment">// \u4ECE\u6709\u5E8F\u7B2C\u4E00\u4E2A\u5143\u7D20\u5F00\u59CB\u904D\u5386\u63D2\u5165</span>
             <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> step <span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> step<span class="token punctuation">)</span><span class="token punctuation">{</span>
                 <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                     nums<span class="token punctuation">[</span>j <span class="token operator">+</span> step<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                 <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                     <span class="token keyword">break</span>
                 <span class="token punctuation">}</span>
             <span class="token punctuation">}</span>
             nums<span class="token punctuation">[</span>j <span class="token operator">+</span> step<span class="token punctuation">]</span> <span class="token operator">=</span> temp
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>step <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> nums
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">522</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5FEB\u901F\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u5FEB\u901F\u6392\u5E8F" aria-hidden="true">#</a> \u5FEB\u901F\u6392\u5E8F</h3><blockquote><p>\u8BB0\u5FC6\u70B9: \u5228\u5751\u6CD5\u4E0E\u5C0F\u4E8E\u7B49\u4E8E\u533A\u6CD5</p></blockquote><blockquote><p>\u5FEB\u6392\u7684\u6838\u5FC3\u601D\u8DEF:</p><ol><li>\u9009\u53D6\u4E00\u4E2A\u503C, \u4F5C\u4E3A\u57FA\u51C6\u503C. \u8FD9\u4E2A\u503C\u53EF\u4EE5\u662F\u4EFB\u610F\u7684</li><li>\u904D\u5386\u6570\u7EC4, \u5C06\u5C0F\u4E8E\u57FA\u51C6\u503C\u7684\u6570\u5B57\u4E22\u5230\u5DE6\u8FB9, \u5927\u4E8E\u57FA\u51C6\u503C\u7684\u6570\u5B57\u4E22\u5230\u53F3\u8FB9</li><li>\u5BF9\u5DE6, \u53F3\u8FB9\u7684\u6570\u5B57\u8FDB\u884C\u76F8\u540C\u8BE5\u64CD\u4F5C</li></ol></blockquote><blockquote><p>\u6211\u7684\u601D\u8003\u8FC7\u7A0B:</p><p>\u4EE5[ 44, 1, 2]\u4E3A\u4F8B</p><ol><li>\u5047\u5982\u9009\u53D6 \u6700\u540E\u4E00\u4E2A\u6570\u5B57\u4E3A\u57FA\u51C6\u503C, \u987A\u5E8F\u904D\u5386\u5E76\u4EA4\u6362, \u5219\u4F1A\u51FA\u73B0&quot;\u6570\u7EC4\u7A7A\u6D1E&quot;, \u5373 [ undefined,1, 2 ,44]</li><li>\u5047\u5982\u9009\u53D6 \u7B2C\u4E00\u4E2A\u6570\u5B57\u4E3A\u57FA\u51C6\u503C, \u987A\u5E8F\u4EA4\u6362\u5E76\u4EA4\u6362, \u4E5F\u53EF\u80FD\u4F1A\u51FA\u73B0\u6570\u7EC4\u7A7A\u6D1E [1 ,44 , undefined, 2]</li></ol></blockquote><blockquote><p>\u6709\u6CA1\u6709\u4E00\u79CD\u529E\u6CD5, \u4E0D\u8BA9undefined\u53C2\u4E0E\u4EA4\u6362</p><p>\u6765\u770B\u4E0B\u522B\u4EBA\u662F\u600E\u4E48\u89E3\u51B3\u7684</p></blockquote><p><strong>\u5FEB\u6392\u4E00\uFF1A \u5DE6\u53F3\u5228\u5751\u53CC\u6307\u9488\u76F4\u63A5\u63D2\u5165\u6CD5</strong></p><blockquote><p>\u601D\u8DEF: \u4EE5\u9009\u62E9\u6700\u5DE6\u503C\u4E3Apivot\u4E3A\u4F8B</p><ol><li>\u5DE6\u53F3\u6307\u9488\u6307\u5411\u5DE6\u53F3\u7684\u5751\u4F4D</li><li>\u5C06pivot\u7684\u4F4D\u7F6E\u6316\u51FA\u6765\uFF0C \u4ECE\u53F3\u8FB9\u627E\u4E00\u4E2A\u6BD4pivot\u5C0F\u7684\u6570\u653E\u8FDB\u7A7A\u4F4D\uFF0C \u53F3\u8FB9\u7559\u4E00\u4E2A\u5751</li><li>\u4ECE\u5DE6\u8FB9\u627E\u4E00\u4E2A\u6BD4pivot\u5927\u7684\u6570\u653E\u8FDB\u53F3\u8FB9\u7A7A\u4F4D\uFF0C \u5DE6\u8FB9\u7559\u4E00\u4E2A\u5751</li><li>\u91CD\u590D\u4EE5\u4E0A\u8FC7\u7A0B\uFF0C \u7559\u51FA\u4E00\u4E2A\u5751\u4F4D\uFF0C \u5C06pivot\u585E\u8FDB\u53BB</li></ol></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> <span class="token function-variable function">swap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> num1Idx<span class="token punctuation">,</span> num2Idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num1Idx <span class="token operator">===</span> num2Idx<span class="token punctuation">)</span> <span class="token keyword">return</span> arr

  <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>num2Idx<span class="token punctuation">]</span>
  arr<span class="token punctuation">[</span>num2Idx<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>num1Idx<span class="token punctuation">]</span>
  arr<span class="token punctuation">[</span>num1Idx<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">partition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span>
	
  <span class="token comment">// \u586B\u5B8C\u5DE6\u8FB9\u7684\u5751\u518D\u586B\u53F3\u8FB9\u7684\u5751\u89C6\u4E3A\u4E00\u8F6E\u64CD\u4F5C\uFF0C \u6301\u7EEDN\u8F6E</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>end <span class="token operator">&gt;</span> start<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// \u627E\u841D\u535C\uFF0C \u586B\u5DE6\u8FB9\u7684\u5751</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>end <span class="token operator">&gt;</span> start <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> pivot<span class="token punctuation">)</span><span class="token punctuation">{</span>
      end<span class="token operator">--</span>
    <span class="token punctuation">}</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> 
    <span class="token comment">// \u627E\u841D\u535C\uFF0C \u586B\u53F3\u8FB9\u7684\u5751</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">&gt;</span> start <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      start<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> pivot
  <span class="token keyword">return</span> start
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">selectSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">const</span> pivot <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span>end<span class="token punctuation">)</span>
  <span class="token function">selectSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start <span class="token punctuation">,</span> pivot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">selectSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">selectSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u5FEB\u6392\u4E8C\uFF1A \u5C0F\u4E8E\u7B49\u4E8E\u533A\u6CD5</strong></p><blockquote><p>\u601D\u8DEF\uFF1A</p><ol><li>\u5212\u4E00\u4E2A\u5C0F\u4E8E\u7B49\u4E8Epivot\u533A\uFF0C\u5E76\u89C4\u5B9A\u5C0F\u4E8E\u7B49\u4E8E\u533A\u7684\u524D\u9762\u7684\u5143\u7D20\u4E00\u5B9A\u662F\u5927\u4E8Epivot\u7684</li><li>\u904D\u5386\u6570\u7EC4\uFF0C \u5C0F\u4E8E\u7B49\u4E8Epivot\u7684\u548C\u5C0F\u4E8E\u7B49\u4E8E\u533A\u540E\u4E00\u4E2A\u4F4D\u7F6E\u505A\u4EA4\u6362\uFF0C \u5C0F\u4E8E\u7B49\u4E8E\u533A\u6269\u5927\u4E00\u4F4D</li></ol></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1123</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> <span class="token function-variable function">swap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> num1Idx<span class="token punctuation">,</span> num2Idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num1Idx <span class="token operator">===</span> num2Idx<span class="token punctuation">)</span> <span class="token keyword">return</span> arr

  <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>num2Idx<span class="token punctuation">]</span>
  arr<span class="token punctuation">[</span>num2Idx<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>num1Idx<span class="token punctuation">]</span>
  arr<span class="token punctuation">[</span>num1Idx<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">partition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> idx <span class="token operator">=</span> start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u5C0F\u4E8E\u7B49\u4E8E\u533A\u7684\u6307\u9488, \u9ED8\u8BA4\u6CA1\u6709\u4EFB\u4F55\u5143\u7D20</span>
  <span class="token keyword">let</span> pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>
      idx<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> idx
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">selectSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">const</span> pivot <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span>end<span class="token punctuation">)</span>
  <span class="token function">selectSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start <span class="token punctuation">,</span> pivot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">selectSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">selectSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5F52\u5E76\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u5F52\u5E76\u6392\u5E8F" aria-hidden="true">#</a> \u5F52\u5E76\u6392\u5E8F</h3><blockquote><p>\u5F52\u5E76\u6392\u5E8F: \u5728\u5408\u5E76\u6709\u5E8F\u8868\u7684\u57FA\u7840, \u91C7\u7528\u5206\u6CBB\u6CD5\u548C\u4E8C\u5206\u6CD5\u89E3\u51B3\u95EE\u9898</p><p>\u5DF2\u77E5\u6211\u4EEC\u638C\u63E1\u4E86\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u8868\u7684\u65B9\u6CD5(merge\u65B9\u6CD5\u7684\u5B9E\u73B0)</p><p>\u4F46\u662F\u8F93\u5165\u7684\u6570\u7EC4\u5927\u6982\u7387\u662F\u65E0\u5E8F\u7684, \u4E3A\u4E86\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898, \u6211\u4EEC\u5C06\u6570\u7EC4\u4E00\u4EFD\u4E3A\u4E8C, \u6BCF\u4E2A\u5B50\u6570\u7EC4\u5355\u72EC\u5904\u7406\u6210\u6709\u5E8F\u7684,</p><p>\u4F46\u662F\u53D1\u73B0\u4E00\u5206\u4E3A\u4E8C\u7684\u6570\u7EC4\u5404\u81EA\u4F9D\u7136\u662F\u65E0\u5E8F\u7684, \u4E3A\u4E86\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898, \u518D\u4E00\u5206\u4E3A\u4E8C</p><p>\u76F4\u5230\u88AB\u5206\u4E3A\u4E24\u4E2A\u5355\u72EC\u7684\u5143\u7D20, \u6B64\u65F6\u53EF\u4EE5\u8BA4\u4E3A\u662F\u6709\u5E8F\u7684, \u518D\u505A\u5408\u5E76</p></blockquote><blockquote><p>\u8BB0\u5FC6\u70B9: \u9012\u5F52\u4E0E\u5408\u5E76, \u5408\u5E76\u6307\u7684\u662F\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u7684\u987A\u5E8F\u8868. \u7A7A\u95F4\u6362\u65F6\u95F4</p></blockquote><blockquote><p>\u77E5\u8BC6\u70B9:</p><ol><li>\u5F52: \u6307\u7684\u662F\u9012\u5F52\u7684\u62C6\u5206\u6570\u7EC4\u5230\u6700\u540E\u4E00\u4E2A\u5143\u7D20</li><li>\u5E76: \u6307\u7684\u662F\u5408\u5E76\u4E24\u4E2A&quot;\u6709\u5E8F&quot;\u7684\u987A\u5E8F\u8868</li></ol></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> idx1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// \u904D\u5386\u7B2C\u4E00\u4E2A\u987A\u5E8F\u8868\u7684\u6307\u9488</span>
  <span class="token keyword">let</span> idx2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// \u904D\u5386\u7B2C\u4E8C\u4E2A\u987A\u5E8F\u8868\u7684\u6307\u9488</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> 
 
  <span class="token keyword">while</span><span class="token punctuation">(</span>idx1 <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> idx2 <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr2<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span><span class="token punctuation">)</span>
      idx1<span class="token operator">++</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr1<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span><span class="token punctuation">)</span>
      idx2<span class="token operator">++</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span><span class="token punctuation">,</span>arr1<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span><span class="token punctuation">)</span> 
      idx1<span class="token operator">++</span>
      idx2<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u51FA\u5FAA\u73AF\u6709\u4E09\u79CD\u60C5\u51B5:</span>
  <span class="token comment">//  a , b\u90FD\u904D\u5386\u5B8C\u4E86, \u6216\u8005a\u904D\u5386\u5B8C\u4E86 \u6216\u8005b\u904D\u5386\u5B8C\u4E86</span>
  
  <span class="token comment">// \u9000\u51FA\u5FAA\u73AF\u540E, \u53EF\u80FD\u5B58\u5728\u6709\u4E00\u4E2A\u987A\u5E8F\u8868\u6CA1\u6709\u904D\u5386\u5B8C</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length <span class="token operator">===</span> idx1<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5982\u679Carr1\u904D\u5386\u5B8C\u4E86\u5C31\u5C06\u5269\u4E0B\u7684arr2\u5143\u7D20\u653E\u8FDB\u53BB</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arr2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>idx2<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u5982\u679Carr2\u904D\u5386\u5B8C\u4E86\u5C31\u5C06\u5269\u4E0B\u7684arr1\u5143\u7D20\u653E\u8FDB\u53BB</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>idx1<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token comment">// \u9012\u5F52\u62C6\u5206\u6570\u7EC4, \u518D\u5408\u5E76</span>
<span class="token comment">// \u62C6\u5206\u5230\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u65F6\u5019, \u5C06\u5143\u7D20\u4FDD\u7559</span>
<span class="token comment">// T(n) = nums[left]\u6216\u8005 nums[right], \u5F53left = right</span>
<span class="token comment">// T(n) = merge(T(left,mid), T(mid,right)), \u5F53left &lt; right</span>
<span class="token comment">// \u5176\u4E2Dright\u9010\u6E10\u903C\u8FD1left</span>
<span class="token keyword">const</span> <span class="token function-variable function">mergeSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">===</span> left<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token comment">// 1. \u53D6\u4E2D\u70B9</span>
  <span class="token keyword">let</span> midIdx <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token comment">// 2. \u5C06\u4E24\u4E2A\u533A\u57DF\u4E0D\u65AD\u4E2D\u5206</span>
  
  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>
  	<span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> midIdx<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> midIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
 
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">22222</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u57FA\u6570\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u57FA\u6570\u6392\u5E8F" aria-hidden="true">#</a> \u57FA\u6570\u6392\u5E8F</h3><blockquote><p>\u8BB0\u5FC6\u70B9: \u6309\u7167\u4F4D\u7F6E, \u4ECE\u5C0F\u5230\u5927\u4F4D\u6570, \u6876\u6392\u5E8F</p></blockquote><blockquote><p>\u57FA\u6570\u6392\u5E8F\u57FA\u672C\u601D\u60F3\u662F\u51C6\u5907\u5341\u4E2A\u6876 \u5206\u522B\u662F0-9, \u5148\u6309\u7167\u4E2A\u4F4D\u5C06\u6570\u5B57\u6392\u5E8F, \u7136\u540E\u662F10\u4F4D \u7136\u540E\u767E\u4F4D, \u76F4\u5230\u6700\u5927\u7684\u4F4D\u6570</p><p>\u57FA\u6570\u6392\u5E8F\u7684\u7279\u70B9:</p><ol><li>\u53EA\u80FD\u6392\u5E8F\u6570\u5B57</li><li>\u4E0D\u6D89\u53CA\u5230\u4EA4\u6362</li><li>\u662F\u4E00\u79CD\u6876\u6392\u5E8F</li><li>\u662F\u7A33\u5B9A\u6392\u5E8F\u7B97\u6CD5</li></ol></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">radixSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. \u627E\u51FA\u6570\u7EC4\u7684\u6700\u5927\u6570\u5B57\u7684\u4F4D\u6570</span>
  <span class="token keyword">let</span> maxValue <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">{</span>
      maxValue <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">const</span> maxPlace <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>maxValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length
  
  <span class="token comment">// 2. \u51C6\u59070~9\u5341\u4E2A\u6876</span>
  <span class="token keyword">const</span> buckets<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">let</span> num<span class="token punctuation">,</span>
      bucket
  <span class="token comment">// 3.\u5FAA\u73AF, \u6BCF\u8F6E\u5FAA\u73AF\u6309\u7167\u4F4D\u6570\u8FDB\u884C\u6392\u5E8F</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxPlace<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// \u83B7\u53D6\u5BF9\u5E94\u4F4D\u6570</span>
     	num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">10</span>
      <span class="token comment">// \u5C06\u6570\u5B57\u653E\u8FDB\u5BF9\u5E94\u7684\u6876\u4E2D</span>
        buckets<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u4ECE\u5DE6\u5230\u53F3, \u4ECE\u4E0A\u5230\u4E0B\u904D\u5386\u6876\u4E2D\u7684\u6570\u5B57, \u5E76\u5C06\u5176\u653E\u56DE\u539F\u6570\u7EC4\u4E2D</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> buckets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      bucket <span class="token operator">=</span>  buckets<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span>bucket<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> nums
<span class="token punctuation">}</span>


console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">322</span><span class="token punctuation">,</span><span class="token number">4222</span><span class="token punctuation">,</span><span class="token number">145</span><span class="token punctuation">,</span><span class="token number">778</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5806\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u5806\u6392\u5E8F" aria-hidden="true">#</a> \u5806\u6392\u5E8F</h3><blockquote><p>\u6CE8\u610F\u70B9 : \u5185\u5B58\u4E2D\u7684\u5806\u533A\u548C\u6570\u636E\u7ED3\u6784\u4E2D\u7684\u5806\u5E76\u4E0D\u662F\u4E00\u4E2A\u6982\u5FF5</p></blockquote><blockquote><p>\u4EC0\u4E48\u662F\u5806\u6392\u5E8F?</p><ol><li>\u5B8C\u5168\u4E8C\u53C9\u6811\u662F\u6307\u6811\u5728\u5E7F\u5EA6\u4F18\u5148\u904D\u5386\u65F6\u5019, \u8282\u70B9\u7684\u5E8F\u53F7\u548C\u5176\u5BF9\u5E94\u7684\u6EE1\u4E8C\u53C9\u6811\u4E00\u81F4\u7684\u6811</li><li>\u5806\u5206\u4E3A\u5927\u9876\u5806\u548C\u5C0F\u9876\u5806. \u5927\u9876\u5806\u662F\u7236\u8282\u70B9\u5927\u4E8E\u7B49\u4E8E\u5B50\u8282\u70B9\u7684\u5B8C\u5168\u4E8C\u53C9\u6811, \u5C0F\u9876\u5806\u662F\u7236\u8282\u70B9\u5C0F\u4E8E\u7B49\u4E8E\u5B50\u8282\u70B9\u7684\u5B8C\u5168\u4E8C\u53C9\u6811</li><li>\u7EBF\u7D22\u5316\u4E8C\u53C9\u6811\u6307\u7684\u662F\u5C06\u6811\u6309\u7167\u8282\u70B9\u7684\u5E8F\u53F7\u5B58\u5165\u6570\u7EC4, \u4EE5\u6570\u7EC4\u7684\u5F62\u5F0F\u8868\u793A\u4E8C\u53C9\u6811\u7684\u65B9\u6CD5. \u5176\u4E2D\u67D0\u4E00\u8282\u70B9\u7684\u7D22\u5F15\u82E5\u4E3A i, \u5176\u5DE6\u5B50\u8282\u70B9\u7684\u7D22\u5F15\u4E3A 2i + 1, \u5176\u53F3\u8282\u70B9\u7684\u7D22\u5F15\u4E3A2i + 2. \u5176\u7236\u8282\u70B9\u7D22\u5F15\u4E3A (i - 1 ) / 2\u5E76\u5411\u4E0B\u53D6\u6574</li></ol></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">swap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>idx1<span class="token punctuation">,</span>idx2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>idx1 <span class="token operator">===</span> idx2<span class="token punctuation">)</span> <span class="token keyword">return</span> 
  arr<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span>
  arr<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span> <span class="token comment">// arr[idx1] ^ arr[idx2] ^ arr[idx2] = arr[idx1]</span>
  arr<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span> <span class="token comment">// arr[idx1] ^ arr[idx1] ^ arr[idx2] = arr[idx2]</span>
<span class="token punctuation">}</span>

<span class="token comment">// heapAdjust\u51FD\u6570\u662F\u6307\u5C06\u4E00\u4E2A\u9664\u6839\u8282\u70B9\u5916\u5747\u6EE1\u8DB3\u6700\u5927\u5806\u6027\u8D28\u7684\u4E8C\u53C9\u6811\u8C03\u6574\u4E3A\u5806\u7684\u51FD\u6570</span>
<span class="token comment">// \u601D\u8DEF\u662F: 1. \u4ECE\u6839\u8282\u70B9\u89E6\u53D1, \u4E09\u9009\u4E00, \u5C06\u6700\u5927\u7684\u6570\u5B57\u653E\u5728\u6839\u8282\u70B9\u4E0A, </span>
<span class="token comment">//        2. \u7531\u4E8E\u8C03\u6362\u4E86\u5B50\u6811\u7684\u6839\u8282\u70B9(\u53EF\u80FD\u662F\u5DE6\u5B50\u6811\u4E5F\u53EF\u80FD\u662F\u53F3\u5B50\u6811), \u90A3\u4E48\u9700\u8981\u4E00\u76F4\u8C03\u6574\u5B50\u6811\u76F4\u5230\u6CA1\u6709\u5B50\u6811\u4E3A\u6B62. </span>
<span class="token comment">//        3. \u5176\u8FC7\u7A0B\u753B\u56FE\u53EF\u4EE5\u77E5\u9053: \u662F\u4ECE\u5F85\u8C03\u6574\u8282\u70B9\u5F00\u59CB\u5230\u76EE\u6807\u8282\u70B9, \u6700\u5927\u8282\u70B9\u4E0D\u65AD\u4E0A\u79FB\u7684\u8FC7\u7A0B</span>
<span class="token keyword">const</span> <span class="token function-variable function">heapAdjust</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>parent<span class="token punctuation">,</span>endIdx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>parent<span class="token punctuation">]</span> <span class="token comment">// \u8981\u505A\u63D2\u5165, \u5148\u4FDD\u5B58\u5373\u5C06\u88AB\u8986\u76D6\u7684\u7236\u8282\u70B9</span>
    <span class="token comment">// i\u4E3A\u5DE6\u8282\u70B9, i+1\u4E3A\u53F3\u8282\u70B9</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> parent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> endIdx<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// \u65E0\u8D8A\u754C, \u4E14\u5DE6\u8282\u70B9\u6BD4\u53F3\u8282\u70B9\u5C0F</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> endIdx <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        i<span class="token operator">++</span> <span class="token comment">//\u5C06i\u8BBE\u7F6E\u4E3A\u53F3\u8282\u70B9, \u4E00\u4F1A\u8981\u6CBF\u7740i\u904D\u5386\u5B50\u6811</span>
      <span class="token punctuation">}</span>
      
      <span class="token comment">// \u7236\u8282\u70B9\u662F\u6700\u5927\u7684\u8282\u70B9, \u4E0D\u7528\u4EA4\u6362.</span>
      <span class="token comment">// \u8FD9\u79CD\u60C5\u51B5\u4E0B\u4E5F\u4E0D\u7528\u68C0\u67E5\u5176\u5B50\u6811\u4E86. \u56E0\u4E3A\u5B50\u6811\u9ED8\u8BA4\u6EE1\u8DB3\u5927\u9876\u5806\u6027\u8D28</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">&gt;=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">break</span>
      <span class="token punctuation">}</span>
      
      <span class="token comment">// \u5DE6\u53F3\u5176\u4E2D\u4E4B\u4E00\u7684\u8282\u70B9\u662F\u5927\u8282\u70B9, \u9700\u8981\u79FB\u52A8</span>
      arr<span class="token punctuation">[</span>parent<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> 
      <span class="token comment">// \u79FB\u52A8\u540E, \u88AB\u4EA4\u6362\u7684\u5B50\u6811\u672A\u5FC5\u662F\u5927\u9876\u5806\u4E86, \u6240\u4EE5\u9700\u8981\u7EE7\u7EED\u68C0\u67E5</span>
      <span class="token comment">// \u7EE7\u7EED\u5FAA\u73AF\u5C31\u662F\u4E0B\u4E00\u8F6E\u7684\u68C0\u67E5</span>
      
      <span class="token comment">// parent\u662F\u8BB0\u5F55\u7684\u4E0B\u4E00\u8F6E\u5FAA\u73AF\u4E2D\u7684\u7236\u8282\u70B9</span>
      parent <span class="token operator">=</span> i
    <span class="token punctuation">}</span>
  
 	<span class="token comment">// \u9000\u51FA\u5FAA\u73AF\u65F6\u5019,parent\u7684\u6307\u5411\u4E3A:</span>
    <span class="token comment">// \u8981\u4E48\u662F\u5230\u8FBE\u53F6\u5B50\u8282\u70B9\u4E86, \u6B64\u65F6parent\u6307\u5411\u53F6\u5B50\u7ED3\u70B9</span>
    <span class="token comment">// \u8981\u4E48\u662Ftemp\u5927\u4E8E\u67D0\u68F5\u5B50\u6811\u7684\u5DE6\u53F3\u8282\u70B9</span>
  	<span class="token comment">// \u6240\u4EE5\u5E94\u8BE5\u63D2\u5165\u5230parent</span>
  arr<span class="token punctuation">[</span>parent<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">heapSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u6784\u5EFA\u5806\u7684\u8FC7\u7A0B\u662F\u4ECE\u6700\u540E\u4E00\u4E2A\u7236\u8282\u70B9\u9006\u5E8F\u7684, \u56E0\u4E3A\u4ECE\u5934\u7ED3\u70B9\u5F00\u59CB\u4F1A\u4EA7\u751F\u8D85\u7EA7\u591A\u7684\u56DE\u6EAF</span>
  <span class="token comment">// \u4ECE\u6700\u540E\u4E00\u4E2A\u8282\u70B9\u5F00\u59CB\u53EF\u4EE5\u5012\u53D9\u5F00\u59CB, \u53EF\u4EE5\u4FDD\u8BC1\u6BCF\u6B21\u6784\u5EFA\u4E00\u68F5\u6811\u7684\u65F6\u5019, \u5DE6\u53F3\u5B50\u6811\u90FD\u662F\u6700\u5927\u5806</span>
  <span class="token keyword">const</span> lastNodeIdx <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> lastNodeIdx<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">heapAdjust</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// \u5806\u6392\u5E8F\u7684\u8FC7\u7A0B</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// \u4EA4\u4E92\u6700\u540E\u4E00\u4E2A\u4E0E\u6839\u8282\u70B9</span>
    <span class="token function">heapAdjust</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// \u91CD\u65B0\u8C03\u6574\u4E3A\u5927\u9876\u5806</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">4333</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u8BA1\u6570\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u8BA1\u6570\u6392\u5E8F" aria-hidden="true">#</a> \u8BA1\u6570\u6392\u5E8F</h3><h3 id="\u6876\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u6876\u6392\u5E8F" aria-hidden="true">#</a> \u6876\u6392\u5E8F</h3><h2 id="\u56DB\u79CD\u67E5\u627E\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u56DB\u79CD\u67E5\u627E\u7B97\u6CD5" aria-hidden="true">#</a> \u56DB\u79CD\u67E5\u627E\u7B97\u6CD5</h2><h3 id="\u7EBF\u6027\u67E5\u627E" tabindex="-1"><a class="header-anchor" href="#\u7EBF\u6027\u67E5\u627E" aria-hidden="true">#</a> \u7EBF\u6027\u67E5\u627E</h3><h3 id="\u4E8C\u5206\u67E5\u627E" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u5206\u67E5\u627E" aria-hidden="true">#</a> \u4E8C\u5206\u67E5\u627E</h3><p><strong>\u9012\u5F52\u6CD5</strong></p><blockquote><p>\u8FD9\u79CD\u9012\u5F52\u662F\u4EFF\u7167\u7684\u5F52\u5E76\u6392\u5E8F\u7684, \u5176\u4E0D\u7528\u8981\u6C42\u6709\u5E8F\u6570\u7EC4. \u4F46\u662F\u590D\u6742\u5EA6\u8F83\u9AD8</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">findX</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span>target<span class="token punctuation">,</span>left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">===</span> left<span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">===</span> target <span class="token operator">?</span> right <span class="token operator">:</span> <span class="token keyword">null</span>
  
  <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> res1 <span class="token operator">=</span> <span class="token function">findX</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> left <span class="token punctuation">,</span> mid<span class="token punctuation">)</span>
  <span class="token keyword">let</span> res2 <span class="token operator">=</span> <span class="token function">findX</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>
  
  <span class="token keyword">return</span> res1 <span class="token operator">||</span> res2
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findX</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">231</span><span class="token punctuation">,</span><span class="token number">12123</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u603B\u7ED3: \u4E0A\u9762\u8FD9\u4E2A\u9012\u5F52\u7684\u4E8C\u5206\u6CD5\u67E5\u8BE2\u65F6\u5019, \u6211\u5199\u6210 mid = (right - left) / 2</p><p>\u5BFC\u81F4\u7A0B\u5E8F\u5F02\u5E38.</p><p>\u8FD9\u662F\u7531\u4E8E\u6CA1\u6709\u7406\u89E3\u4E2D\u70B9\u7684\u6C42\u89E3. \u73B0\u5728\u68B3\u7406\u4E0B\u4E2D\u70B9\u7684\u6C42\u89E3\u65B9\u5F0F</p><p>\u5047\u5982\u6709\u4E00\u6761\u7EBF\u6BB5\u5728\u76F4\u89D2\u5750\u6807\u7CFB\u4E0B\u7684\u5750\u6807\u5982\u4E0B: \u5176\u4E2D ?\u70B9\u4EE3\u8868 4--10\u7684\u4E2D\u70B9, \u6C42?\u70B9\u7684X\u5DE6\u8FB9</p><p>|------------(4,0)--------------(?,0)---------------(10,0)|</p><p>\u65B9\u5F0F\u4E00: 4 + (10 - 4) / 2 = 7. (10 - 4) / 2\u6C42\u5F97\u662F4 \u5230 ?\u70B9 \u7684\u957F\u5EA6, \u518D+4 \u5373\u4E3A?\u70B9\u7684X\u5750\u6807</p><p>\u65B9\u5F0F\u4E8C: (4 + 10) / 2 = 7. \u4E0A\u9762\u7EBF\u6BB5\u53EF\u4EE5\u6539\u53D8\u4E0B\u5F62\u5F0F, 10\u957F\u5EA6\u7684\u540E\u9762\u518D\u52A0\u4E0A4\u957F\u5EA6\u7684\u7EBF\u6BB5, \u7531\u4E8E\u5DE6\u53F3\u90FD\u662F4\u957F\u5EA6, \u91CD\u70B9\u90FD\u662F?, \u6240\u4EE5?\u4E3A (\u5DE6\u957F\u5EA6 + \u53F3\u957F\u5EA6) / 2</p></blockquote><p><strong>\u5FAA\u73AF\u6CD5</strong></p><blockquote><p>\u5FAA\u73AF\u6CD5\u548C\u9012\u5F52\u6CD5\u4E0D\u540C\u7684\u662F, \u5FAA\u73AF\u6CD5\u53EA\u80FD\u5728\u6709\u5E8F\u7684\u6570\u7EC4\u4E2D\u627E\u67D0\u4E2A\u5143\u7D20, \u800C\u9012\u5F52\u6CD5\u53EF\u4EE5\u65E0\u5E8F\u7684\u6570\u7EC4\u4E2D\u627E\u67D0\u4E2A\u5143\u7D20</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">binarySearch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span>target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token keyword">let</span> mid
  <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&gt;=</span> left<span class="token punctuation">)</span><span class="token punctuation">{</span>
    mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> mid
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
      left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
      right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u63D2\u503C\u67E5\u627E" tabindex="-1"><a class="header-anchor" href="#\u63D2\u503C\u67E5\u627E" aria-hidden="true">#</a> \u63D2\u503C\u67E5\u627E</h3><h3 id="\u6590\u6CE2\u90A3\u5951\u67E5\u627E" tabindex="-1"><a class="header-anchor" href="#\u6590\u6CE2\u90A3\u5951\u67E5\u627E" aria-hidden="true">#</a> \u6590\u6CE2\u90A3\u5951\u67E5\u627E</h3><h2 id="\u516B\u79CD\u6570\u636E\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u516B\u79CD\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a> \u516B\u79CD\u6570\u636E\u7ED3\u6784</h2><h3 id="\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u6570\u7EC4" aria-hidden="true">#</a> \u6570\u7EC4</h3><h4 id="\u7A00\u758F\u6570\u7EC4\u4E0E\u4E09\u5143\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u7A00\u758F\u6570\u7EC4\u4E0E\u4E09\u5143\u7EC4" aria-hidden="true">#</a> \u7A00\u758F\u6570\u7EC4\u4E0E\u4E09\u5143\u7EC4</h4><p>\u5047\u5982\u6709\u8FD9\u6837\u4E00\u4E2A 8*8\u7684\u68CB\u76D8, \u7528\u6570\u7EC4\u53BB\u5B58\u50A8\u67D0\u4E2A\u68CB\u5C40, \u4F60\u4F1A\u600E\u4E48\u50A8\u5B58?</p><ol><li>\u4F7F\u7528\u4E00\u4E2A\u4E8C\u7EF4\u6570\u7EC4\u5B58\u50A8\u68CB\u76D8\u6570\u636E, \u5176\u4E2D\u4E8C\u7EF4\u6570\u7EC4\u7684\u957F\u5EA6\u4EE3\u8868\u68CB\u5C40\u7684\u5BBD. \u4E8C\u7EF4\u6570\u7EC4\u4E2D\u7684\u6BCF\u4E2A\u6570\u7EC4\u4EE3\u8868\u68CB\u5C40\u7684\u884C</li><li>\u4F7F\u7528\u4E00\u4E9B\u6807\u8BB0\u8BB0\u5F55\u9ED1\u68CB\u5B50\u548C\u767D\u68CB\u7684\u4F4D\u7F6E\u4FE1\u606F, \u51FA\u4E8E\u5360\u7528\u5185\u5B58\u5927\u5C0F\u7684\u8003\u8651, 0 \u548C 1\u662F\u4E0D\u9519\u7684\u539F\u5219, \u53EF\u4EE5\u75280\u8868\u793A\u767D, 1\u8868\u793A\u9ED1</li></ol><p>\u8FD9\u6837\u7684\u60F3\u6CD5\u5F88\u68D2, \u4F46\u662F\u6709\u7740\u5F88\u5927\u7684\u6539\u8FDB\u7A7A\u95F4: \u7531\u4E8E\u4E0B\u68CB\u7684\u89C4\u5219\u6240\u81F4, \u5BFC\u81F4\u68CB\u5B50\u8F83\u5C11, \u7A7A\u4F4D\u8F83\u591A, \u8FD9\u79CD\u5B58\u50A8\u52BF\u5FC5\u4F1A\u6D6A\u8D39\u5927\u91CF\u7684\u5185\u5B58\u8BB0\u5F55\u7A7A\u4F4D, \u8FD9\u79CD\u65B9\u6848\u5F62\u6210\u7684\u6570\u7EC4\u79F0\u4E3A\u7A00\u758F\u6570\u7EC4</p><p>\u4E3A\u4E86\u89E3\u51B3\u6D6A\u8D39\u5185\u5B58\u7684\u95EE\u9898, \u53EF\u4EE5\u7528\u4E09\u5143\u7EC4\u53BB\u4EE3\u66FF\u7A00\u758F\u6570\u7EC4\u7684\u5B58\u50A8\u7684\u65B9\u5F0F</p><p>\u4E09\u5143\u7EC4\u6307\u6709\u4E09\u4E2A\u53D8\u91CF\u7684\u6570\u7EC4, \u662F\u4E00\u4E2A3\u5217n\u884C\u7684\u6570\u7EC4. \u5728\u8FD9\u4E2A\u6848\u4F8B\u4E2D, \u53EF\u4EE5\u53EA\u8BB0\u5F55\u67D0\u4E2A\u68CB\u5B50\u7684x,y\u5750\u6807, \u4EE5\u53CA\u68CB\u5B50\u7684\u72B6\u6001: \u662F\u9ED1\u5B50\u8FD8\u662F\u767D\u5B50. \u4EE5\u53CA\u53EF\u4EE5\u5B9A\u4E49\u67D0\u4E00\u884C\u5355\u72EC\u5B9A\u4E49\u6574\u4E2A\u68CB\u76D8\u7684\u884C\u6570\u4E0E\u5217\u6570\u548C\u603B\u68CB\u5B50\u6570, \u4EE5\u8FBE\u5230\u8282\u7701\u5185\u5B58\u7684\u6548\u679C</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">toTripleArr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sparseArr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u521B\u5EFA\u4E09\u5143\u7EC4</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> sparseArr<span class="token punctuation">.</span>length
  <span class="token keyword">const</span> tripleArr <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>len<span class="token punctuation">,</span> len <span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
  <span class="token keyword">let</span> allCount <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> point <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token comment">// \u7B2C\u4E00\u5217\u4E3Ax\u5750\u6807</span>
        point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token comment">// \u7B2C\u4E8C\u5217\u4E3Ay\u5750\u6807</span>
        point<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token comment">// \u7B2C\u4E09\u5217\u8BB0\u5F55\u503C</span>
        tripleArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>
        allCount<span class="token operator">++</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  tripleArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> allCount
  <span class="token keyword">return</span> tripleArr
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">toSparseArr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">tripleArr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> sarseArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> tripleArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    sarseArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tripleArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">const</span> x <span class="token operator">=</span> tripleArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      <span class="token keyword">const</span> y <span class="token operator">=</span> tripleArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
      <span class="token keyword">const</span> value <span class="token operator">=</span> tripleArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
      sarseArr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> value
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sarseArr
<span class="token punctuation">}</span>

<span class="token keyword">const</span> sparseArr <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>

console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token function">toSparseArr</span><span class="token punctuation">(</span><span class="token function">toTripleArr</span><span class="token punctuation">(</span>sparseArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u94FE\u8868" aria-hidden="true">#</a> \u94FE\u8868</h3><h4 id="\u5355\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u5355\u94FE\u8868" aria-hidden="true">#</a> \u5355\u94FE\u8868</h4><h4 id="\u53CC\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u53CC\u94FE\u8868" aria-hidden="true">#</a> \u53CC\u94FE\u8868</h4><h4 id="\u5FAA\u73AF-\u73AF\u5F62-\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u5FAA\u73AF-\u73AF\u5F62-\u94FE\u8868" aria-hidden="true">#</a> \u5FAA\u73AF(\u73AF\u5F62)\u94FE\u8868</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next <span class="token operator">||</span> <span class="token keyword">null</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">RingLinkedList</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>

    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el<span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> node
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> node
        node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
        <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> node

    <span class="token punctuation">}</span>

    <span class="token function">del</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
        <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail
        <span class="token keyword">let</span> isFind <span class="token operator">=</span> <span class="token boolean">false</span>    
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>data <span class="token operator">===</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                isFind <span class="token operator">=</span> <span class="token boolean">true</span>
                <span class="token keyword">break</span>
            <span class="token punctuation">}</span>
            parent <span class="token operator">=</span> cur
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isFind <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>data <span class="token operator">===</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
            isFind <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>isFind<span class="token punctuation">)</span><span class="token punctuation">{</span>
            parent<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
            <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> parent
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>

    <span class="token function">get</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head

        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>data <span class="token operator">===</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> cur
            <span class="token punctuation">}</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>data <span class="token operator">===</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> cur
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>

    <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">oldData<span class="token punctuation">,</span> newData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>oldData<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">.</span>data <span class="token operator">=</span> newData
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>

    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>data <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
            str <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> ---&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cur<span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">}</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RingLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
n<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
n<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
n<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span>
n<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">22221</span><span class="token punctuation">)</span>
n<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2211</span><span class="token punctuation">)</span>
n<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token number">2211</span><span class="token punctuation">)</span>
n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u961F\u5217" tabindex="-1"><a class="header-anchor" href="#\u961F\u5217" aria-hidden="true">#</a> \u961F\u5217</h3><h4 id="\u666E\u901A\u961F\u5217" tabindex="-1"><a class="header-anchor" href="#\u666E\u901A\u961F\u5217" aria-hidden="true">#</a> \u666E\u901A\u961F\u5217</h4><blockquote><p>\u7279\u70B9: \u5148\u8FDB\u5148\u51FA.</p><p>\u5B9E\u9645\u5E94\u7528: \u9700\u8981\u6392\u961F\u548C\u8C03\u5EA6\u7684\u573A\u666F\u5E7F\u6CDB\u5E94\u7528: \u6BD4\u5982JS\u7684\u5404\u79CD\u5B8F/\u5FAE\u4EFB\u52A1\u961F\u5217, Vue\u5E95\u5C42\u7684nexttick\u76F8\u5173\u7684\u8C03\u5EA6\u961F\u5217, promise\u8C03\u7528then\u65B9\u6CD5\u7684\u591A\u4E2A\u56DE\u8C03\u51FD\u6570\u4E5F\u9700\u8981\u8C03\u5EA6\u961F\u5217.....</p></blockquote><blockquote><p>\u7279\u70B9: \u8FD9\u4E2A\u6570\u636E\u7ED3\u6784\u7684\u5B9E\u73B0\u5F88\u5DE7\u5999, <strong>\u51FA\u961F\u5217\u5E76\u4E0D\u662F\u7269\u7406\u5220\u9664, \u800C\u662F\u901A\u52A8\u6307\u9488, \u5728\u903B\u8F91\u4E0A\u5220\u9664. \u76F8\u540C\u7684\u601D\u8DEF\u8FD8\u6709\u5806\u6392\u5E8F\u4E2D\u5220\u9664\u5C3E\u5DF4\u8282\u70B9\u4E5F\u662F\u901A\u8FC7\u903B\u8F91\u4E0A\u5220\u9664</strong></p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
  front <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// \u7528\u4E8E\u6307\u5B9A\u961F\u5217\u7684\u5F00\u7AEF</span>
  tail <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// \u6307\u5411\u961F\u5217\u5C3E\u5DF4\u7A7A\u683C\u5143\u7D20</span>
  arr
  size
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// tail\u662F\u6307\u9488\u4E5F\u662F\u7D22\u5F15, \u76F4\u63A5\u88AB\u7528\u6765\u6DFB\u52A0\u5143\u7D20,\u5F53\u7B49\u4E8Esize\u7684\u65F6\u5019\u5373\u51FA\u754C\u4E86 </span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size
  <span class="token punctuation">}</span>

  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// \u6709\u4E24\u79CD\u60C5\u51B5</span>
    <span class="token comment">// 1. \u521D\u59CB\u5316</span>
    <span class="token comment">// 2. \u51FA\u961F\u5217\u7684\u6307\u9488\u903C\u8FD1\u5230\u4E86\u5C3E\u6307\u9488</span>
	<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail
  <span class="token punctuation">}</span>
	
  <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token parameter">ele</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token operator">++</span><span class="token punctuation">]</span>	   
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// \u53EA\u5728\u903B\u8F91\u4E0A\u5220\u9664, \u5E76\u975E\u5728\u7269\u7406\u4E0A\u5220\u9664</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>front<span class="token operator">++</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u4F18\u5148\u7EA7\u961F\u5217" tabindex="-1"><a class="header-anchor" href="#\u4F18\u5148\u7EA7\u961F\u5217" aria-hidden="true">#</a> \u4F18\u5148\u7EA7\u961F\u5217</h4><blockquote><p>\u4F18\u5148\u961F\u5217\u53EF\u4EE5\u4F7F\u7528\u5806\u5B9E\u73B0</p></blockquote><blockquote><p>\u5728\u4EE5\u4E0B\u4E09\u79CD\u60C5\u51B5\u9700\u8981\u8C03\u6574\u5806</p><ol><li>\u9664\u4E86\u6839\u8282\u70B9\u90FD\u6EE1\u8DB3\u5806\u7684\u6027\u8D28 <ul><li>\u6B64\u65F6\u4E3A\u4ECE\u4E0A\u5230\u4E0B\u8C03\u6574, \u4E09\u9009\u4E00\u6700\u5927\u7684\u653E\u5728\u7236\u8282\u70B9\u4E0A, \u5E76\u4E14\u5BF9\u88AB\u4EA4\u6362\u8282\u70B9\u9012\u5F52\u8FD9\u4E2A\u64CD\u4F5C, \u8981\u6CE8\u610F\u8D8A\u754C\u95EE\u9898</li></ul></li><li>\u9664\u4E86\u672B\u5C3E\u8282\u70B9\u90FD\u6EE1\u8DB3\u5BF9\u7684\u6027\u8D28 <ul><li>\u8FD9\u662F\u4E3A\u4ECE\u4E0B\u5230\u4E0A\u8C03\u6574, \u4E09\u9009\u4E00\u653E\u5728\u7236\u8282\u70B9, \u5E76\u4E14\u5BF9\u88AB\u4EA4\u6362\u8282\u70B9\u9012\u5F52\u8FD9\u4E2A\u64CD\u4F5C,\u5E76\u4E14\u9012\u5F52\u7236\u8282\u70B9</li></ul></li><li>\u6570\u7EC4\u662F\u4E71\u5E8F, \u9700\u8981\u751F\u6210\u5806 <ul><li>\u91C7\u7528\u4ECE\u6700\u540E\u4E00\u4E2A\u7236\u8282\u70B9\u51FA\u53D1, \u5012\u53D9\u904D\u5386\u6240\u6709\u6839\u8282\u70B9. \u518D\u7ED3\u5408\u65B9\u6CD52\u7684\u4ECE\u4E0B\u5411\u4E0A\u8C03\u6574\u5806\u7684\u65B9\u5F0F\u751F\u6210\u5806</li></ul></li></ol></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">PriorityQueue</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u4F7F\u7528\u6570\u7EC4\u5B58\u50A8\u4F18\u5148\u7EA7\u961F\u5217</span>
    heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>

    <span class="token function">parent</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span>j</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
	<span class="token doc-comment comment">/**
	  <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span> Array<span class="token punctuation">&lt;</span><span class="token punctuation">{</span>ele<span class="token operator">:</span>any<span class="token punctuation">,</span> priority<span class="token operator">:</span>number<span class="token punctuation">}</span><span class="token punctuation">&gt;</span> <span class="token punctuation">}</span></span> <span class="token parameter">arr</span>  \u5FC5\u987B\u8981\u6C42arr\u4E2D\u7684\u5143\u7D20\u5F62\u72B6 
	*/</span>
    <span class="token function">buildHeap</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>heap <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">const</span> lastNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> lastNode<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">heapDown</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">heapUp</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// \u4F20\u5165\u63D2\u5165\u8282\u70B9\u7684\u7D22\u5F15\u503C, \u4E0D\u65AD\u5411\u4E0A\u5BFB\u627E\u7236\u4EB2\u6BD4\u8F83</span>
        <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>parent <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>priority <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">.</span>priority<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span>i<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">heapUp</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">heapDown</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// \u4ECE\u4E0B\u5230\u4E0A\u8C03\u6574\u4E3A\u4E8C\u53C9\u6811</span>
        <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span>
        
        <span class="token keyword">let</span> max <span class="token operator">=</span> i    
        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>priority <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">.</span>priority<span class="token punctuation">)</span><span class="token punctuation">{</span>
            max <span class="token operator">=</span> left
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>priority <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">.</span>priority<span class="token punctuation">)</span><span class="token punctuation">{</span>
            max <span class="token operator">=</span> right
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">!==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> max<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">heapDown</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        
    <span class="token punctuation">}</span>
    
    <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span>priority</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token punctuation">{</span>ele<span class="token punctuation">,</span>priority<span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        <span class="token comment">// \u63D2\u5165\u662F\u5411\u4E0A\u8C03\u6574</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">heapUp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>   
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// \u5220\u9664\u7236\u8282\u70B9</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> res
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">heapDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> res

            
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// queue.enqueue(1,10)</span>
<span class="token comment">// queue.enqueue(1,15)</span>
<span class="token comment">// queue.enqueue(1,20)</span>
<span class="token comment">// queue.enqueue(1,5)</span>
<span class="token comment">// queue.enqueue(1,3)</span>
<span class="token comment">// queue.enqueue(1,66)</span>
<span class="token comment">// queue.enqueue(1,100)</span>
<span class="token comment">// console.log(queue.dequeue())</span>
queue<span class="token punctuation">.</span><span class="token function">buildHeap</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token literal-property property">ele</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">priority</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">ele</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">priority</span><span class="token operator">:</span><span class="token number">222</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">ele</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">priority</span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">ele</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">priority</span><span class="token operator">:</span><span class="token number">133</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">ele</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">priority</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">ele</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">priority</span><span class="token operator">:</span><span class="token number">110</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">ele</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">priority</span><span class="token operator">:</span><span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">ele</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">priority</span><span class="token operator">:</span><span class="token number">10111</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">)</span>



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u5FAA\u73AF-\u73AF\u5F62-\u961F\u5217" tabindex="-1"><a class="header-anchor" href="#\u5FAA\u73AF-\u73AF\u5F62-\u961F\u5217" aria-hidden="true">#</a> \u5FAA\u73AF(\u73AF\u5F62)\u961F\u5217</h4><blockquote><p>\u961F\u5217\u662F\u4F7F\u7528\u6570\u7EC4\u5B9E\u73B0, \u662F\u4E00\u79CD\u7EBF\u6027\u8868, \u4E0D\u5B58\u5728\u771F\u6B63\u7684\u73AF\u5F62\u7ED3\u6784. \u73AF\u5F62\u961F\u5217\u662F\u901A\u8FC7\u903B\u8F91\u4E0A, \u8425\u9020\u51FA\u73AF\u5F62\u7684\u611F\u89C9</p></blockquote><p><strong>\u4F7F\u7528\u8BA1\u6570\u5668\u5B9E\u73B0\u73AF\u5F62\u961F\u5217</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">RingQueue</span> <span class="token punctuation">{</span>
  maxSize
  arr
  rear <span class="token operator">=</span> <span class="token number">0</span>
  front <span class="token operator">=</span> <span class="token number">0</span>
  count <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token function">constuctor</span><span class="token punctuation">(</span><span class="token parameter">maxSize</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize
  <span class="token punctuation">}</span>
  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">===</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token parameter">ele</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> ele
      <span class="token keyword">this</span><span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size 
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> res 
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>front<span class="token punctuation">]</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">--</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u4E0D\u4F7F\u7528\u8BA1\u6570\u5668\u5B9E\u73B0\u73AF\u5F62\u961F\u5217</strong></p><blockquote><p>\u96BE\u70B9:</p><ol><li>isFull\u65B9\u6CD5\u548CisEmpty\u65B9\u6CD5\u7684\u903B\u8F91</li><li>size\u65B9\u6CD5\u7684\u903B\u8F91</li></ol><p>\u4E0D\u9002\u7528\u8BA1\u6570\u5668\u7684\u5B9E\u73B0,\u7406\u89E3\u8D77\u6765\u5F88\u96BE, \u6709\u7A7A\u7814\u7A76\u4E0B</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">CircleQueue</span> <span class="token punctuation">{</span>
  front <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// \u5934\u6307\u9488\u6307\u5411\u961F\u5217\u7B2C\u4E00\u4E2A\u5143\u7D20</span>
  rear <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// \u5C3E\u6307\u9488\u6307\u5411\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u7684\u540E\u4E00\u4E2A\u5143\u7D20</span>
  arr <span class="token comment">// \u7528\u6570\u7EC4\u4FDD\u5B58\u6570\u7EC4\u5143\u7D20</span>
  maxSize <span class="token comment">// \u4FDD\u5B58\u6570\u7EC4\u6700\u5927\u957F\u5EA6</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">maxSize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize
  <span class="token punctuation">}</span>

  <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>front
  <span class="token punctuation">}</span>

  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rear <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>front
  <span class="token punctuation">}</span>

  <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5982\u679C\u961F\u5217\u6CA1\u6709\u6EE1\u518D\u6DFB\u52A0</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> num
      <span class="token keyword">this</span><span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>front<span class="token punctuation">]</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize
      <span class="token keyword">return</span> value
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
    \u7531\u4E8E\u961F\u5217\u662F\u73AF\u5F62\u7684\uFF0C\u56E0\u6B64\u9700\u8981\u8003\u8651 front \u548C rear \u7684\u4F4D\u7F6E\u5173\u7CFB\u3002\u5982\u679C rear \u5927\u4E8E front\uFF0C\u5219\u76F4\u63A5\u76F8\u51CF\u5F97\u5230\u961F\u5217\u5927\u5C0F\uFF1B\u5982\u679C rear \u5C0F\u4E8E\u7B49\u4E8E front\uFF0C\u5219\u9700\u8981\u52A0\u4E0A\u6570\u7EC4\u957F\u5EA6 maxSize\uFF0C\u518D\u51CF\u53BB front\uFF0C\u6700\u540E\u5BF9 maxSize \u53D6\u6A21\uFF0C\u5F97\u5230\u961F\u5217\u5927\u5C0F\u3002\u8FD9\u91CC\u53D6\u6A21\u7684\u539F\u56E0\u662F\u5F53 rear \u7B49\u4E8E front \u65F6\uFF0C\u961F\u5217\u662F\u7A7A\u7684\uFF0C\u800C (this.rear - this.front + this.maxSize) \u7684\u7ED3\u679C\u4E3A this.maxSize\uFF0C\u6240\u4EE5\u9700\u8981\u5BF9 maxSize \u53D6\u6A21\uFF0C\u7ED3\u679C\u4E3A 0\u3002

      \u8FD9\u6837\u5B9E\u73B0 size \u65B9\u6CD5\u7684\u597D\u5904\u662F\u4E0D\u9700\u8981\u7EF4\u62A4\u8BA1\u6570\u5668\uFF0C\u56E0\u4E3A\u8BA1\u7B97 front \u548C rear \u4E4B\u95F4\u7684\u8DDD\u79BB\u672C\u8EAB\u5C31\u53EF\u4EE5\u5F97\u5230\u961F\u5217\u7684\u5927\u5C0F\u3002
  */</span>
  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rear <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize
  <span class="token punctuation">}</span>

  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u8BA1\u7B97\u961F\u5217\u5143\u7D20\u7684\u4E2A\u6570?</span>
    <span class="token comment">// (rear - front + maxSize) % maxSize</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>front<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> index <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> cq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CircleQueue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
cq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
cq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
cq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
cq<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
cq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
cq<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6808" tabindex="-1"><a class="header-anchor" href="#\u6808" aria-hidden="true">#</a> \u6808</h3><blockquote><p>\u8FDF\u5230\u65E9\u9000, \u5148\u8FDB\u540E\u51FA\u7684\u6570\u636E\u7ED3\u6784</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>
  front <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">// \u7D22\u5F150\u4EE3\u8868\u7A7A, \u7B2C\u4E00\u4E2A\u4F4D\u7F6E\u7A7A\u51FA\u6765</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>

  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">&lt;</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>

  <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">ele</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>front<span class="token punctuation">]</span> <span class="token operator">=</span> ele
    <span class="token punctuation">}</span>	
  <span class="token punctuation">}</span>

  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>front<span class="token operator">--</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>front<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">12220</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u524D\u4E2D\u540E\u7F00\u8868\u8FBE\u5F0F\u4E0E\u9006\u6CE2\u5170\u8BA1\u7B97\u5668" tabindex="-1"><a class="header-anchor" href="#\u524D\u4E2D\u540E\u7F00\u8868\u8FBE\u5F0F\u4E0E\u9006\u6CE2\u5170\u8BA1\u7B97\u5668" aria-hidden="true">#</a> \u524D\u4E2D\u540E\u7F00\u8868\u8FBE\u5F0F\u4E0E\u9006\u6CE2\u5170\u8BA1\u7B97\u5668</h4><blockquote><p>\u524D\u4E2D\u540E\u7F00\u8868\u8FBE\u5F0F\u662F\u7528\u4E8E\u8868\u793A\u7B97\u6570\u7684\u8868\u8FBE\u5F0F</p><p>\u5176 &quot;\u524D\u4E2D\u540E&quot;\u6307\u7684\u662F\u8FD0\u7B97\u7B26\u7684\u4F4D\u7F6E</p><p>\u524D\u7F00\u8868\u8FBE\u5F0F\u6307\u7684\u662F, \u8FD0\u7B97\u7B26\u51FA\u73B0\u5728\u6570\u5B57\u7684\u524D\u65B9, \u4E2D\u7F00\u662F\u4E2D\u95F4, \u540E\u7F00\u662F\u540E\u9762</p><p>\u6240\u4EE5\u6211\u4EEC\u6700\u5E38\u7528\u7684\u7B97\u6570\u8868\u8FBE\u5F0F\u4E3A\u4E2D\u7F00\u8868\u8FBE\u5F0F</p><p>\u5982: (a + b) * c \u4E3A\u4E2D\u7F00 , \u5BF9\u5E94\u7684\u540E\u7F00\u4E3A ab+c* \u524D\u7F00\u4E3A *+abc</p></blockquote><p><strong>\u4E2D\u7F00\u8F6C\u540E\u7F00\u8868\u8FBE\u5F0F(\u9006\u6CE2\u5170)</strong></p><blockquote><p>\u4E2D\u7F00\u8868\u8FBE\u5F0F\u8F6C\u4E3A\u524D\u7F00, \u540E\u7F00\u8868\u8FBE\u5F0F\u4F7F\u7528\u6808\u6765\u5B9E\u73B0, \u8BB0\u5F55\u4E0B\u6211\u7684\u601D\u8003\u4E3A\u4EC0\u4E48\u4F7F\u7528\u6808</p><p>\u9996\u5148\u4EE5\u4E00\u4E2A\u8868\u8FBE\u5F0F\u4E3A\u4F8B a + b * c / (d + f)</p><p>\u9996\u5148\u6700\u6734\u7D20\u7684\u60F3\u6CD5\u662F \u4ECE\u5934\u904D\u5386\u5230\u5C3E, \u62FF\u5230\u64CD\u4F5C\u7B26, \u7136\u540E\u6839\u636E\u5DE6\u53F3\u7684\u4E0B\u6807\u76F4\u63A5\u8FD0\u7B97. \u4F46\u8FD9\u79CD\u65B9\u6CD5\u5F88\u5FEB\u5C31\u88AB\u5426\u5B9A\u4E86</p><p>\u56E0\u4E3A\u5047\u5982\u5148\u904D\u5386\u5230 + \u6B64\u65F6\u5E76\u4E0D\u80FD\u76F4\u63A5\u8FD0\u7B97a + b, \u56E0\u4E3A\u660E\u663E\u540E\u9762\u7684\u64CD\u4F5C\u7B26\u6709\u66F4\u5148\u7684\u4F18\u5148\u7EA7. \u4F46\u7B49\u8FD0\u7B97\u5B8C(d + f)\u540E, \u5B57\u7B26\u4E32\u5DF2\u7ECF\u4FBF\u5229\u5B8C\u6BD5, \u6B64\u65F6\u8FD8\u9700\u8981\u4ECE\u5934\u5F00\u59CB\u904D\u5386\u627E\u5230\u7B2C\u4E8C\u4F18\u5148\u7EA7\u7684\u64CD\u4F5C\u7B26\u8FDB\u884C\u8FD0\u7B97, \u5982\u6B64\u5F80\u590D, \u5927\u91CF\u7684\u6027\u80FD\u88AB\u8017\u8D39\u4E86</p><p>\u6240\u4EE5\u5C31\u8003\u8651\u628A\u64CD\u4F5C\u7B26\u7F13\u5B58\u4E0B\u6765, \u4F46\u662F\u4F7F\u7528\u4EC0\u4E48\u5B58\u90A3? \u6570\u636E\u7ED3\u6784\u90A3\u4E48\u591A, \u9009\u54EA\u4E2A\u6570\u636E\u7ED3\u6784\u5408\u9002\u5462?</p><p>\u8BA4\u771F\u60F3\u5176\u5B9E\u53EF\u4EE5\u603B\u7ED3\u4E00\u4E2A\u89C4\u5F8B, : \u524D\u4E00\u4E2A\u64CD\u4F5C\u7B26\u662F\u5426\u6267\u884C\u662F\u7531\u540E\u4E00\u4E2A\u64CD\u4F5C\u7B26\u51B3\u5B9A\u7684, \u540E\u4E00\u4E2A\u4E5F\u662F\u7531\u5B83\u7684\u540E\u4E00\u4E2A\u64CD\u4F5C\u7B26\u7684\u4F18\u5148\u7EA7\u51B3\u5B9A\u7684.</p><p>\u5982\u8FD9\u4E2A\u4F8B\u5B50 + \u7684\u6267\u884C\u662F\u770B\u540E\u9762\u7684*\u662F\u5426\u6BD4\u4ED6\u4F18\u5148\u7EA7\u66F4\u9AD8, * \u662F\u5426\u8FD0\u7B97\u662F\u7531\u540E\u9762\u7684/\u4F18\u5148\u7EA7\u662F\u5426\u6BD4\u4ED6\u66F4\u9AD8\u51B3\u5B9A\u7684</p><p>\u6240\u4EE5\u5229\u7528\u6808\u5B58\u64CD\u4F5C\u7B26\u662F\u6700\u597D\u7684, \u904D\u5386\u7684\u987A\u5E8F\u662F\u6B63\u5E8F, \u90A3\u4E48\u64CD\u4F5C\u7B26\u5728\u6808\u7684\u987A\u5E8F\u4E3A\u9006\u5E8F, \u5F53\u9700\u8981\u64CD\u4F5C\u7684\u65F6\u5019\u6B63\u597D\u5F39\u51FA\u6808, \u540E\u4E00\u4E2A\u64CD\u4F5C\u5B8C\u4E86, \u518D\u8FDB\u884C\u524D\u4E00\u4E2A\u64CD\u4F5C.</p><p>\u8FD9\u4E2A\u6838\u5FC3\u60F3\u51FA\u6765, \u518D\u53BB\u8003\u8651\u7EC6\u8282\u7684\u95EE\u9898\u548C\u89C4\u5219, \u6BD4\u5982\u6570\u5B57\u662F\u5426\u4E5F\u9700\u8981\u5B58\u50A8, \u9700\u8981\u4EC0\u4E48\u6570\u636E\u7ED3\u6784\u5B58\u50A8? \u4EC0\u4E48\u65F6\u5019\u5C3D\u5FC3\u8FD0\u7B97\u7B49\u7B49\u5C31\u5E76\u4E0D\u56F0\u96BE\u4E86</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// (12+2)*9-8 --&gt; 12 2+9*8-</span>
<span class="token keyword">const</span> <span class="token function-variable function">toPostfixExp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> numStk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> opeStk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  	<span class="token keyword">const</span> opers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment">// \u83B7\u53D6\u64CD\u4F5C\u7B26\u7684\u4F18\u5148\u7EA7</span>
    <span class="token keyword">const</span> <span class="token function-variable function">getPriority</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ope</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ope<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>ope <span class="token operator">===</span> <span class="token string">&#39;+&#39;</span> <span class="token operator">||</span> ope <span class="token operator">===</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>ope <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">||</span> ope <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u4ECE\u6570\u6808\u5F39\u51FA\u4E24\u4E2A\u6570\u5B57, \u4ECE\u64CD\u4F5C\u7B26\u6808\u5F39\u51FA\u4E00\u4E2A\u4FDD\u5B58\u5230\u7ED3\u679C\u6570\u7EC4\u91CC</span>
    <span class="token keyword">const</span> <span class="token function-variable function">saveRes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
         <span class="token keyword">const</span> num2 <span class="token operator">=</span> numStk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
         <span class="token keyword">const</span> num1 <span class="token operator">=</span> numStk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
         num1 <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span>
         num2 <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>
         res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>opeStk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> token <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> token <span class="token operator">=</span> exp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>opers<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// \u5982\u679C\u64CD\u4F5C\u7B26\u6808\u9876\u7684\u7684\u4F18\u5148\u7EA7\u5927\u4E8E\u7B49\u4E8E\u5F53\u524D\u64CD\u4F5C\u7B26\u4F18\u5148\u7EA7, \u7ACB\u5373\u64CD\u4F5C</span>
        <span class="token comment">// \u5982\u679C\u64CD\u4F5C\u7B26\u6808\u9876\u5143\u7D20\u5C0F\u4E8E\u5F53\u524D\u64CD\u4F5C\u7B26\u6709\u9650\u7EA7, \u5C06\u5176\u52A0\u5165\u64CD\u4F5C\u7B26\u6808</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getPriority</span><span class="token punctuation">(</span>opeStk<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">saveRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        opeStk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>
        <span class="token keyword">continue</span>
      <span class="token punctuation">}</span> 
      
      <span class="token keyword">if</span><span class="token punctuation">(</span>token <span class="token operator">===</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// \u5F53\u4E3A)\u65F6\u5019, \u5E94\u8BE5\u53BB\u627E\u5BF9\u5E94\u7684(</span>
        <span class="token comment">// \u5728\u627E\u5230</span>
        <span class="token keyword">let</span> top <span class="token operator">=</span> numStk<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>top <span class="token operator">!==</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token function">saveRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          	top <span class="token operator">=</span> numStk<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        numStk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// \u5F53token\u4E3A\u6570\u5B57\u6216\u8005(\u7684\u60C5\u51B5</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>token <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        numStk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        numStk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">+</span>token<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      
    <span class="token punctuation">}</span>
  
    <span class="token keyword">while</span><span class="token punctuation">(</span>opeStk<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">saveRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
<span class="token comment">// (12+2)*9-8 --&gt; 12 2+9*8-</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toPostfixExp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;9&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;8&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u540E\u7F00\u8868\u8FBE\u5F0F(\u9006\u6CE2\u5170)\u76F4\u63A5\u8BA1\u7B97</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">evalRPN</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tokens</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> numStk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> opers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> calcMethods <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;+&quot;</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">,</span>
        <span class="token string-property property">&quot;-&quot;</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">,</span>
        <span class="token string-property property">&quot;*&quot;</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">,</span>
        <span class="token string-property property">&quot;/&quot;</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num1 <span class="token operator">/</span> num2<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token function-variable function">calc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">oper<span class="token punctuation">,</span>num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> calcMethods<span class="token punctuation">[</span>oper<span class="token punctuation">]</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>token <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>opers<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            numStk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">+</span>token<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> num2 <span class="token operator">=</span> numStk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> num1 <span class="token operator">=</span> numStk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            numStk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> numStk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u54C8\u5E0C\u8868" tabindex="-1"><a class="header-anchor" href="#\u54C8\u5E0C\u8868" aria-hidden="true">#</a> \u54C8\u5E0C\u8868</h3><h3 id="\u6811" tabindex="-1"><a class="header-anchor" href="#\u6811" aria-hidden="true">#</a> \u6811</h3><h3 id="\u4E8C\u53C9\u6811\u7684\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811\u7684\u904D\u5386" aria-hidden="true">#</a> \u4E8C\u53C9\u6811\u7684\u904D\u5386</h3><h4 id="\u4E8C\u53C9\u6811dfs\u4E0E\u5148\u4E2D\u540E\u5E8F\u904D\u5386-\u9012\u5F52\u7248" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811dfs\u4E0E\u5148\u4E2D\u540E\u5E8F\u904D\u5386-\u9012\u5F52\u7248" aria-hidden="true">#</a> \u4E8C\u53C9\u6811dfs\u4E0E\u5148\u4E2D\u540E\u5E8F\u904D\u5386--\u9012\u5F52\u7248</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">BTtraversal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token comment">// \u5728\u6B64\u64CD\u4F5C\u8282\u70B9\u4E3A\u5148\u5E8F\u904D\u5386</span>
  <span class="token function">BTtraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
  <span class="token comment">// \u5728\u6B64\u64CD\u4F5C\u8282\u70B9\u4E3A\u4E2D\u5E8F\u904D\u5386</span>
  <span class="token function">BTtraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
  <span class="token comment">// \u5728\u6B64\u64CD\u4F5C\u8282\u70B9\u4E3A\u540E\u5E8F\u904D\u5386</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u4E8C\u53C9\u6811dfs\u4E0E\u5148\u4E2D\u540E\u5E8F\u904D\u5386-\u975E\u9012\u5F52\u7248" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811dfs\u4E0E\u5148\u4E2D\u540E\u5E8F\u904D\u5386-\u975E\u9012\u5F52\u7248" aria-hidden="true">#</a> \u4E8C\u53C9\u6811dfs\u4E0E\u5148\u4E2D\u540E\u5E8F\u904D\u5386--\u975E\u9012\u5F52\u7248</h4><p><strong>\u5148\u5E8F\u975E\u9012\u5F52</strong></p><blockquote><p>\u5176\u4E2D\u96BE\u7406\u89E3\u7684\u662F while(stack.length &gt; 0 || node) \u4E3A\u4EC0\u4E48\u5FAA\u73AF\u7684\u6761\u4EF6\u4E2D\u6709\u4E2A\u6216\u8005node</p><p>\u8FD9\u662F\u5BF9\u8FB9\u754C\u60C5\u51B5\u7684\u5904\u7406, \u5F53\u5F39\u51FA\u6839\u8282\u70B9\u7684\u65F6\u5019, \u6B64\u65F6\u6808\u4E3A\u7A7A, node\u6307\u9488\u6307\u5411\u6839\u8282\u70B9\u7684\u53F3\u8282\u70B9, \u5982\u679C\u53EA\u5199 while(stack.length &gt; 0) \u5FAA\u73AF\u5C31\u4F1A\u505C\u6B62, \u4E0D\u4F1A\u5904\u7406\u5230\u53F3\u5B50\u6811</p><p>\u6240\u4EE5\u6808\u7A7A\u5B9A\u4E49\u4E0D\u4E86\u904D\u5386\u7ED3\u675F, \u5F53\u904D\u5386\u7ED3\u675F\u7684\u65F6\u5019, \u4E00\u5B9A\u662F\u6808\u7A7A\u4E86, \u5E76\u4E14node\u6307\u9488\u4E3Anull</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
  
  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>node<span class="token punctuation">]</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//\u5982\u679C\u6709\u5DE6\u8282\u70B9, \u5148\u5904\u7406\u5DE6\u8282\u70B9</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      node <span class="token operator">=</span> node<span class="token punctuation">.</span>left
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5904\u7406\u4E0A\u4E2A\u8282\u70B9\u7684\u53F3\u8282\u70B9</span>
    node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>right
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u4E2D\u5E8F\u975E\u9012\u5F52</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">infixTraversal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
  
  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>node<span class="token punctuation">]</span>
  <span class="token keyword">let</span> curNode
  <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//\u5982\u679C\u6709\u5DE6\u8282\u70B9, \u5148\u5904\u7406\u5DE6\u8282\u70B9</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      node <span class="token operator">=</span> node<span class="token punctuation">.</span>left
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5904\u7406\u4E0A\u4E2A\u8282\u70B9\u7684\u53F3\u8282\u70B9</span>
    curNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>curNode<span class="token punctuation">)</span>
    node <span class="token operator">=</span> node<span class="token punctuation">.</span>right
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u540E\u5E8F\u975E\u9012\u5F52</strong></p><blockquote><p>\u601D\u8DEF\u4E00: \u8BB0\u5F55\u6CD5, \u7528\u4E00\u4E2A\u6307\u9488\u8BB0\u5F55\u4E0A\u4E00\u6B21\u8F93\u51FA\u7684\u503C, \u6BD4\u8F83\u70E7\u8111, \u8001\u5B9E\u8BB0\u4E0D\u4F4F</p><p>\u601D\u8DEF\u4E8C: \u5982\u679C\u4F60\u4F1A\u5148\u5E8F\u5E8F\u904D\u5386\u5373\u4E2D\u5DE6\u53F3, \u90A3\u4E48\u5C31\u4F1A\u6C42\u4E2D\u53F3\u5DE6, \u90A3\u4E48\u98A0\u5012\u4E0B\u5DE6\u4E2D\u987A\u5E8F\u5373\u4E3A\u5DE6\u53F3\u4E2D\u540E\u5E8F</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">postoderTraversal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
  
  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>node<span class="token punctuation">]</span>
  <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>
      temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      node <span class="token operator">=</span> node<span class="token punctuation">.</span>right
    <span class="token punctuation">}</span>
    node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> temp<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u4E8C\u53C9\u6811bfs\u4E0E\u5C42\u5E8F\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811bfs\u4E0E\u5C42\u5E8F\u904D\u5386" aria-hidden="true">#</a> \u4E8C\u53C9\u6811bfs\u4E0E\u5C42\u5E8F\u904D\u5386</h4><blockquote><p>bfs\u548C\u5C42\u5E8F\u904D\u5386\u7684\u533A\u522B\u548C\u8054\u7CFB</p><ol><li>\u4E8C\u53C9\u6811\u7684bfs\u548C\u5C42\u5E8F\u904D\u5386\u90FD\u662F\u4F7F\u7528\u961F\u5217\u5B9E\u73B0</li><li>bfs\u662F\u6BCF\u4E2A\u8282\u70B9\u90FD\u8FDB\u884C\u4E00\u6B21\u8F93\u51FA, \u5C42\u5E8F\u904D\u5386\u662F\u6BCF\u4E00\u5C42\u8FDB\u884C\u4E00\u6B21\u8F93\u51FA</li></ol></blockquote><p><strong>\u4E8C\u53C9\u6811\u7684bfs</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">bfs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>

    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>node<span class="token punctuation">]</span>
    <span class="token keyword">let</span> curNode
    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        curNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>curNode<span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>
            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>
            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u4E8C\u53C9\u6811\u7684\u5C42\u5E8F\u904D\u5386</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">levelOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> res

    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>node<span class="token punctuation">]</span>
    <span class="token keyword">let</span> curNode
    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length <span class="token comment">// \u8BB0\u5F55\u5F53\u524D\u5C42\u6709\u51E0\u4E2A\u8282\u70B9</span>
        <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// \u6BCF\u4E00\u5C42\u7528\u4E00\u4E2A\u6570\u7EC4\u4FDD\u5B58</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            curNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>
                queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>
                queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      	<span class="token comment">// \u6BCF\u4E00\u5C42\u641E\u5B8C\u540E\u8BB0\u5F55\u4E00\u4E0B</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u4E8C\u53C9\u641C\u7D22\u6811" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u641C\u7D22\u6811" aria-hidden="true">#</a> \u4E8C\u53C9\u641C\u7D22\u6811</h4><h4 id="\u7EBF\u7D22\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#\u7EBF\u7D22\u4E8C\u53C9\u6811" aria-hidden="true">#</a> \u7EBF\u7D22\u4E8C\u53C9\u6811</h4><h4 id="avl-\u81EA\u5E73\u8861\u4E8C\u53C9-\u6811" tabindex="-1"><a class="header-anchor" href="#avl-\u81EA\u5E73\u8861\u4E8C\u53C9-\u6811" aria-hidden="true">#</a> AVL(\u81EA\u5E73\u8861\u4E8C\u53C9)\u6811</h4><blockquote></blockquote><h4 id="\u8D6B\u592B\u66FC\u6811" tabindex="-1"><a class="header-anchor" href="#\u8D6B\u592B\u66FC\u6811" aria-hidden="true">#</a> \u8D6B\u592B\u66FC\u6811</h4><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h4><h3 id="\u5806" tabindex="-1"><a class="header-anchor" href="#\u5806" aria-hidden="true">#</a> \u5806</h3><blockquote><p>\u5806\u7684\u57FA\u672C\u6982\u5FF5\u4E0D\u518D\u8BB0\u5F55</p></blockquote><blockquote><p>\u5806\u7684\u5B9E\u73B0\u548C\u5E94\u7528\u89C1\u4F18\u5148\u7EA7\u961F\u5217\u548C\u5806\u6392\u5E8F</p></blockquote><h3 id="\u56FE" tabindex="-1"><a class="header-anchor" href="#\u56FE" aria-hidden="true">#</a> \u56FE</h3><h2 id="\u9AD8\u7EA7\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u9AD8\u7EA7\u7B97\u6CD5" aria-hidden="true">#</a> \u9AD8\u7EA7\u7B97\u6CD5</h2><h3 id="\u52A8\u6001\u89C4\u5212" tabindex="-1"><a class="header-anchor" href="#\u52A8\u6001\u89C4\u5212" aria-hidden="true">#</a> \u52A8\u6001\u89C4\u5212</h3><h4 id="\u6590\u6CE2\u90A3\u5951\u6570\u5217" tabindex="-1"><a class="header-anchor" href="#\u6590\u6CE2\u90A3\u5951\u6570\u5217" aria-hidden="true">#</a> \u6590\u6CE2\u90A3\u5951\u6570\u5217</h4><blockquote><p>\u6590\u6CE2\u90A3\u5951\u6570\u5217\u7531 0 \u548C 1 \u5F00\u59CB\uFF0C\u4E4B\u540E\u7684\u6590\u6CE2\u90A3\u5951\u6570\u5C31\u662F\u7531\u4E4B\u524D\u7684\u4E24\u6570\u76F8\u52A0\u800C\u5F97\u51FA\u3002</p></blockquote><p><strong>\u66B4\u529B\u9012\u5F52</strong></p><blockquote><p>\u66B4\u529B\u9012\u5F52\u5B58\u5728\u7684\u95EE\u9898 : \u5B58\u5728\u7740\u5927\u91CF\u91CD\u53E0\u5B50\u95EE\u9898. \u5212\u51FA\u9012\u5F52\u6811\u53EF\u4EE5\u5F88\u6E05\u6670\u770B\u5230\u8FD9\u70B9</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u4F18\u53161: \u8BB0\u5FC6\u5316\u9012\u5F52\u4F18\u5316\u66B4\u529B\u9012\u5F52</strong></p><blockquote><p>\u5229\u7528\u8BB0\u5FC6\u5316\u526A\u679D.</p><p>\u53D1\u73B0\u91CD\u590D\u7684\u8282\u70B9\u88AB\u8BA1\u7B97, \u53EF\u4EE5\u7528\u4E00\u4E2A\u6570\u7EC4/\u54C8\u5E0C\u8868\u6765\u8BB0\u5F55\u8BA1\u7B97\u7684\u8282\u70B9\u503C, \u5982\u679C\u5B58\u50A8\u4E86\u8BE5\u8282\u70B9\u8FD0\u7B97\u7684\u7ED3\u679C\u5219\u8FD4\u56DE, \u4E0D\u518D\u8FDB\u884C\u9012\u5F52</p><p>\u9012\u5F52\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A\u4E00\u4E2A\u51FD\u6570\u7684\u590D\u6742\u5EA6 * \u51FD\u6570\u9012\u5F52\u8C03\u7528\u7684\u6B21\u6570. \u7ECF\u8FC7\u8FD9\u6837\u7684\u526A\u679D, \u65F6\u95F4\u590D\u6742\u5EA6\u4F18\u5316\u4E3AO(n)</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">const</span> memoery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">let</span> value

   <span class="token keyword">const</span> <span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">memoery<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>memoery<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">return</span> memoery<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
       value <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>memoery<span class="token punctuation">,</span>n <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">helper</span><span class="token punctuation">(</span>memoery<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> 
       memoery<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
       <span class="token keyword">return</span> value
   <span class="token punctuation">}</span>

   <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>memoery<span class="token punctuation">,</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u4ECE\u4E0B\u5230\u4E0A\u7684\u9012\u63A8: \u52A8\u6001\u89C4\u5212</strong></p><blockquote><p>\u52A8\u6001\u89C4\u5212\u662F\u4ECE\u4E0B\u5230\u4E0A\u7684\u9012\u63A8, \u800C\u9012\u5F52\u662F\u4ECE\u9876\u5411\u4E0B\u9012\u5F52, \u4ECE\u4E0B\u5230\u4E0A\u56DE\u6EAF.</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> 
   
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">// \u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B</span>
   <span class="token punctuation">}</span> 
   <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u4F18\u5316\u4E8C: \u5C06\u6590\u6CE2\u90A3\u5951\u6C42\u89E3\u7A7A\u95F4\u590D\u6742\u5EA6\u4F18\u5316\u52300(1)</strong></p><blockquote><p>\u4E0A\u4F8B\u4E2D, \u7528dp\u6570\u7EC4\u5B58\u653E\u4E86\u4ECE1 - n\u6240\u6709\u7684\u89E3\u96C6, \u6700\u540E\u8FD4\u56DEdp[n]. \u8017\u8D39\u7684\u7A7A\u95F4\u590D\u6742\u5EA6\u4E3AO(n).</p><p>\u5176\u5B9E\u53EA\u9700\u8981\u4E24\u4E2A\u53D8\u91CF, \u4FDD\u5B58\u4E0A\u4E00\u6B21\u7684\u89E3\u548C\u4E0A\u4E0A\u4E00\u6B21\u7684\u89E3\u5373\u53EF. \u65F6\u95F4\u590D\u6742\u5EA6\u88AB\u4F18\u5316\u5230O(1)</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>
   <span class="token keyword">let</span> prePre <span class="token operator">=</span> <span class="token number">0</span>
   <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token number">1</span>
   <span class="token keyword">let</span> curr <span class="token operator">=</span> <span class="token number">1</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       curr <span class="token operator">=</span> prePre <span class="token operator">+</span> pre
       prePre <span class="token operator">=</span> pre <span class="token comment">//\u4E3A\u4E0B\u4E00\u6B21\u505A\u51C6\u5907</span>
       pre <span class="token operator">=</span> curr <span class="token comment">// \u4E3A\u4E0B\u4E00\u6B21\u505A\u51C6\u5907</span>
   <span class="token punctuation">}</span> 
   <span class="token keyword">return</span> curr
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="n01\u80CC\u5305\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#n01\u80CC\u5305\u95EE\u9898" aria-hidden="true">#</a> n01\u80CC\u5305\u95EE\u9898</h4><blockquote><p>\u6307n\u4E2A\u7269\u54C1, \u6BCF\u4E2A\u7269\u54C1\u53EA\u6709\u4E00\u4E2A, \u5C06\u5176\u88C5\u5165\u91CD\u91CF\u56FA\u5B9A\u7684\u80CC\u5305\u4E2D, \u6C42\u6700\u5927\u4EF7\u503C</p></blockquote><table><thead><tr><th>\u7269\u54C1</th><th>\u91CD\u91CF</th><th>\u4EF7\u683C</th></tr></thead><tbody><tr><td>\u5409\u4ED6</td><td>1</td><td>15</td></tr><tr><td>\u4E66</td><td>3</td><td>25</td></tr><tr><td>\u7BEE\u7403</td><td>4</td><td>30</td></tr></tbody></table><p>\u80CC\u5305\u7684\u603B\u91CD\u91CF\u4E3A5</p>`,136),ks=s("blockquote",null,[s("p",null,"\u5206\u6790:"),s("ol",null,[s("li",null,"01\u80CC\u5305\u95EE\u9898, 0\u4EE3\u8868\u9009\u5219, 1\u4EE3\u8868\u4E0D\u9009, \u5373\u80CC\u5305\u95EE\u9898\u4E2D\u5BF9\u4E00\u4EF6\u7269\u54C1\u9009\u548C\u4E0D\u9009\u7684\u60C5\u51B5\u6C42\u6700\u5927\u5047\u503C\u7684\u95EE\u9898"),s("li",null,[n("\u5217\u51FA\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"M"),s("mi",null,"a"),s("mi",null,"x"),s("mo",{stretchy:"false"},"("),s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"w"),s("mi",null,"e"),s("mi",null,"i"),s("mi",null,"g"),s("mi",null,"h"),s("mi",null,"t"),s("mo",{stretchy:"false"},"("),s("mtext",null,"\u603B"),s("mo",{stretchy:"false"},")"),s("mo",null,"\u2212"),s("mi",null,"w"),s("mi",null,"e"),s("mi",null,"i"),s("mi",null,"g"),s("mi",null,"h"),s("mi",null,"t"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mi",null,"V"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")"),s("mo",{separator:"true"},","),s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"f(n) = Max( f(weight(\u603B) - weight(i) )+ V(i)) , f( n - 1) )")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"\u603B"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mclose"},"))"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mclose"},"))"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"))")])])]),n(". \u5373\u5BF9\u4E8E\u6C42\u91CD\u91CF\u4E3Ai\u7684\u80CC\u5305\u7684\u6700\u5927\u4EF7\u503C. \u5176\u7B49\u4EF7\u4E8E\u5982\u679C\u9009\u8BE5\u7269\u54C1\u548C\u4E0D\u9009\u8BE5\u5546\u54C1")])])],-1),ds=a(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u660E\u786E\u72B6\u6001: \u5728\u9009\u62E9\u7684\u4EFB\u610F\u65F6\u523B\u90FD\u9700\u8981\u660E\u786E 1. \u9009\u62E9\u540E\u80CC\u5305\u7684\u5269\u4F59\u5BB9\u91CF 2. \u9009\u62E9\u540E\u53EF\u9009\u62E9\u7684\u7269\u54C1\u8FD8\u6709\u54EA\u4E9B</span>
<span class="token comment">// \u660E\u786E\u9009\u62E9 : \u9009\u62E9\u8FD9\u4EF6\u7269\u54C1 or \u4E0D\u9009\u62E9\u8FD9\u4EF6\u7269\u54C1</span>
<span class="token comment">// \u660E\u786Edp\u6570\u7EC4\u5B9A\u4E49: dp[i][w] \u4E3A\u524Di\u4E2A\u7269\u54C1, \u80CC\u5305\u5BB9\u91CF\u4E3Aw\u65F6\u5019, \u53EF\u9009\u62E9\u7684\u6700\u5927\u4EF7\u503C</span>

<span class="token comment">// weight\u662F\u80CC\u5305\u7684\u91CD\u91CF, v\u662F\u4EF7\u683C\u6570\u7EC4, w\u662F\u91CD\u91CF\u6570\u7EC4</span>
<span class="token keyword">const</span> <span class="token function-variable function">bag01</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">weight<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u521D\u59CB\u5316\u8FB9\u7F18case</span>
  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> j<span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> w <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> weight<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>
      	
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u5B8C\u5168\u80CC\u5305\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u5B8C\u5168\u80CC\u5305\u95EE\u9898" aria-hidden="true">#</a> \u5B8C\u5168\u80CC\u5305\u95EE\u9898</h4><blockquote><p>\u6307n\u4E2A\u7269\u54C1, \u6BCF\u4E2A\u7269\u54C1\u4E2A\u6570\u4E0D\u786E\u5B9A, \u5C06\u5176\u88C5\u5165\u5BB9\u91CF\u56FA\u5B9A\u7684\u80CC\u5305\u4E2D, \u6700\u5927\u7684\u4EF7\u503C\u4E3A\u591A\u5C11</p></blockquote><h3 id="kmp\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#kmp\u7B97\u6CD5" aria-hidden="true">#</a> KMP\u7B97\u6CD5</h3><h3 id="\u8D2A\u5FC3\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u8D2A\u5FC3\u7B97\u6CD5" aria-hidden="true">#</a> \u8D2A\u5FC3\u7B97\u6CD5</h3><h3 id="\u6C49\u8BFA\u5854\u95EE\u9898\u4E0E\u5206\u6CBB\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u6C49\u8BFA\u5854\u95EE\u9898\u4E0E\u5206\u6CBB\u7B97\u6CD5" aria-hidden="true">#</a> \u6C49\u8BFA\u5854\u95EE\u9898\u4E0E\u5206\u6CBB\u7B97\u6CD5</h3><blockquote><p>\u5206\u6CBB\u7B97\u6CD5\u7684\u601D\u60F3\u5F88\u7B80\u5355, \u5C06\u5927\u95EE\u9898\u5206\u89E3\u6210\u82E5\u5E72\u4E2A\u5B50\u95EE\u9898\u6C42\u89E3. \u4E00\u822C\u7528\u9012\u5F52\u5B9E\u73B0</p></blockquote><blockquote><p>\u9012\u5F52\u7684\u7279\u70B9, \u662F\u6781\u5BB9\u6613\u7406\u89E3, \u4F46\u4E0D\u5BB9\u6613\u601D\u8003\u8C03\u7528\u6808\u7684\u60C5\u51B5, \u4EE5\u53CA\u5165\u53C2\u6709\u54EA\u4E9B, \u5165\u53C2\u7684\u542B\u4E49\u662F\u4EC0\u4E48</p><p>\u9488\u5BF9\u6C49\u8BFA\u5854\u95EE\u9898, \u53EF\u4EE5\u753B\u51FA\u6267\u884C\u7684\u9012\u5F52\u6811, \u4E00\u4E2A\u4E09\u53C9\u6811. \u4EE5n = 2\u6216\u8005n=3, \u6837\u672C\u91CF\u5C0F\u7684\u753B\u51FA\u56FE, \u6709\u5229\u4E8E\u7406\u89E3\u6267\u884C\u987A\u5E8F</p><p>\u8FD8\u6709\u5C31\u662F\u9012\u5F52, \u8981\u6709\u4E00\u80A1\u5B50\u7384\u5B66. \u5148\u5728\u8111\u4E2D\u6784\u601D\u597D\u51FD\u6570\u7684\u529F\u80FD, \u8FD8\u6CA1\u6709\u5199\u5C31\u5047\u8BBE\u4ED6\u4E00\u5B9A\u80FD\u5B9E\u73B0\u8FD9\u4E2A\u529F\u80FD, \u7136\u540E\u9700\u8981\u8865\u4EC0\u4E48\u53C2\u6570, \u518D\u52A0\u4E0A\u4EC0\u4E48\u53C2\u6570. \u8FD9\u6837\u624D\u80FD\u5199\u597D\u9012\u5F52</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">hannuota</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token punctuation">,</span><span class="token constant">C</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\u4ECE</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">A</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">C</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">hannuota</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\u4ECE</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">A</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">C</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token function">hannuota</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>

<span class="token function">hannuota</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u516B\u7687\u540E\u95EE\u9898\u4E0E\u56DE\u6EAF\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u516B\u7687\u540E\u95EE\u9898\u4E0E\u56DE\u6EAF\u7B97\u6CD5" aria-hidden="true">#</a> \u516B\u7687\u540E\u95EE\u9898\u4E0E\u56DE\u6EAF\u7B97\u6CD5</h3><blockquote><p>n\u7687\u540E\u95EE\u9898, \u5728\u4E00\u4E2AN * N\u68CB\u76D8\u4E0A\u653E\u7F6E\u68CB\u5B50, \u8981\u6C42\u6BCF\u4E00\u884C\u53EA\u80FD\u6709\u4E00\u4E2A\u68CB\u5B50, \u4E14\u4ED6\u7684\u540C\u4E00\u884C, \u540C\u4E00\u5217, \u540C\u4E00\u5DE6\u53F3\u659C\u7EBF\u4E0A\u4E0D\u80FD\u518D\u6709\u7687\u540E</p><p>n =4 \u5C31\u662F4\u7687\u540E\u95EE\u9898, 8\u5C31\u662F8\u7687\u540E\u95EE\u9898</p></blockquote><blockquote><p>\u601D\u8DEF: \u5178\u4E2D\u5178\u56DE\u6EAF\u7B97\u6CD5, leetcode\u56F0\u96BE\u9898\u4E2D\u7684\u4E2D\u7B49\u9898</p><p>\u5176\u4E2D\u503C\u5F97\u8BB0\u4F4F\u7684\u662F \u4E0D\u7528\u8003\u8651\u516B\u4E2A\u65B9\u5411\u662F\u5426\u6709\u68CB\u5B50, \u6BCF\u653E\u7F6E\u4E00\u4E2A\u68CB\u5B50\u5C31\u4F1A\u9012\u5F52\u8FDB\u5230\u4E0B\u4E00\u5C42, \u4F46\u51E1\u56DE\u5230\u8FD9\u4E00\u5C42\u5C31\u4F1A\u64A4\u9500\u672C\u5C42\u653E\u7F6E\u7684\u68CB\u5B50, \u6240\u4EE5\u4E0D\u5B58\u5728\u5DE6\u53F3\u6709\u68CB\u5B50\u7684\u60C5\u51B5. \u53E6\u5916\u5728\u672C\u5C42\u653E\u7F6E\u7684\u65F6\u5019\u53EA\u9700\u8981\u8003\u8651\u4E0A\u9762\u7684\u60C5\u51B5, \u4E0B\u9762\u7684\u4E0D\u7528\u8003\u8651</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">solveNQueens</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> chessboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">===</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
            ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chessboard<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> 
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValid</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>
            chessboard<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Q&#39;</span>
            <span class="token function">backtrack</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            chessboard<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;.&#39;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token comment">// \u6BCF\u4E00\u884C\u5728\u653E\u7687\u540E\u7684\u65F6\u5019, \u53EA\u7528\u8DDF\u4E0A\u4E00\u884C\u7684\u5DE6\u4E0A, \u4E0A, \u53F3\u4E0A\u6BD4\u8F83</span>
    <span class="token keyword">const</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span>col</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5224\u65AD\u4E0A\u65B9\u662F\u5426\u6709\u7687\u540E</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>chessboard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;Q&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// \u5224\u65AD\u5DE6\u4E0A\u662F\u5426\u6709\u7687\u540E</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>chessboard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;Q&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// \u5224\u65AD\u53F3\u4E0A\u662F\u5426\u6709\u7687\u540E</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>j <span class="token operator">=</span> col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>chessboard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">===</span> <span class="token string">&#39;Q&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> ret
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="prim-\u666E\u5229\u59C6-\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#prim-\u666E\u5229\u59C6-\u7B97\u6CD5" aria-hidden="true">#</a> Prim(\u666E\u5229\u59C6) \u7B97\u6CD5</h3><h3 id="kruscal-\u514B\u9C81\u65AF\u5361\u5C14-\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#kruscal-\u514B\u9C81\u65AF\u5361\u5C14-\u7B97\u6CD5" aria-hidden="true">#</a> Kruscal(\u514B\u9C81\u65AF\u5361\u5C14)\u7B97\u6CD5</h3><h3 id="dijkstra-\u8FEA\u6770\u65AF\u7279\u62C9-\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#dijkstra-\u8FEA\u6770\u65AF\u7279\u62C9-\u7B97\u6CD5" aria-hidden="true">#</a> Dijkstra(\u8FEA\u6770\u65AF\u7279\u62C9)\u7B97\u6CD5</h3><h3 id="floyd-\u5F17\u6D1B\u4F0A\u5FB7-\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#floyd-\u5F17\u6D1B\u4F0A\u5FB7-\u7B97\u6CD5" aria-hidden="true">#</a> Floyd(\u5F17\u6D1B\u4F0A\u5FB7)\u7B97\u6CD5</h3><h3 id="\u9A91\u58EB\u5468\u6E38\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u9A91\u58EB\u5468\u6E38\u7B97\u6CD5" aria-hidden="true">#</a> \u9A91\u58EB\u5468\u6E38\u7B97\u6CD5</h3><h3 id="\u8D6B\u592B\u66FC\u7F16-\u89E3\u7801\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u8D6B\u592B\u66FC\u7F16-\u89E3\u7801\u5B9E\u73B0" aria-hidden="true">#</a> \u8D6B\u592B\u66FC\u7F16/\u89E3\u7801\u5B9E\u73B0</h3><h2 id="\u4E86\u89E3" tabindex="-1"><a class="header-anchor" href="#\u4E86\u89E3" aria-hidden="true">#</a> \u4E86\u89E3</h2><h3 id="_2-3\u6811" tabindex="-1"><a class="header-anchor" href="#_2-3\u6811" aria-hidden="true">#</a> 2-3\u6811</h3><h3 id="b\u6811\u548Cb-\u6811" tabindex="-1"><a class="header-anchor" href="#b\u6811\u548Cb-\u6811" aria-hidden="true">#</a> B\u6811\u548CB+\u6811</h3><h3 id="b-\u6811\u548C\u591A\u8DEF\u67E5\u627E\u6811" tabindex="-1"><a class="header-anchor" href="#b-\u6811\u548C\u591A\u8DEF\u67E5\u627E\u6811" aria-hidden="true">#</a> B*\u6811\u548C\u591A\u8DEF\u67E5\u627E\u6811</h3><h2 id="\u7279\u522B\u8BB0\u5F55" tabindex="-1"><a class="header-anchor" href="#\u7279\u522B\u8BB0\u5F55" aria-hidden="true">#</a> \u7279\u522B\u8BB0\u5F55</h2><h3 id="\u5BF9\u6570\u5668" tabindex="-1"><a class="header-anchor" href="#\u5BF9\u6570\u5668" aria-hidden="true">#</a> \u5BF9\u6570\u5668</h3><blockquote><p>\u968F\u673A\u751F\u6210\u7528\u4F8B\u6D4B\u8BD5\u7B97\u6CD5\u7684\u6846\u67B6</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">genRandomArr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">maxLen<span class="token punctuation">,</span>maxVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u751F\u6210\u968F\u673A\u957F\u5EA6\u7684\u6570\u7EC4</span>
  <span class="token keyword">const</span> randomLen <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> maxLen<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>randomLen<span class="token punctuation">)</span>
  <span class="token comment">// \u957F\u5EA6\u968F\u673A\u7684\u6570\u7EC4\u5185, \u503C\u4E3A\u968F\u673A</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> randomLen<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> maxVal
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>

<span class="token keyword">const</span> isValid <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u81EA\u5DF1\u5B9E\u73B0\u5BF9\u7ED3\u679C\u7684\u9A8C\u8BC1\u903B\u8F91</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">valideAlgorithm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">algorithm</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// \u6D4B\u8BD5\u7684\u6570\u91CF</span>
  <span class="token keyword">let</span> maxVal <span class="token operator">=</span> <span class="token number">10000</span>
  <span class="token keyword">let</span> maxLen <span class="token operator">=</span> <span class="token number">100</span>
  <span class="token keyword">let</span> validCount <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> fails <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> randomArr <span class="token operator">=</span> <span class="token function">genRandomArr</span><span class="token punctuation">(</span>maxLen<span class="token punctuation">,</span>maxVal<span class="token punctuation">)</span>
    <span class="token keyword">let</span> copy <span class="token operator">=</span> randomArr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// \u5FC5\u987B\u62F7\u8D1D\u4E00\u4EFD\u539F\u6570\u7EC4, \u56E0\u4E3A\u539F\u6709\u7684\u7B97\u6CD5\u53EF\u80FD\u5BF9\u6570\u7EC4\u505A\u4E86\u539F\u5730\u4FEE\u6539, \u4FEE\u6539\u540E\u7684\u6570\u7EC4\u65E0\u6CD5\u4F5C\u4E3A\u5931\u8D25\u7528\u4F8B\u8F93\u51FA</span>
    
    <span class="token function">algorithm</span><span class="token punctuation">(</span>randomArr<span class="token punctuation">)</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span>randomArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      validCount<span class="token operator">++</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
      fails<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">---- \u6D4B\u8BD5\u7528\u4F8B\u5171</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\u4E2A, \u6210\u529F</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>validCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\u4E2A, \u5931\u8D25</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count <span class="token operator">-</span> validCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\u4E2A----</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\u5931\u8D25\u7528\u4F8B\u4E3A: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>fails<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>###\u600E\u4E48\u770B\u4E00\u4E2A\u6570\u7EC4</p><p><strong>\u5E0C\u5C14\u6392\u5E8F</strong></p><p>\u5C06\u6570\u7EC4\u4EE5\u6B65\u957F\u4E3A\u754C\u9650\u770B\u6210\u82E5\u5E72\u7EC4</p><hr><p><strong>\u5FEB\u901F\u6392\u5E8F</strong></p><p>\u5C06\u6570\u7EC4\u5212\u5206\u4E3A\u5C0F\u4E8E\u7B49\u4E8E\u533A(\u5C0F\u4E8E\u7B49\u4E8E\u57FA\u51C6\u503Cpivot)\u548C\u5927\u4E8E\u533A</p><h3 id="\u4E8C\u53C9\u6811\u7684\u904D\u5386\u95EE\u9898\u5957\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811\u7684\u904D\u5386\u95EE\u9898\u5957\u8DEF" aria-hidden="true">#</a> \u4E8C\u53C9\u6811\u7684\u904D\u5386\u95EE\u9898\u5957\u8DEF</h3><p><strong>\u5957\u8DEF</strong></p><h4 id="\u4F8B\u5B50\u4E00" tabindex="-1"><a class="header-anchor" href="#\u4F8B\u5B50\u4E00" aria-hidden="true">#</a> \u4F8B\u5B50\u4E00</h4><h4 id="\u4F8B\u5B50\u4E8C" tabindex="-1"><a class="header-anchor" href="#\u4F8B\u5B50\u4E8C" aria-hidden="true">#</a> \u4F8B\u5B50\u4E8C:</h4><blockquote><p>\u7ED9\u5B9A\u4E00\u4E2A\u4E8C\u53C9\u6811, \u6C42\u4E24\u4E2A\u8282\u70B9\u7684\u6700\u8FDC\u8DDD\u79BB!</p></blockquote><p>\u5957\u8DEF\u5206\u6790:</p><ol><li>\u4E3A\u4E86\u89E3\u51B3\u95EE\u9898\u5206\u60C5\u51B5\u8BA8\u8BBA <ul><li>\u82E5\u4E0D\u7ECF\u8FC7X\u7684\u8282\u70B9, \u8981\u5DE6\u53F3\u5B50\u6811\u6700\u5927\u7684\u8DDD\u79BB\u6C42max</li><li>\u82E5\u7ECF\u8FC7X\u8282\u70B9, \u8981\u5DE6\u5B50\u6811\u7684\u9AD8\u5EA6+1+\u53F3\u5B50\u6811\u7684\u9AD8\u5EA6</li></ul></li><li>\u7EDF\u4E00\u5DE6\u53F3\u5B50\u6811\u7684\u4FE1\u606F <ul><li>\u5DE6\u53F3\u5B50\u6811\u8981 \u6700\u5927\u8DDD\u79BB, \u9AD8\u5EA6</li></ul></li></ol>`,40);function vs(hs,bs){return e(),p(l,null,[c,i,u,r,m,k,d,v,h,b,g,y,w,f,x,z,j,q,_,M,S,L,I,T,O,A,N,V,F,C,P,B,E,R,Q,D,$,X,U,H,K,J,G,W,Y,Z,ss,ns,as,ts,ps,es,ls,os,cs,is,us,rs,ms,ks,ds],64)}var ws=t(o,[["render",vs],["__file","\u6570\u636E\u7ED3\u6784\u4E0E\u7B97\u6CD5.html.vue"]]);export{ws as default};
